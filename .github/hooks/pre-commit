#!/bin/bash

# Project Chimera Quality Gate Pre-Commit Hook
# Prevents commits with anti-patterns defined in Phase 0
# UPDATED: 500-line file size standard (pragmatic refactoring complete)

echo "üîí Running Project Chimera quality gate checks..."

# Get list of staged C# files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "\.cs$" | grep "Assets/ProjectChimera" || true)

if [ -z "$STAGED_FILES" ]; then
    echo "‚úÖ No C# files to check"
    exit 0
fi

# Check each staged file for violations
VIOLATIONS_FOUND=false

echo "üìÅ Checking staged files:"
for file in $STAGED_FILES; do
    echo "   - $file"
done
echo ""

# Check for FindObjectOfType (exclude legitimate fallback usages)
echo "üîç Checking for FindObjectOfType violations..."
for file in $STAGED_FILES; do
    if [ -f "$file" ] && [[ "$file" != *"DependencyResolutionHelper"* ]] && [[ "$file" != *"GameObjectRegistry"* ]] && [[ "$file" != *"/Interfaces/"* ]]; then
        VIOLATIONS=$(grep -n "FindObjectOfType" "$file" | grep -v "// Fallback" | grep -v "UnityEngine.Object.FindObject" || true)
        if [ ! -z "$VIOLATIONS" ]; then
            echo "‚ùå FindObjectOfType found in $file:"
            echo "$VIOLATIONS"
            echo ""
            VIOLATIONS_FOUND=true
        fi
    fi
done

# Check for Resources.Load (exclude legitimate audio/data services)
echo "üîç Checking for Resources.Load violations..."
for file in $STAGED_FILES; do
    if [ -f "$file" ] && [[ "$file" != *"AudioLoadingService"* ]] && [[ "$file" != *"DataManager"* ]] && [[ "$file" != *"/Interfaces/"* ]]; then
        VIOLATIONS=$(grep -n "Resources\.Load" "$file" | grep -v "// Legacy" | grep -v "// MIGRATION" || true)
        if [ ! -z "$VIOLATIONS" ]; then
            echo "‚ùå Resources.Load found in $file:"
            echo "$VIOLATIONS"
            echo ""
            VIOLATIONS_FOUND=true
        fi
    fi
done

# Check for raw Debug.Log (exclude legitimate infrastructure usage)
echo "üîç Checking for raw Debug.Log violations..."
for file in $STAGED_FILES; do
    if [ -f "$file" ] && [[ "$file" != *"ChimeraLogger"* ]] && [[ "$file" != *"ChimeraScriptableObject"* ]] && [[ "$file" != *"/Shared/"* ]] && [[ "$file" != *"/CI/"* ]] && [[ "$file" != *"MigrationTool"* ]]; then
        VIOLATIONS=$(grep -n "Debug\.Log" "$file" | grep -v "UnityEngine.Debug.Log" || true)
        if [ ! -z "$VIOLATIONS" ]; then
            echo "‚ùå Raw Debug.Log found in $file:"
            echo "$VIOLATIONS"
            echo ""
            VIOLATIONS_FOUND=true
        fi
    fi
done

# Check for dangerous reflection patterns (exclude DI infrastructure)
echo "üîç Checking for dangerous reflection violations..."
for file in $STAGED_FILES; do
    if [ -f "$file" ] && [[ "$file" != *"ServiceContainer"* ]] && [[ "$file" != *"ServiceAdvancedFeatures"* ]] && [[ "$file" != *"TypedServiceRegistration"* ]] && [[ "$file" != *"/Core/"* ]]; then
        VIOLATIONS=$(grep -n "GetType()\.GetField\|GetType()\.GetProperty\|GetType()\.GetMethod" "$file" || true)
        if [ ! -z "$VIOLATIONS" ]; then
            echo "‚ùå Dangerous reflection found in $file:"
            echo "$VIOLATIONS"
            echo ""
            VIOLATIONS_FOUND=true
        fi
    fi
done

# Check file sizes (500-line standard)
echo "üîç Checking file sizes (500-line standard)..."
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        LINES=$(wc -l < "$file" | tr -d ' ')
        if [ "$LINES" -gt 500 ]; then
            echo "‚ùå File too large: $file ($LINES lines, limit: 500)"
            VIOLATIONS_FOUND=true
        fi
    fi
done

# Report results
if [ "$VIOLATIONS_FOUND" = true ]; then
    echo ""
    echo "üí• Commit blocked by quality gate violations!"
    echo ""
    echo "üìã Fix these issues:"
    echo "  ‚Ä¢ Replace FindObjectOfType with ServiceContainer.Resolve<T>()"
    echo "  ‚Ä¢ Replace Resources.Load with Addressables or direct references"
    echo "  ‚Ä¢ Replace Debug.Log with ChimeraLogger.Log()"
    echo "  ‚Ä¢ Replace dangerous reflection with proper interfaces or direct access"
    echo "  ‚Ä¢ Refactor files >500 lines into smaller, focused components"
    echo ""
    echo "Then retry your commit."
    exit 1
else
    echo "‚úÖ All quality gate checks passed!"
    echo "üöÄ Commit approved"
    exit 0
fi