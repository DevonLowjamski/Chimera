name: Quality Gate - Anti-Pattern Detection

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    name: Code Quality Gate
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check for FindObjectOfType violations
      run: |
        echo "üîç Scanning for FindObjectOfType anti-pattern..."
        VIOLATIONS=$(grep -r "FindObjectOfType" Assets/ProjectChimera --include="*.cs" | grep -v "Test" | grep -v "\.backup" || true)
        if [ ! -z "$VIOLATIONS" ]; then
          echo "‚ùå FAIL: FindObjectOfType calls detected in runtime assemblies:"
          echo "$VIOLATIONS"
          echo ""
          echo "Replace with ServiceContainer.Resolve<T>() pattern"
          exit 1
        else
          echo "‚úÖ PASS: No FindObjectOfType violations found"
        fi
        
    - name: Check for Resources.Load violations  
      run: |
        echo "üîç Scanning for Resources.Load anti-pattern..."
        VIOLATIONS=$(grep -r "Resources\.Load" Assets/ProjectChimera --include="*.cs" | grep -v "Test" | grep -v "\.backup" || true)
        if [ ! -z "$VIOLATIONS" ]; then
          echo "‚ùå FAIL: Resources.Load calls detected:"
          echo "$VIOLATIONS"
          echo ""
          echo "Replace with Addressables or direct asset references"
          exit 1
        else
          echo "‚úÖ PASS: No Resources.Load violations found"
        fi
        
    - name: Check for raw Debug.Log violations
      run: |
        echo "üîç Scanning for raw Debug.Log calls..."
        # Allow Debug.Log in Systems/Diagnostics namespace
        VIOLATIONS=$(grep -r "Debug\.Log" Assets/ProjectChimera --include="*.cs" | grep -v "Systems/Diagnostics" | grep -v "ChimeraLogger" | grep -v "Test" | grep -v "\.backup" || true)
        if [ ! -z "$VIOLATIONS" ]; then
          echo "‚ùå FAIL: Raw Debug.Log calls detected outside Systems/Diagnostics:"
          echo "$VIOLATIONS"
          echo ""
          echo "Replace with ChimeraLogger.Log() for conditional compilation"
          exit 1
        else
          echo "‚úÖ PASS: No raw Debug.Log violations found"
        fi
        
    - name: Check for dangerous reflection violations
      run: |
        echo "üîç Scanning for dangerous reflection patterns..."
        # Check for reflection field/property/method access outside DI framework
        VIOLATIONS=$(grep -r "GetType()\.GetField\|GetType()\.GetProperty\|GetType()\.GetMethod" Assets/ProjectChimera --include="*.cs" | grep -v "Test" | grep -v "\.backup" | grep -v "DependencyInjection" | grep -v "ServiceCollection" || true)
        if [ ! -z "$VIOLATIONS" ]; then
          echo "‚ùå FAIL: Dangerous reflection patterns detected:"
          echo "$VIOLATIONS"
          echo ""
          echo "Replace with proper interfaces or direct property/method access"
          exit 1
        else
          echo "‚úÖ PASS: No dangerous reflection violations found"
        fi
        
    - name: Check for GetComponent in lifecycle methods (Warning)
      run: |
        echo "üîç Scanning for GetComponent in Awake/Start/Update methods..."
        VIOLATIONS=$(grep -A5 -B5 -r "void \(Awake\|Start\|Update\)" Assets/ProjectChimera --include="*.cs" | grep "GetComponent" | grep -v "Test" | grep -v "\.backup" || true)
        if [ ! -z "$VIOLATIONS" ]; then
          echo "‚ö†Ô∏è WARNING: GetComponent calls in lifecycle methods detected:"
          echo "$VIOLATIONS"
          echo ""
          echo "Consider caching references or using dependency injection"
          # Don't exit with error for warnings
        else
          echo "‚úÖ PASS: No GetComponent lifecycle violations found"
        fi
        
    - name: Quality Gate Summary
      if: success()
      run: |
        echo "üéâ All quality gates passed!"
        echo "‚úÖ No FindObjectOfType anti-patterns"
        echo "‚úÖ No Resources.Load anti-patterns" 
        echo "‚úÖ No raw Debug.Log calls outside diagnostics"
        echo "‚úÖ No dangerous reflection violations"
        echo "‚úÖ Ready for Phase 1 development"