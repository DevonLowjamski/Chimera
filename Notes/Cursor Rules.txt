## I. General Principles & Mindset


1.  **Senior Developer Mindset:** Approach every task with the judgment, foresight, and experience of a senior (or 10x) engineer. Prioritize long-term code health, maintainability, and scalability.
2.  **Complete Implementation:**  Do not consider a task finished until it's *fully* implemented, thoroughly tested, and seamlessly integrated. Address all edge cases, potential issues, and user scenarios.
3.  **Ruthless Minimalism:** Strive for the *absolute fewest* lines of code necessary to achieve functionality and readability. Less code means fewer bugs, easier debugging, and faster comprehension.
4.  **Code Cleanliness:** Maintain an impeccably clean and well-organized codebase.  Adhere to strict, consistent naming conventions, formatting, and structural patterns.
5.  **Refactoring Threshold:** Files exceeding 200-300 lines *must* be refactored into smaller, more manageable, and logically cohesive units.  This is a hard limit.
6.  **Incremental, Focused Changes:**  Make *only* the changes directly required to solve the task at hand. Avoid unnecessary modifications to unrelated code, minimizing the risk of introducing unintended side effects.
7.  **Simplicity First:**  Always prefer simple, straightforward solutions over complex or overly engineered ones. Avoid unnecessary abstractions, clever tricks, or premature optimizations.
8. **Readability is Paramount**: Write code like you are writing for another person to understand and work on. Prioritize clear naming, consistent formatting, and straightforward logic.


## II. Coding Style & Best Practices


1.  **Duplication Avoidance (DRY):** *Actively* search for existing code that performs similar functions *before* writing any new code.  Reuse, refactor, and extend existing logic whenever possible.
2.  **Environment Awareness:** All code must function correctly and safely in *all* environments (dev, test, prod).  Explicitly consider environment-specific configurations and behaviors.
3.  **Comment Preservation:** *Never* delete existing comments unless they are demonstrably incorrect, misleading, or obsolete.  Comments are valuable context.
4.  **Avoid One-Time Scripts:** Minimize the use of single-use scripts embedded within application files.  If a script is truly needed, consider externalizing it.
5.  **Declarative UI:** UI rendering should be as declarative as possible. Minimize imperative logic, complex calculations, and ternary operators *within* the rendered output. Favor helper functions or well-defined variables.
6.  **Consistent Naming:**  Use clear, descriptive, and consistent naming conventions for variables, functions, classes, and files.  Follow established project conventions.
7. **Error Handling:** Implement robust and comprehensive error handling. Log errors with sufficient context for debugging, and handle exceptions gracefully.
8. **Type Hinting (Python):** Use type hints for all function parameters and return values in Python code. This improves readability and helps catch errors early.
9. **Logging over Printing (Python):** Use the `logging` module instead of `print` statements for debugging and monitoring. Configure logging appropriately for different environments.


## III. Reasoning, Problem Solving, & Analysis


1.  **Start with Uncertainty:** When confronting a problem or bug, *begin* with a mindset of uncertainty.  Explore multiple potential causes, even seemingly unlikely ones, before narrowing your focus.
2.  **Thorough Analysis (3 Paragraphs):** For complex issues, dedicate three well-structured paragraphs to exploring potential causes.  Consider different perspectives, system interactions, and recent changes. Avoid premature conclusions.
3.  **Balanced Consideration (50/50):** When evaluating *multiple* solution options, give *equal* and thorough consideration to each. Document the pros, cons, and potential risks of *each* option *before* making a decision.
4.  **Concise Answers:** Provide short, direct, and focused answers whenever possible.  Avoid unnecessary verbosity or tangential information.
5.  **Critical Search Evaluation:** Be *highly* skeptical of search results.  Identify and disregard red herrings. Verify the relevance, accuracy, and trustworthiness of information before applying it.
6.  **Essential Steps Only:** When breaking a large task into smaller steps, include *only* the absolutely essential steps required for completion. Eliminate any unnecessary or redundant actions.
7.  **Precise Search Queries:** Formulate search queries as if instructing a highly skilled human researcher. Be specific, include relevant technical details, and clearly state the desired outcome (code snippets, documentation links, etc.).
8. **Plain English Explanation:** Be able to clearly and simply explain any coding problem and the applied solution, in plain English.


## IV. Architecture & Separation of Concerns


1.  **Strict Single Responsibility:**  Every file, module, component, class, and function *must* have one, and *only* one, clearly defined purpose.
2.  **Component-Based Design:** Structure the application using small, self-contained, reusable components.  Favor composition over inheritance.
3.  **Hooks for Logic (Frontend):**  Encapsulate complex logic, data fetching, and state management within custom, reusable hooks (React).  Keep components primarily focused on rendering.
4.  **Global vs. Local:**
    *   **Global/Shared:** Place reusable components, hooks, utilities, constants, and types in well-defined shared folders (e.g., `shared/`, `common/`, `lib/`).
    *   **Local/Feature-Specific:** Keep components, hooks, and logic specific to a particular feature or module within a localized, feature-scoped folder structure.
5.  **Clear Layered Boundaries:**  Maintain strict separation between different layers of the application:
    *   **Presentation (UI):**  Handles user interface and interaction.
    *   **Application/Business Logic:**  Contains the core application logic and rules.
    *   **Data Access:**  Manages interaction with databases, APIs, and other data sources.
6.  **Unidirectional Data Flow:**  Implement a clear and consistent data flow pattern (e.g., unidirectional data flow in React).  Avoid complex or unpredictable data mutations.
7. **Dependency Injection (where applicable):** Use to make code more modular.


## V. Data Management


1.  **No Stubs or Fakes in Production:** *Never* introduce fake data, stubbed functions, or mocked responses into the `dev` or `prod` environments. These are *exclusively* for testing.
2. **Data Integrity:** Validate all data inputs and ensure data consistency across all environments.


## VI. Documentation


1. **Code Comments:** Use comments to explain *why* code is written a certain way, not *what* it does (the code should be self-documenting in that regard).
2. **README:** Maintain a comprehensive README file that describes the project, setup instructions, and any important information for developers.
3. **API Documentation:** Keep API documentation up-to-date (using Swagger/OpenAPI).


## Technical Stack & Environment
1.  **Backend:**
    *   **Language:** Python
    *   **Framework:** FastAPI (RESTful API)
    *   **API Style:** RESTful API
    *   **Data Serialization:** JSON
    *   **Asynchronous Tasks:** Celery with RabbitMQ (or Redis)
    *   **Error Handling:** Centralized logging; structured error responses.
    *   **API Documentation:** Automatic generation with Swagger/OpenAPI (integrated with FastAPI).
    * **Linting:** Use a linter such as Flake8.


2.  **Frontend:**
    *   **Languages:** HTML, JavaScript, (potentially TypeScript)
    *   **Framework:** React
    *   **State Management:** Context API (for simple state), Redux (for complex state and side effects)
    *   **Component Library:** Material UI
    *   **Routing:** React Router
    *   **Internationalization (i18n):** Use `react-i18next` or similar.
    *   **Accessibility (a11y):** Adhere to WCAG guidelines; use ARIA attributes where necessary.
    *   **Performance:** Bundle size optimization, code splitting, lazy loading, image optimization.
    * **Styling:** CSS Modules or Styled Components.


3.  **Data Storage:**
    *   **Relational Database:** PostgreSQL
    *   **Database ORM:** SQLAlchemy
    *   **Database Migrations:** Alembic
    *   **JSON File Storage:** Limited to configuration files and small, static datasets. *Strict validation and error handling.*
    *   **Caching:** Redis (for caching API responses, session data, etc.)


4.  **Search:**
    *   **Engine:** Elasticsearch (hosted on elastic.co)
    *   **Indexes:** Separate indexes for `dev` and `prod`.
    *   **Data Synchronization:** Dedicated synchronization service (or database triggers) to keep Elasticsearch indexes up-to-date with PostgreSQL.
    *   **Python Library:** Use the official `elasticsearch-py` library.
    *   **Elasticsearch DSL:** Utilize for complex queries.


5.  **Environments:**
    *   **Strict Separation:**  Maintain *completely* separate environments for `dev`, `test`, and `prod`.
    *   **Environment Variables:**  Use `.env` files (with `python-dotenv`) to manage configuration. *Never overwrite .env files without explicit user confirmation.*
    *   **Database Isolation:**  Separate databases *per environment*.
    *   **Test Environment Mirroring:** The `test` environment should closely replicate the `prod` environment.


6.  **Testing:**
    *   **Framework:** `pytest`
    *   **Unit Tests:**  Comprehensive coverage for individual functions, classes, and modules.
    *   **Integration Tests:** Test interactions between different parts of the application (e.g., API endpoints, database interactions).
    *   **Mocking:**  Use `unittest.mock` or `pytest-mock` *exclusively* for testing.  *Never* introduce mock data or stubbing into `dev` or `prod`.
    *   **Test Coverage:**  Strive for high test coverage (e.g., > 80%).  Use coverage reports to identify gaps.
    * **Continuous Integration:** Tests are run automatically on every code commit.


7.  **Deployment:**
    *   **Containerization:** Docker
    *   **Orchestration:** Docker Compose (for local development and potentially simple deployments) or Kubernetes (for more complex, scalable deployments).
    *   **CI/CD:** GitHub Actions (or similar: GitLab CI, Jenkins, CircleCI). Automate testing, building, and deployment.


8.  **Security:**
    *   **Authentication:** JWT (JSON Web Tokens) or OAuth 2.0.
    *   **Authorization:** Role-Based Access Control (RBAC).
    *   **Input Validation:**  Validate *all* user input on both the frontend and backend to prevent injection attacks (SQL injection, XSS, etc.). Use appropriate libraries for validation.
    *   **Data Encryption:**  Encrypt sensitive data at rest (database encryption) and in transit (HTTPS).
    *   **Dependency Security:** Regularly scan dependencies for vulnerabilities (e.g., using `pip-audit` or similar tools).
    * **Rate Limiting:** Implement to prevent abuse.


9. **Version Control**
      * **Git:** Use Git for version control.
      * **Branching Strategy:** Use Gitflow or GitHub Flow.


## UI Styling & Theming


1.  **Centralized Theme:** A *single* JavaScript file (e.g., `theme.js`) defines *all* styling: colors, fonts, spacing, breakpoints, and other design tokens.
2.  **Theme-Based Styling:** *All* UI components *must* reference the theme for styling values.  *No hardcoded values* (e.g., `#ff0000`, `16px`) are allowed within components.
3.  **Consistent Color Palette:** The theme file defines a comprehensive color palette:
    *   `primary`
    *   `secondary`
    *   `error`
    *   `warning`
    *   `info`
    *   `success`
    *   (And potentially variants: `light`, `dark`, `main`)
4.  **Typography System:** The theme file defines a complete typography system:
    *   Font families
    *   Font sizes (e.g., `h1`, `h2`, `body1`, `body2`, `caption`)
    *   Font weights
    *   Line heights
    *   Letter spacing
5.  **Spacing System:** The theme file defines a consistent spacing scale (e.g., 4px, 8px, 12px, 16px, 24px, 32px).  All spacing (margins, padding) should use values from this scale.
6.  **Component Styling:**
    *   **CSS Modules:** Prefer CSS Modules for scoped styling.
    *   **Styled Components:**  Acceptable alternative, especially for dynamic styles.
    *   **Inline Styles:**  *Strictly prohibited* except for dynamic styles that *cannot* be defined in CSS (e.g., positioning based on user interaction).
7. **Responsive Design:** Use media queries (defined in the theme) for responsive layouts.