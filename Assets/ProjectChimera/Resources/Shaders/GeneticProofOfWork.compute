// Genetic Proof-of-Work Compute Shader
// GPU-accelerated blockchain mining for instant breeding gameplay
//
// GAMEPLAY PURPOSE:
// Makes breeding feel INSTANT (<0.1 second) by using GPU parallel processing.
// While CPU mining takes 0.5-2 seconds, GPU mining completes almost instantly.
// Player clicks "Breed" → sees brief animation → offspring appears with ✅ badge.
//
// TECHNICAL NOTES:
// - Searches for valid nonce (hash with required leading zeros) in parallel
// - Each thread tests different nonce values simultaneously
// - Up to 65,536 threads working at once (massive parallelism)
// - Returns as soon as any thread finds valid nonce

#pragma kernel MineBlock

// ===== INPUT PARAMETERS =====
// Breeding event data (passed from C#)
uint _ParentHash1[8];          // SHA-256 hash as 8 uint32s (256 bits)
uint _ParentHash2[8];
uint _MutationSeed;
uint _Timestamp;
uint _Difficulty;               // Number of leading zeros required (default: 4)
uint _StartNonce;               // Starting nonce for this batch

// ===== OUTPUT BUFFER =====
// [0] = found nonce (if success)
// [1] = success flag (0 = not found, 1 = found)
RWStructuredBuffer<uint> _ResultBuffer;

// ===== SHA-256 CONSTANTS =====
// First 32 bits of fractional parts of cube roots of first 64 primes
static const uint K[64] = {
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

// SHA-256 helper functions
#define ROTR(x, n) (((x) >> (n)) | ((x) << (32 - (n))))
#define CH(x, y, z) (((x) & (y)) ^ (~(x) & (z)))
#define MAJ(x, y, z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
#define EP0(x) (ROTR(x, 2) ^ ROTR(x, 13) ^ ROTR(x, 22))
#define EP1(x) (ROTR(x, 6) ^ ROTR(x, 11) ^ ROTR(x, 25))
#define SIG0(x) (ROTR(x, 7) ^ ROTR(x, 18) ^ ((x) >> 3))
#define SIG1(x) (ROTR(x, 17) ^ ROTR(x, 19) ^ ((x) >> 10))

/// <summary>
/// Simplified SHA-256 hash computation for proof-of-work.
/// Computes hash of breeding event data with given nonce.
///
/// PERFORMANCE: ~10,000+ hashes/second per thread on modern GPU
/// With 65,536 threads → 655 million hashes/second (instant mining!)
/// </summary>
void ComputeSHA256(uint nonce, out uint hash[8])
{
    // Initialize hash values (first 32 bits of fractional parts of square roots of first 8 primes)
    hash[0] = 0x6a09e667;
    hash[1] = 0xbb67ae85;
    hash[2] = 0x3c6ef372;
    hash[3] = 0xa54ff53a;
    hash[4] = 0x510e527f;
    hash[5] = 0x9b05688c;
    hash[6] = 0x1f83d9ab;
    hash[7] = 0x5be0cd19;

    // Prepare message schedule (input data)
    uint W[64];

    // Copy parent hashes into message
    for (int i = 0; i < 8; i++)
    {
        W[i] = _ParentHash1[i];
        W[i + 8] = _ParentHash2[i];
    }

    // Add mutation seed, timestamp, and nonce
    W[16] = _MutationSeed;
    W[17] = _Timestamp;
    W[18] = nonce;

    // Padding (simplified for fixed-length input)
    W[19] = 0x80000000; // Append bit "1" followed by zeros
    for (int i = 20; i < 63; i++)
        W[i] = 0;
    W[63] = 608; // Message length in bits (19 * 32)

    // Extend the first 16 words into the remaining 48 words
    for (int i = 16; i < 64; i++)
    {
        W[i] = SIG1(W[i - 2]) + W[i - 7] + SIG0(W[i - 15]) + W[i - 16];
    }

    // Working variables
    uint a = hash[0];
    uint b = hash[1];
    uint c = hash[2];
    uint d = hash[3];
    uint e = hash[4];
    uint f = hash[5];
    uint g = hash[6];
    uint h = hash[7];

    // Main compression function (64 rounds)
    for (int i = 0; i < 64; i++)
    {
        uint t1 = h + EP1(e) + CH(e, f, g) + K[i] + W[i];
        uint t2 = EP0(a) + MAJ(a, b, c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    // Add compressed chunk to current hash value
    hash[0] += a;
    hash[1] += b;
    hash[2] += c;
    hash[3] += d;
    hash[4] += e;
    hash[5] += f;
    hash[6] += g;
    hash[7] += h;
}

/// <summary>
/// Checks if hash meets difficulty requirement (leading zeros).
/// Difficulty = 4 means first 4 hex digits must be "0000"
///
/// Example:
/// Hash: 0x0000a3f5... → Valid (4+ leading zeros)
/// Hash: 0x000fa3f5... → Invalid (only 3 leading zeros)
/// </summary>
bool MeetsDifficulty(uint hash[8], uint difficulty)
{
    // Check leading zeros in hash
    uint zerosNeeded = difficulty;

    // Each uint is 8 hex digits (32 bits)
    // Check full uints first
    uint fullUints = zerosNeeded / 8;
    for (uint i = 0; i < fullUints; i++)
    {
        if (hash[i] != 0)
            return false;
    }

    // Check remaining hex digits in next uint
    uint remainingZeros = zerosNeeded % 8;
    if (remainingZeros > 0)
    {
        uint nextUint = hash[fullUints];
        uint mask = 0xFFFFFFFF << ((8 - remainingZeros) * 4);
        if ((nextUint & mask) != 0)
            return false;
    }

    return true;
}

/// <summary>
/// Main compute kernel - searches for valid nonce in parallel.
///
/// GAMEPLAY PERFORMANCE:
/// - 256 threads per group × 256 groups = 65,536 parallel searches
/// - Each thread tests different nonce values
/// - First thread to find valid nonce writes result and signals success
/// - Typical completion: <0.1 second (feels instant to player)
///
/// THREAD LAYOUT:
/// Thread ID = _StartNonce + SV_DispatchThreadID
/// Example: If _StartNonce = 0, threads test nonces 0-65,535 simultaneously
/// </summary>
[numthreads(256, 1, 1)]
void MineBlock(uint3 id : SV_DispatchThreadID)
{
    // Calculate nonce for this thread
    uint nonce = _StartNonce + id.x;

    // Check if another thread already found solution
    // Early exit to save GPU cycles
    if (_ResultBuffer[1] == 1)
        return;

    // Compute hash with this nonce
    uint hash[8];
    ComputeSHA256(nonce, hash);

    // Check if hash meets difficulty requirement
    if (MeetsDifficulty(hash, _Difficulty))
    {
        // Solution found! Write result atomically
        // Use InterlockedExchange to ensure only first thread writes
        uint previousValue;
        InterlockedExchange(_ResultBuffer[1], 1, previousValue);

        // If we were first to set success flag, write our nonce
        if (previousValue == 0)
        {
            _ResultBuffer[0] = nonce;
        }
    }
}

// ===== ALTERNATIVE KERNEL: CPU-LIKE SEQUENTIAL MINING =====
// Used for debugging or as fallback if parallel mining has issues

#pragma kernel MineBlockSequential

[numthreads(1, 1, 1)]
void MineBlockSequential(uint3 id : SV_DispatchThreadID)
{
    // Sequential search (slow but reliable)
    uint maxAttempts = 100000;

    for (uint attempt = 0; attempt < maxAttempts; attempt++)
    {
        uint nonce = _StartNonce + attempt;

        uint hash[8];
        ComputeSHA256(nonce, hash);

        if (MeetsDifficulty(hash, _Difficulty))
        {
            _ResultBuffer[0] = nonce;
            _ResultBuffer[1] = 1;
            return;
        }
    }

    // No solution found in this batch
    _ResultBuffer[1] = 0;
}
