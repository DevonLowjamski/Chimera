using UnityEngine;
using System;
using System.Collections.Generic;


namespace ProjectChimera.Data.Save
{
    /// <summary>
    /// Core UI state data structures for save/load operations.
    /// Contains primary UI state, mode management, and level configurations.
    /// </summary>

    /// <summary>
    /// Main UI state DTO for the user interface system
    /// </summary>
    [System.Serializable]
    public class UIStateDTO
    {
        [Header("UI Mode and Level")]
        public UIModeStateDTO UIModeState;
        public UILevelStateDTO UILevelState;

        [Header("Panel States")]
        public List<UIPanelStateDTO> PanelStates = new List<UIPanelStateDTO>();

        // Backward compatibility property
        public List<UIPanelStateDTO> UIPanelStates
        {
            get => PanelStates;
            set => PanelStates = value;
        }

        [Header("Window Management")]
        public WindowManagerStateDTO WindowManagerState;

        [Header("User Preferences")]
        public UIUserPreferencesDTO UserPreferences;

        [Header("Camera and View")]
        public UICameraStateDTO CameraState;
        public UIViewStateDTO ViewState;

        [Header("Navigation and Menu")]
        public UINavigationStateDTO NavigationState;
        public UIMenuStateDTO MenuState;

        [Header("HUD and Overlays")]
        public UIHUDStateDTO HUDState;
        public List<UIOverlayStateDTO> OverlayStates = new List<UIOverlayStateDTO>();

        [Header("Interactive Elements")]
        public UIInteractionStateDTO InteractionState;
        public UIControlStateDTO ControlState;

        [Header("Theme and Visual")]
        public UIThemeStateDTO ThemeState;
        public UIAnimationStateDTO AnimationState;

        [Header("Localization")]
        public UILocalizationStateDTO LocalizationState;

        [Header("System Configuration")]
        public bool EnableUISystem = true;
        public bool EnableUIAnimations = true;
        public bool EnableTooltips = true;
        public bool EnableSoundEffects = true;
        public float UIScaleFactor = 1.0f;

        [Header("Window Management")]
        public UIWindowManagementDTO WindowManagement;

        [Header("Save Metadata")]
        public DateTime SaveTimestamp;
        public string SaveVersion = "1.0";
    }

    /// <summary>
    /// DTO for UI mode state (Design Mode, Play Mode, etc.)
    /// </summary>
    [System.Serializable]
    public class UIModeStateDTO
    {
        [Header("Current Mode")]
        public string CurrentMode = "PlayMode"; // "DesignMode", "PlayMode", "BuildMode", "ManageMode"
        public string PreviousMode;
        public DateTime ModeChangedTime;

        [Header("Mode Settings")]
        public Dictionary<string, UIModeConfigDTO> ModeConfigurations = new Dictionary<string, UIModeConfigDTO>();

        [Header("Mode Transitions")]
        public bool AllowModeTransitions = true;
        public List<string> AvailableModes = new List<string>();
        public List<string> RestrictedModes = new List<string>();

        [Header("Mode History")]
        public List<UIModeTransitionDTO> ModeHistory = new List<UIModeTransitionDTO>();

        [Header("Mode Preferences")]
        public string PreferredStartupMode = "PlayMode";
        public bool RememberLastMode = true;
        public bool ShowModeTransitionAnimations = true;
        public DateTime LastModeChange;
        public Dictionary<string, object> ModePreferences = new Dictionary<string, object>();
    }

    /// <summary>
    /// DTO for UI level state (interface complexity level)
    /// </summary>
    [System.Serializable]
    public class UILevelStateDTO
    {
        [Header("Current Level")]
        public string CurrentLevel = "Intermediate"; // "Beginner", "Intermediate", "Advanced", "Expert"
        public int LevelIndex = 1; // 0-3 for the four levels

        [Header("Level Features")]
        public List<string> EnabledFeatures = new List<string>();
        public List<string> HiddenFeatures = new List<string>();
        public List<string> SimplifiedFeatures = new List<string>();

        [Header("Level Configurations")]
        public Dictionary<string, UILevelConfigDTO> LevelConfigurations = new Dictionary<string, UILevelConfigDTO>();

        [Header("Adaptive UI")]
        public bool EnableAdaptiveUI = true;
        public float UserExperienceLevel = 0.5f; // 0-1, influences automatic level adjustments
        public DateTime LastLevelChange;

        [Header("Tutorial Integration")]
        public bool ShowLevelSpecificTutorials = true;
        public List<string> CompletedLevelTutorials = new List<string>();

        [Header("User Progression")]
        public Dictionary<string, float> FeatureUsageStats = new Dictionary<string, float>();
        public int TimeInCurrentLevel = 0; // minutes

        [Header("Level Options")]
        public List<string> AvailableLevels = new List<string>();
        public bool ShowAdvancedControls = false;
        public bool ShowTooltips = true;
        public int UIComplexity = 1;
    }

    /// <summary>
    /// DTO for individual UI panel states
    /// </summary>
    [System.Serializable]
    public class UIPanelStateDTO
    {
        [Header("Panel Identity")]
        public string PanelId;
        public string PanelName;
        public string PanelType; // "Window", "Popup", "Sidebar", "Toolbar", "HUD"

        [Header("Visibility and State")]
        public bool IsVisible = true;
        public bool IsMinimized = false;
        public bool IsMaximized = false;
        public bool IsPinned = false;
        public bool IsLocked = false;

        [Header("Position and Size")]
        public Vector2 Position;
        public Vector2 Size;
        public Vector2 MinSize;
        public Vector2 MaxSize;

        [Header("Docking and Layout")]
        public string DockState; // "Floating", "Docked", "Tabbed", "Auto"
        public string DockPosition; // "Left", "Right", "Top", "Bottom", "Center"
        public int TabOrder = 0;
        public bool AllowDocking = true;

        [Header("Content State")]
        public Dictionary<string, object> ContentData = new Dictionary<string, object>();
        public string ActiveTab;
        public List<string> VisibleTabs = new List<string>();

        [Header("User Interactions")]
        public DateTime LastInteracted;
        public DateTime LastAccessed;
        public int InteractionCount = 0;
        public float TimeSpentOpen = 0f; // minutes
        public int ZOrder = 0;

        [Header("Panel Preferences")]
        public float Opacity = 1.0f;
        public bool EnableTransparency = false;
        public bool AutoHide = false;
        public float AutoHideDelay = 5.0f;
    }

    /// <summary>
    /// DTO for UI camera state
    /// </summary>
    [System.Serializable]
    public class UICameraStateDTO
    {
        [Header("Camera Settings")]
        public Vector3 Position;
        public Quaternion Rotation;
        public float FieldOfView = 60f;
        public float ZoomLevel = 1.0f;

        [Header("Camera Behavior")]
        public string CameraMode = "Free"; // "Free", "Follow", "Fixed", "Orbital"
        public string MovementType = "Smooth"; // "Smooth", "Instant", "Eased"
        public float MovementSpeed = 5.0f;
        public float RotationSpeed = 90.0f;

        [Header("View Settings")]
        public bool OrthographicView = false;
        public float OrthographicSize = 10f;
        public Vector2 ClampBounds;
        public bool EnableBoundsClamping = false;

        [Header("Camera Presets")]
        public List<UICameraPresetDTO> SavedPresets = new List<UICameraPresetDTO>();
        public string ActivePreset;

        [Header("User Controls")]
        public bool EnableUserControl = true;
        public bool EnableMouseOrbit = true;
        public bool EnableKeyboardMovement = true;
        public bool EnableZoomControl = true;
    }

    /// <summary>
    /// DTO for UI view state
    /// </summary>
    [System.Serializable]
    public class UIViewStateDTO
    {
        [Header("Current View")]
        public string CurrentView = "MainView"; // "MainView", "DesignView", "ManagementView"
        public string PreviousView;
        public DateTime ViewChangedTime;

        [Header("View Configuration")]
        public Dictionary<string, UIViewConfigDTO> ViewConfigurations = new Dictionary<string, UIViewConfigDTO>();

        [Header("View History")]
        public List<UIViewTransitionDTO> ViewHistory = new List<UIViewTransitionDTO>();

        [Header("View Settings")]
        public bool EnableViewTransitions = true;
        public float TransitionDuration = 0.3f;
        public string TransitionStyle = "Fade"; // "Fade", "Slide", "Zoom", "None"

        [Header("Multi-View Support")]
        public bool EnableSplitView = false;
        public List<string> ActiveViews = new List<string>();
        public string PrimaryView;
    }

    /// <summary>
    /// DTO for UI overlay states
    /// </summary>
    [System.Serializable]
    public class UIOverlayStateDTO
    {
        [Header("Overlay Identity")]
        public string OverlayId;
        public string OverlayName;
        public string OverlayType; // "Modal", "NonModal", "Tooltip", "Notification"

        [Header("Overlay State")]
        public bool IsVisible = false;
        public bool IsModal = false;
        public float ZOrder = 0f;

        [Header("Position and Animation")]
        public Vector2 Position;
        public Vector2 Size;
        public string AnimationType = "Fade"; // "Fade", "Slide", "Scale", "None"
        public float AnimationDuration = 0.3f;

        [Header("Content")]
        public Dictionary<string, object> OverlayData = new Dictionary<string, object>();
        public DateTime ShowTime;
        public float AutoHideDelay = 0f; // 0 = no auto-hide

        [Header("User Interaction")]
        public bool AllowUserDismiss = true;
        public bool DismissOnBackgroundClick = true;
        public bool ShowCloseButton = true;
    }

    // Supporting DTOs for core UI state structures

    [System.Serializable]
    public class UIModeConfigDTO
    {
        public string ModeName;
        public List<string> EnabledPanels = new List<string>();
        public List<string> HiddenPanels = new List<string>();
        public Dictionary<string, object> ModeSettings = new Dictionary<string, object>();
        public bool IsDefault = false;
    }

    [System.Serializable]
    public class UIModeTransitionDTO
    {
        public string FromMode;
        public string ToMode;
        public DateTime TransitionTime;
        public string Reason;
        public float TransitionDuration;
    }

    [System.Serializable]
    public class UILevelConfigDTO
    {
        public string LevelName;
        public List<string> AvailableFeatures = new List<string>();
        public List<string> SimplifiedFeatures = new List<string>();
        public Dictionary<string, object> LevelSettings = new Dictionary<string, object>();
        public string Description;
    }

    [System.Serializable]
    public class UICameraPresetDTO
    {
        public string PresetName;
        public Vector3 Position;
        public Quaternion Rotation;
        public float FieldOfView;
        public bool IsOrthographic;
        public string Description;
    }

    [System.Serializable]
    public class UIViewConfigDTO
    {
        public string ViewName;
        public List<string> EnabledPanels = new List<string>();
        public string CameraPreset;
        public Dictionary<string, object> ViewSettings = new Dictionary<string, object>();
        public bool AllowCustomization = true;
    }

    [System.Serializable]
    public class UIViewTransitionDTO
    {
        public string FromView;
        public string ToView;
        public DateTime TransitionTime;
        public float TransitionDuration;
        public string TransitionType;
    }
}
