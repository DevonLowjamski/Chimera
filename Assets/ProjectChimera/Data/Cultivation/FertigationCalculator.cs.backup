using UnityEngine;
using System.Collections.Generic;


namespace ProjectChimera.Data.Cultivation
{
    /// <summary>
    /// BASIC: Simple fertigation calculator for Project Chimera's cultivation system.
    /// Focuses on essential nutrient calculations without complex environmental adjustments and strain-specific protocols.
    /// </summary>
    public static class FertigationCalculator
    {
        /// <summary>
        /// Calculate basic nutrient requirements for plants
        /// </summary>
        public static NutrientRequirements CalculateBasicNutrients(int plantCount, string growthStage)
        {
            float baseMultiplier = 1.0f;

            // Simple stage-based multipliers
            switch (growthStage?.ToLower())
            {
                case "seedling": baseMultiplier = 0.5f; break;
                case "vegetative": baseMultiplier = 1.0f; break;
                case "flowering": baseMultiplier = 1.2f; break;
                case "fruiting": baseMultiplier = 1.5f; break;
                default: baseMultiplier = 1.0f; break;
            }

            return new NutrientRequirements
            {
                Nitrogen = 100f * baseMultiplier * plantCount,
                Phosphorus = 50f * baseMultiplier * plantCount,
                Potassium = 150f * baseMultiplier * plantCount,
                Calcium = 80f * baseMultiplier * plantCount,
                Magnesium = 30f * baseMultiplier * plantCount,
                PlantCount = plantCount,
                GrowthStage = growthStage,
                CalculatedTime = System.DateTime.Now
            };
        }

        /// <summary>
        /// Calculate water and nutrient mix ratio
        /// </summary>
        public static MixRatio CalculateMixRatio(string nutrientType, float concentration)
        {
            // Simple ratio calculations
            float baseRatio = 1.0f;

            switch (nutrientType?.ToLower())
            {
                case "nitrogen": baseRatio = concentration / 100f; break;
                case "phosphorus": baseRatio = concentration / 50f; break;
                case "potassium": baseRatio = concentration / 150f; break;
                default: baseRatio = concentration / 100f; break;
            }

            return new MixRatio
            {
                NutrientType = nutrientType,
                Concentration = concentration,
                WaterToNutrientRatio = baseRatio,
                RecommendedpH = 6.0f,
                EC = baseRatio * 1.5f
            };
        }

        /// <summary>
        /// Get nutrient deficiency symptoms
        /// </summary>
        public static string GetDeficiencySymptoms(string nutrient)
        {
            switch (nutrient?.ToLower())
            {
                case "nitrogen": return "Yellowing of lower leaves, stunted growth";
                case "phosphorus": return "Dark green or purple leaves, poor root development";
                case "potassium": return "Brown leaf edges, weak stems";
                case "calcium": return "Leaf tip burn, distorted new growth";
                case "magnesium": return "Yellowing between leaf veins";
                default: return "General nutrient deficiency symptoms";
            }
        }

        /// <summary>
        /// Calculate nutrient cost
        /// </summary>
        public static float CalculateNutrientCost(NutrientRequirements requirements, Dictionary<string, float> prices)
        {
            float totalCost = 0f;

            if (prices.ContainsKey("nitrogen")) totalCost += requirements.Nitrogen * prices["nitrogen"];
            if (prices.ContainsKey("phosphorus")) totalCost += requirements.Phosphorus * prices["phosphorus"];
            if (prices.ContainsKey("potassium")) totalCost += requirements.Potassium * prices["potassium"];
            if (prices.ContainsKey("calcium")) totalCost += requirements.Calcium * prices["calcium"];
            if (prices.ContainsKey("magnesium")) totalCost += requirements.Magnesium * prices["magnesium"];

            return totalCost;
        }

        /// <summary>
        /// Check if nutrient levels are optimal
        /// </summary>
        public static NutrientStatus CheckNutrientStatus(float nitrogen, float phosphorus, float potassium)
        {
            bool nitrogenOk = nitrogen >= 80f && nitrogen <= 120f;
            bool phosphorusOk = phosphorus >= 40f && phosphorus <= 60f;
            bool potassiumOk = potassium >= 120f && potassium <= 180f;

            string status = "Unknown";
            if (nitrogenOk && phosphorusOk && potassiumOk)
            {
                status = "Optimal";
            }
            else if (!nitrogenOk || !phosphorusOk || !potassiumOk)
            {
                status = "Deficient";
            }
            else
            {
                status = "Excessive";
            }

            return new NutrientStatus
            {
                IsOptimal = nitrogenOk && phosphorusOk && potassiumOk,
                Status = status,
                NitrogenLevel = nitrogen,
                PhosphorusLevel = phosphorus,
                PotassiumLevel = potassium
            };
        }

        /// <summary>
        /// Get recommended nutrient schedule
        /// </summary>
        public static NutrientSchedule GetRecommendedSchedule(string growthStage)
        {
            string schedule = "Daily application";

            switch (growthStage?.ToLower())
            {
                case "seedling": schedule = "Every 2-3 days, half strength"; break;
                case "vegetative": schedule = "Every other day"; break;
                case "flowering": schedule = "Daily with phosphorus boost"; break;
                case "fruiting": schedule = "Daily with calcium supplement"; break;
            }

            return new NutrientSchedule
            {
                GrowthStage = growthStage,
                Schedule = schedule,
                Frequency = "Daily",
                Notes = "Monitor plant response and adjust as needed"
            };
        }

        /// <summary>
        /// Calculate pH adjustment needs
        /// </summary>
        public static pHAdjustment CalculatepHAdjustment(float currentpH, float targetpH)
        {
            float difference = targetpH - currentpH;
            string adjustment = "";

            if (Mathf.Abs(difference) < 0.1f)
            {
                adjustment = "No adjustment needed";
            }
            else if (difference > 0)
            {
                adjustment = $"Add base to increase pH by {difference:F1}";
            }
            else
            {
                adjustment = $"Add acid to decrease pH by {Mathf.Abs(difference):F1}";
            }

            return new pHAdjustment
            {
                CurrentpH = currentpH,
                TargetpH = targetpH,
                Difference = difference,
                AdjustmentNeeded = adjustment
            };
        }
    }

    /// <summary>
    /// Basic nutrient requirements
    /// </summary>
    [System.Serializable]
    public struct NutrientRequirements
    {
        public float Nitrogen;
        public float Phosphorus;
        public float Potassium;
        public float Calcium;
        public float Magnesium;
        public int PlantCount;
        public string GrowthStage;
        public System.DateTime CalculatedTime;
    }

    /// <summary>
    /// Mix ratio data
    /// </summary>
    [System.Serializable]
    public struct MixRatio
    {
        public string NutrientType;
        public float Concentration;
        public float WaterToNutrientRatio;
        public float RecommendedpH;
        public float EC;
    }

    /// <summary>
    /// Nutrient status
    /// </summary>
    [System.Serializable]
    public struct NutrientStatus
    {
        public bool IsOptimal;
        public string Status;
        public float NitrogenLevel;
        public float PhosphorusLevel;
        public float PotassiumLevel;
    }

    /// <summary>
    /// Nutrient schedule
    /// </summary>
    [System.Serializable]
    public struct NutrientSchedule
    {
        public string GrowthStage;
        public string Schedule;
        public string Frequency;
        public string Notes;
    }

    /// <summary>
    /// pH adjustment data
    /// </summary>
    [System.Serializable]
    public struct pHAdjustment
    {
        public float CurrentpH;
        public float TargetpH;
        public float Difference;
        public string AdjustmentNeeded;
    }
}
