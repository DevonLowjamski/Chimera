using UnityEngine;
using System;
using System.Collections.Generic;


namespace ProjectChimera.Data.Cultivation.IPM
{
    /// <summary>
    /// Core enums and essential data structures for the IPM system.
    /// Shared across all IPM modules for consistency.
    /// </summary>
    public static class IPMDataStructures
    {
        // Core IPM enums
        public enum IPMApproach
        {
            Biological_First,
            Cultural_Emphasis,
            Integrated_Balanced,
            Conventional_Backup,
            Organic_Only
        }

        public enum IPMComplexityLevel
        {
            Basic,
            Intermediate,
            Advanced,
            Professional,
            Research_Grade
        }

        public enum PestType
        {
            Spider_Mites,
            Thrips,
            Aphids,
            Whiteflies,
            Fungus_Gnats,
            Root_Aphids,
            Powdery_Mildew,
            Botrytis,
            Downy_Mildew,
            Fusarium,
            Pythium,
            Spider_Mites_Broad,
            Russet_Mites,
            Hemp_Russet_Mites
        }

        public enum BeneficialType
        {
            Predator,
            Parasitoid,
            Pathogen,
            Competitor,
            Pollinator
        }

        public enum InspectionFrequency
        {
            Daily,
            Every_Other_Day,
            Twice_Weekly,
            Weekly,
            Bi_Weekly,
            As_Needed
        }

        public enum ReleaseFrequency
        {
            Single,
            Weekly,
            Biweekly,
            Monthly
        }

        public enum TimeOfDay
        {
            Early_Morning,
            Morning,
            Midday,
            Afternoon,
            Evening,
            Night
        }

        public enum PracticeFrequency
        {
            Continuous,
            Daily,
            Weekly,
            Bi_Weekly,
            Monthly,
            Seasonally,
            As_Needed
        }

        public enum TreatmentType
        {
            Biological,
            Cultural,
            Mechanical,
            Organic,
            Chemical,
            Pheromone,
            Physical
        }

        public enum ResistanceRisk
        {
            None,
            Low,
            Medium,
            High,
            Very_High
        }

        public enum InterventionPriority
        {
            None,
            Low,
            Medium,
            High,
            Critical,
            Emergency
        }

        public enum RiskLevel
        {
            Very_Low,
            Low,
            Medium,
            High,
            Very_High,
            Critical
        }

        public enum PopulationTrend
        {
            Decreasing,
            Stable,
            Increasing,
            Unknown
        }

        public enum InfestationSeverity
        {
            None,
            Low,
            Medium,
            High,
            Critical
        }

        // Core assessment structures
        public class IPMAssessment
        {
            public DateTime AssessmentTimestamp;
            public string ZoneID;
            public int PlantCount;
            public IPMApproach IPMApproach;
            public PestDetectionResult[] DetectedPests;
            public EnvironmentalRiskFactor[] EnvironmentalRiskFactors;
            public float PlantVulnerabilityScore;
            public InterventionPriority InterventionPriority;
            public IPMRecommendation[] RecommendedActions;
            public RiskLevel OverallRiskLevel;

            // Additional properties for compatibility
            public string[] BeneficialOrganismStatus { get; set; } = new string[] { "Present", "Active" };
            public PreventativeRecommendation[] PreventativeRecommendations { get; set; } = new PreventativeRecommendation[0];
        }

        public class PreventativeRecommendation
        {
            public string Practice;
            public string Implementation;
            public float Effectiveness;
            public string Category;
            public string Recommendation;
            public float PotentialImprovement;
            public int Priority;
        }

        public class ImprovementRecommendation
        {
            public string Category;
            public string Recommendation;
            public float PotentialImprovement;
        }

        public class PestDetectionResult
        {
            public PestType PestType;
            public float PopulationLevel;
            public PopulationTrend Trend;
            public InfestationSeverity Severity;
            public string DetectionMethod;
        }

        public class EnvironmentalRiskFactor
        {
            public string Factor;
            public RiskLevel RiskLevel;
            public string Description;
        }

        public class IPMRecommendation
        {
            public string Action;
            public InterventionPriority Priority;
            public string Justification;
        }

        // Biological control structures
        public class BiologicalControlPlan
        {
            public PestType TargetPest;
            public string ZoneID;
            public DateTime CreationTimestamp;
            public float PestPressureLevel;
            public BeneficialOrganism[] SelectedBeneficials;
            public ReleaseStrategy ReleaseStrategy;
            public float SuccessProbability;
            public float CostEstimate;

            // Additional properties for compatibility
            public BeneficialOrganism[] RecommendedBeneficials { get; set; } = new BeneficialOrganism[0];
            public MonitoringRequirements MonitoringRequirements { get; set; }
        }

        public class ReleaseStrategy
        {
            public DateTime ReleaseDate;
            public float Quantity;
            public string[] ReleaseLocations;
            public ReleaseFrequency Frequency;
            public int MonitoringDays;
        }

        public class MonitoringRequirements
        {
            public string Protocol;
            public MonitoringStation[] Stations;
            public string Schedule;
            public string[] MonitoringMethods;
            public InspectionFrequency MonitoringFrequency;
            public Dictionary<string, float> ActionThresholds;
            public float[] AlertThresholds;
        }

        public class MonitoringStation
        {
            public string StationID;
            public string Location;
            public string Equipment;
            public string[] TargetPests;
        }

        public class MonitoringProtocol
        {
            public string ProtocolID;
            public string Name;
            public string Description;
            public float[] ActionThresholds;
        }

        // Monitoring structures
        public class MonitoringPlan
        {
            public string ZoneID;
            public DateTime PlanCreationDate;
            public float MonitoringDuration;
            public int PlantCount;
            public InspectionSchedule InspectionSchedule;

            // Additional properties for compatibility
            public string Protocol { get; set; } = "Standard";
            public MonitoringStation[] Stations { get; set; } = new MonitoringStation[0];
            public string Schedule { get; set; } = "Daily";
            public float[] AlertThresholds { get; set; } = new float[0];
        }

        public class InspectionSchedule
        {
            public int TotalInspectionsPerWeek;
            public InspectionSlot[] InspectionSlots;

            // Additional properties for compatibility
            public string ProtocolName => "Standard Monitoring";
            public string ScheduleType => "Weekly";
            public float[] AlertThresholds => new float[] { 0.1f, 0.5f, 0.8f };
            public string[] InspectionTimes => new string[] { "Morning", "Afternoon" };
            public string[] InspectionTypes => new string[] { "Visual", "Sticky Traps" };
        }

        public class InspectionSlot
        {
            public DayOfWeek DayOfWeek;
            public InspectionTime[] InspectionTimes;
        }

        public class InspectionTime
        {
            public TimeOfDay Time;
            public float Duration;
        }

        // Treatment structures
        public class IntegratedTreatmentPlan
        {
            public string ZoneID;
            public DateTime PlanCreationDate;
            public PestInfestation[] TargetInfestations;
            public TreatmentHierarchy TreatmentHierarchy;

            // Additional properties for compatibility
            public string[] BiologicalInterventions { get; set; } = new string[] { "Beneficial insects", "Microbial agents" };
        }

        public class TreatmentHierarchy
        {
            public TreatmentType[] PrimaryTreatments;
            public string[] Justifications;
        }

        public class PestInfestation
        {
            public PestType Pest;
            public float Severity;
            public string[] AffectedAreas;
        }

        // BeneficialOrganism is defined in BeneficialOrganisms.cs to avoid duplication

        public class TreatmentProtocol
        {
            public string TreatmentName;
            public TreatmentType TreatmentType;
            public string[] TargetPests;
            public string ApplicationMethod;
            public float EffectivenessRating;
        }


        public class CulturalPractice
        {
            public string PracticeName;
            public string[] TargetIssues;
            public PracticeFrequency Frequency;
            public float EffectivenessRating;
        }

        public enum RecommendationPriority
        {
            Low,
            Medium,
            High,
            Critical
        }

        // Supporting data structures
        public class PestMonitoringData
        {
            public PestType Pest;
            public float Population;
            public DateTime Date;
            public string Location;
        }

        public class IPMTreatmentHistory
        {
            public string Treatment;
            public DateTime Date;
            public float Effectiveness;
        }




        /// <summary>
        /// IPM effectiveness report structure
        /// </summary>
        public class IPMEffectivenessReport
        {
            public string ZoneID;
            public DateTime ReportDate;
            public float OverallEffectiveness;
            public PestType[] ControlledPests;
            public float CostEfficiency;
            public string RecommendedImprovements;

            // Additional properties for compatibility
            public DateTime EvaluationTimestamp { get; set; } = DateTime.Now;
            public float EvaluationPeriodDays { get; set; } = 30f; // Default 30 days
            public int TotalTreatments { get; set; } = 0;
            public float TreatmentEffectiveness { get; set; } = 0f;
            public string OverallEffectivenessRating { get; set; } = "Unknown";
            public float PestReduction { get; set; } = 0f;
            public float CostEffectiveness { get; set; } = 0f;
            public float EnvironmentalImpact { get; set; } = 0.1f; // Default low impact
            public string[] Recommendations { get; set; } = new string[0];
        }

        /// <summary>
        /// Date range structure
        /// </summary>
        public class DateRange
        {
            public DateTime StartDate;
            public DateTime EndDate;
            public float DurationDays;

            // Compatibility aliases
            public DateTime Start
            {
                get => StartDate;
                set => StartDate = value;
            }

            public DateTime End
            {
                get => EndDate;
                set => EndDate = value;
            }
        }

        /// <summary>
        /// Environmental optimization plan structure
        /// </summary>
        public class EnvironmentalOptimizationPlan
        {
            public string PlanID;
            public string ZoneID;
            public DateTime CreationDate;
            public EnvironmentalModification[] Modifications;
            public float ExpectedImprovement;

            // Additional properties for compatibility
            public DateTime OptimizationTimestamp { get; set; } = DateTime.Now;
            public string[] CurrentConditions { get; set; } = new string[] { "Temperature", "Humidity", "Light" };
            public string[] ActiveBeneficials { get; set; } = new string[] { "Ladybugs", "Predatory Mites" };
            public string[] TargetPests { get; set; } = new string[] { "Aphids", "Spider Mites" };
        }

        /// <summary>
        /// Environmental modification structure
        /// </summary>
        public class EnvironmentalModification
        {
            public string Parameter;
            public float CurrentValue;
            public float TargetValue;
            public string Justification;
        }


        /// <summary>
        /// Yield comparison structure
        /// </summary>
        public class YieldComparison
        {
            public string PlantID;
            public float BaselineYield;
            public float CurrentYield;
            public float ImprovementPercentage;
            public DateTime ComparisonDate;

            // Additional properties for compatibility
            public float PredictedYield { get; set; } = 0f;
            public float ActualYield { get; set; } = 0f;
            public float Difference { get; set; } = 0f;
            public float Accuracy { get; set; } = 0f;
            public string PerformanceRating { get; set; } = "Unknown";
            public string RatingColor { get; set; } = "Gray";
            public float ScoreDifference => Difference;
            public string ImprovementDirection => Difference > 0 ? "Positive" : Difference < 0 ? "Negative" : "Neutral";
            public string ImprovementColor => Difference > 0 ? "Green" : Difference < 0 ? "Red" : "Gray";
        }
    }
}
