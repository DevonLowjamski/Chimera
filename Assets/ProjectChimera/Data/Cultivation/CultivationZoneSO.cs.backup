using UnityEngine;
using System.Collections.Generic;
using ProjectChimera.Shared;
using ProjectChimera.Data.Genetics;
using ProjectChimera.Data.Shared;
using PlantGrowthStage = ProjectChimera.Data.Shared.PlantGrowthStage;


namespace ProjectChimera.Data.Cultivation
{
    /// <summary>
    /// FURTHER SIMPLIFIED: Basic cultivation zone aligned with Project Chimera's direct player control vision.
    /// Supports essential room configuration and equipment placement as described in gameplay document.
    /// Removed complex automation, safety systems, and over-engineered monitoring.
    ///
    /// Core Functionality:
    /// - Basic zone setup (dimensions, capacity, type)
    /// - Simple equipment tracking
    /// - Environmental condition ranges
    /// - Plant layout management
    /// </summary>
    [CreateAssetMenu(fileName = "New Cultivation Zone", menuName = "Project Chimera/Cultivation/Cultivation Zone")]
    public class CultivationZoneSO : ChimeraConfigSO
    {
        [Header("Zone Setup")]
        [SerializeField] private string _zoneID;
        [SerializeField] private string _zoneName;
        [SerializeField] private ZoneType _zoneType = ZoneType.FloweringRoom;
        [SerializeField, TextArea(2, 4)] private string _zoneDescription;

        [Header("Physical Layout")]
        [SerializeField] private Vector3 _zoneDimensions = new Vector3(4f, 3f, 4f); // meters (L x H x W)
        [SerializeField, Range(1f, 1000f)] private float _floorArea = 16f; // square meters
        [SerializeField] private Vector2Int _gridSize = new Vector2Int(4, 4); // plant positions

        [Header("Equipment & Utilities")]
        [SerializeField] private bool _hasLighting = true;
        [SerializeField] private bool _hasHVAC = true;
        [SerializeField] private bool _hasIrrigation = true;
        [SerializeField] private bool _hasElectricity = true;
        [SerializeField] private bool _hasWaterSupply = true;

        [Header("Plant Configuration")]
        [SerializeField, Range(1, 100)] private int _maxPlantCapacity = 16;
        [SerializeField] private PlantGrowthStage[] _supportedStages = new PlantGrowthStage[]
        {
            PlantGrowthStage.Vegetative,
            PlantGrowthStage.Flowering
        };
        [SerializeField] private GrowingMethod _growingMethod = GrowingMethod.Hydroponic;

        [Header("Environmental Ranges")]
        [SerializeField] private Vector2 _temperatureRange = new Vector2(20f, 30f); // Celsius
        [SerializeField] private Vector2 _humidityRange = new Vector2(40f, 70f); // %RH
        [SerializeField] private Vector2 _lightRange = new Vector2(200f, 800f); // PPFD

        [Header("Economic Data")]
        [SerializeField, Range(100f, 100000f)] private float _constructionCost = 10000f;
        [SerializeField, Range(10f, 1000f)] private float _dailyOperatingCost = 50f;

        // Public Properties
        public string ZoneID => _zoneID;
        public string ZoneName => _zoneName;
        public ZoneType ZoneType => _zoneType;
        public string ZoneDescription => _zoneDescription;

        // Physical Properties
        public Vector3 ZoneDimensions => _zoneDimensions;
        public float FloorArea => _floorArea;
        public float Area => _floorArea; // Alias for FloorArea for compatibility
        public Vector2Int GridSize => _gridSize;

        // Equipment Properties
        public bool HasLighting => _hasLighting;
        public bool HasHVAC => _hasHVAC;
        public bool HasIrrigation => _hasIrrigation;
        public bool HasElectricity => _hasElectricity;
        public bool HasWaterSupply => _hasWaterSupply;

        // Plant Properties
        public int MaxPlantCapacity => _maxPlantCapacity;
        public PlantGrowthStage[] SupportedStages => _supportedStages;
        public GrowingMethod GrowingMethod => _growingMethod;

        // Environmental Properties
        public Vector2 TemperatureRange => _temperatureRange;
        public Vector2 HumidityRange => _humidityRange;
        public Vector2 LightRange => _lightRange;

        // Economic Properties
        public float ConstructionCost => _constructionCost;
        public float DailyOperatingCost => _dailyOperatingCost;

        /// <summary>
        /// Calculates optimal plant capacity based on floor area and growing method.
        /// Simple calculation for direct player control.
        /// </summary>
        public int CalculateOptimalCapacity(PlantGrowthStage stage)
        {
            // Simple spacing based on growth stage
            float spacing = stage == PlantGrowthStage.Seedling ? 0.5f : 1.0f;

            // Calculate plants per square meter
            float plantsPerSquareMeter = 1f / (spacing * spacing);
            int calculatedCapacity = Mathf.FloorToInt(_floorArea * plantsPerSquareMeter);

            // Respect maximum capacity limit
            return Mathf.Min(calculatedCapacity, _maxPlantCapacity);
        }

        /// <summary>
        /// Checks if the zone can support a specific growth stage.
        /// </summary>
        public bool CanSupportGrowthStage(PlantGrowthStage stage)
        {
            return System.Array.Exists(_supportedStages, s => s == stage);
        }

        /// <summary>
        /// Checks if environmental conditions are within acceptable ranges.
        /// </summary>
        public bool AreConditionsSuitable(float temperature, float humidity, float lightIntensity)
        {
            return temperature >= _temperatureRange.x && temperature <= _temperatureRange.y &&
                   humidity >= _humidityRange.x && humidity <= _humidityRange.y &&
                   lightIntensity >= _lightRange.x && lightIntensity <= _lightRange.y;
        }

        /// <summary>
        /// Gets a simple status summary of the zone.
        /// </summary>
        public string GetZoneStatus()
        {
            int equippedCount = (_hasLighting ? 1 : 0) + (_hasHVAC ? 1 : 0) + (_hasIrrigation ? 1 : 0) +
                               (_hasElectricity ? 1 : 0) + (_hasWaterSupply ? 1 : 0);

            string equipmentStatus = equippedCount >= 4 ? "Well Equipped" :
                                   equippedCount >= 2 ? "Basic Equipment" : "Needs Equipment";

            return $"{_zoneName}: {equipmentStatus}, Capacity: {_maxPlantCapacity} plants";
        }

        public override bool ValidateData()
        {
            bool isValid = base.ValidateData();

            if (string.IsNullOrEmpty(_zoneID))
            {
                SharedLogger.LogWarning($"CultivationZoneSO '{name}' has no zone ID assigned.", this);
                isValid = false;
            }

            if (_floorArea <= 0f)
            {
                SharedLogger.LogWarning($"CultivationZoneSO '{name}' has invalid floor area.", this);
                isValid = false;
            }

            if (_maxPlantCapacity <= 0)
            {
                SharedLogger.LogWarning($"CultivationZoneSO '{name}' has invalid plant capacity.", this);
                isValid = false;
            }

            if (_supportedStages == null || _supportedStages.Length == 0)
            {
                SharedLogger.LogWarning($"CultivationZoneSO '{name}' has no supported growth stages.", this);
                isValid = false;
            }

            return isValid;
        }

    }

    // Essential enums for cultivation zones
    public enum ZoneType
    {
        SeedStarting,
        VegetativeRoom,
        FloweringRoom,
        DryingRoom,
        Storage
    }

    public enum GrowingMethod
    {
        Soil,
        Hydroponic,
        Aeroponic,
        Aquaponic
    }

    public enum PlantSpacing
    {
        Dense,
        Standard,
        Sparse
    }

    public enum ContainerType
    {
        FlexiblePots,
        RigidPots,
        FabricPots,
        Beds,
        Towers
    }
}
