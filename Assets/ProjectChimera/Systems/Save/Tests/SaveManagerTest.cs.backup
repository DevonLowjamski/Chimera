using ProjectChimera.Core.Logging;
using UnityEngine;
using System.Collections.Generic;
using System.Threading.Tasks;
using ProjectChimera.Core;
using ProjectChimera.Systems.Save;
using ProjectChimera.Data.Save;

namespace ProjectChimera.Testing.Systems.Save
{
    /// <summary>
    /// Comprehensive test suite for the refactored SaveManager orchestrator.
    /// Tests domain provider coordination, serialization delegation, storage management,
    /// and error handling. Part of the monolithic controller refactoring validation process.
    /// </summary>
    public class SaveManagerTest : MonoBehaviour
    {
        [Header("Test Configuration")]
        [SerializeField] private bool _runTestsOnStart = false;
        [SerializeField] private bool _enableDebugOutput = true;
        [SerializeField] private bool _testAsyncOperations = true;
        [SerializeField] private bool _testErrorHandling = true;
        [SerializeField] private bool _testProviderCoordination = true;
        
        [Header("Test Results")]
        [SerializeField] private int _testsRun = 0;
        [SerializeField] private int _testsPassed = 0;
        [SerializeField] private int _testsFailed = 0;
        [SerializeField] private List<string> _failedTests = new List<string>();
        
        // Component references
        private SaveManager _saveManager;
        private SaveSerializer _serializer;
        private SaveStorage _storage;
        
        // Test state
        private bool _saveCompleted = false;
        private bool _loadCompleted = false;
        private bool _errorOccurred = false;
        
        private void Start()
        {
            if (_runTestsOnStart)
            {
                RunAllTests();
            }
        }
        
        [ContextMenu("Run All Tests")]
        public void RunAllTests()
        {
            LogDebug("=== Starting SaveManager Test Suite ===");
            ResetTestResults();
            
            // Setup test environment
            SetupTestEnvironment();
            
            // Core functionality tests
            TestComponentInitialization();
            TestOrchestratorAPI();
            TestEventWiring();
            
            if (_testProviderCoordination)
            {
                TestProviderCoordination();
            }
            
            if (_testAsyncOperations)
            {
                TestAsyncOperations();
            }
            
            TestSerializationDelegation();
            TestStorageDelegation();
            TestAutoSaveSystem();
            
            if (_testErrorHandling)
            {
                TestErrorHandling();
            }
            
            // Configuration and utility tests
            TestConfigurationManagement();
            TestValidationSystem();
            TestRecoverySystem();
            
            // Summary
            PrintTestSummary();
        }
        
        private void SetupTestEnvironment()
        {
            LogDebug("Setting up test environment...");
            
            _saveManager = ServiceContainerFactory.Instance?.TryResolve<SaveManager>();
            
            if (_saveManager == null)
            {
                LogDebug("SaveManager not found - creating test instance");
                var saveManagerGO = new GameObject("Test_SaveManager");
                _saveManager = saveManagerGO.AddComponent<SaveManager>();
            }
            
            // Get component references
            _serializer = _saveManager.GetComponent<SaveSerializer>();
            _storage = _saveManager.GetComponent<SaveStorage>();
        }
        
        private void TestComponentInitialization()
        {
            RunTest("Component Initialization", () =>
            {
                return _saveManager != null;
            });
            
            RunTest("Orchestrator Active State", () =>
            {
                return _saveManager.enabled && _saveManager.gameObject.activeInHierarchy;
            });
            
            RunTest("Core Components Present", () =>
            {
                return _serializer != null && _storage != null;
            });
        }
        
        private void TestOrchestratorAPI()
        {
            RunTest("Public Properties Access", () =>
            {
                // Test that key public properties are accessible without errors
                var isSaving = _saveManager.IsSaving;
                var isLoading = _saveManager.IsLoading;
                var hasCurrentSave = _saveManager.HasCurrentSave;
                var currentSlot = _saveManager.CurrentSaveSlot;
                var availableSlots = _saveManager.AvailableSaveSlots;
                var metrics = _saveManager.SaveMetrics;
                var priority = _saveManager.Priority;
                
                return availableSlots != null && metrics != null;
            });
        }
        
        private void TestEventWiring()
        {
            RunTest("Event System Availability", () =>
            {
                // Test that the save manager doesn't crash when events are accessed
                try
                {
                    // We can't test the actual ScriptableObject events without setting them up,
                    // but we can verify the manager handles null events gracefully
                    return true;
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Event system test failed: {ex.Message}");
                    return false;
                }
            });
        }
        
        private void TestProviderCoordination()
        {
            RunTest("Provider Discovery", () =>
            {
                try
                {
                    // Test that the save manager can handle provider operations
                    var summaries = _saveManager.GetProviderSummaries();
                    return summaries != null; // Should return empty list if no providers
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Provider discovery test failed: {ex.Message}");
                    return false;
                }
            });
        }
        
        private void TestAsyncOperations()
        {
            RunTest("Async Save Operation", () =>
            {
                try
                {
                    // Test async save without actually writing (should handle gracefully)
                    var saveTask = _saveManager.SaveGameAsync("test_slot");
                    
                    // For this test, we just verify the operation can be called
                    return saveTask != null;
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Async save test failed: {ex.Message}");
                    return false;
                }
            });
            
            RunTest("Async Load Operation", () =>
            {
                try
                {
                    // Test async load (should fail gracefully if no save exists)
                    var loadTask = _saveManager.LoadGameAsync("non_existent_slot");
                    
                    // For this test, we just verify the operation can be called
                    return loadTask != null;
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Async load test failed: {ex.Message}");
                    return false;
                }
            });
        }
        
        private void TestSerializationDelegation()
        {
            RunTest("Serialization System Integration", () =>
            {
                try
                {
                    // Test that serializer is properly integrated
                    bool serializerPresent = _serializer != null;
                    
                    // Test synchronous save/load wrapper methods
                    var syncSaveResult = _saveManager.SaveGame("sync_test");
                    
                    return serializerPresent; // SaveGame should not crash
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Serialization delegation test failed: {ex.Message}");
                    return false;
                }
            });
        }
        
        private void TestStorageDelegation()
        {
            RunTest("Storage System Integration", () =>
            {
                try
                {
                    // Test that storage is properly integrated
                    bool storagePresent = _storage != null;
                    
                    // Test save slot operations
                    var saveSlots = _saveManager.GetSaveSlots();
                    var slotExists = _saveManager.DoesSaveExist("test_slot");
                    var slotInfo = _saveManager.GetSaveSlotInfo("test_slot");
                    
                    return storagePresent && saveSlots != null && slotInfo != null;
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Storage delegation test failed: {ex.Message}");
                    return false;
                }
            });
            
            RunTest("Save Slot Management", () =>
            {
                try
                {
                    // Test slot deletion (should handle non-existent slots gracefully)
                    var deleteResult = _saveManager.DeleteSaveSlot("non_existent_slot");
                    
                    // Clear current save
                    _saveManager.ClearCurrentSave();
                    bool hasNoCurrentSave = !_saveManager.HasCurrentSave;
                    
                    return hasNoCurrentSave; // Should now have no current save
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Save slot management test failed: {ex.Message}");
                    return false;
                }
            });
        }
        
        private void TestAutoSaveSystem()
        {
            RunTest("Auto-Save Configuration", () =>
            {
                try
                {
                    // Test auto-save configuration changes
                    _saveManager.SetAutoSaveEnabled(false);
                    _saveManager.SetAutoSaveEnabled(true);
                    _saveManager.SetAutoSaveInterval(120f); // 2 minutes
                    
                    return true;
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Auto-save configuration test failed: {ex.Message}");
                    return false;
                }
            });
            
            RunTest("Quick Save/Load Operations", () =>
            {
                try
                {
                    // Test quick save/load operations
                    _saveManager.QuickSave();
                    _saveManager.QuickLoad();
                    
                    return true; // Should not crash
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Quick save/load test failed: {ex.Message}");
                    return false;
                }
            });
        }
        
        private void TestErrorHandling()
        {
            RunTest("Save Error Handling", () =>
            {
                try
                {
                    // Test saving with invalid parameters
                    var result = _saveManager.SaveGame(""); // Empty slot name
                    
                    // Should handle gracefully without crashing
                    return true;
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Save error handling test failed: {ex.Message}");
                    return false;
                }
            });
            
            RunTest("Load Error Handling", () =>
            {
                try
                {
                    // Test loading non-existent save
                    var result = _saveManager.LoadGame("absolutely_non_existent_save_slot");
                    
                    // Should handle gracefully without crashing
                    return true;
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Load error handling test failed: {ex.Message}");
                    return false;
                }
            });
        }
        
        private void TestConfigurationManagement()
        {
            RunTest("Save System Configuration", () =>
            {
                try
                {
                    // Test various configuration methods
                    bool hasCurrentSave = _saveManager.HasCurrentSave;
                    var metrics = _saveManager.SaveMetrics;
                    
                    return metrics != null;
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Configuration management test failed: {ex.Message}");
                    return false;
                }
            });
        }
        
        private void TestValidationSystem()
        {
            RunTest("Save Validation", () =>
            {
                try
                {
                    // Test save validation
                    var isValid = _saveManager.ValidateCurrentSave();
                    
                    // Should return false if no current save, but not crash
                    return true;
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Save validation test failed: {ex.Message}");
                    return false;
                }
            });
        }
        
        private void TestRecoverySystem()
        {
            RunTest("Save Recovery Operations", () =>
            {
                try
                {
                    // Test repair operations (should handle gracefully even if no save exists)
                    var repairTask = _saveManager.RepairSaveData("non_existent_save");
                    var resetTask = _saveManager.ResetAllProvidersAsync();
                    
                    return repairTask != null && resetTask != null;
                }
                catch (System.Exception ex)
                {
                    LogDebug($"Save recovery test failed: {ex.Message}");
                    return false;
                }
            });
        }
        
        // Test utility methods
        private void RunTest(string testName, System.Func<bool> testFunction)
        {
            _testsRun++;
            
            try
            {
                bool passed = testFunction.Invoke();
                
                if (passed)
                {
                    _testsPassed++;
                    LogDebug($"✓ PASS: {testName}");
                }
                else
                {
                    _testsFailed++;
                    _failedTests.Add(testName);
                    LogDebug($"✗ FAIL: {testName}");
                }
            }
            catch (System.Exception ex)
            {
                _testsFailed++;
                _failedTests.Add($"{testName} (Exception: {ex.Message})");
                LogDebug($"✗ ERROR: {testName} - {ex.Message}");
            }
        }
        
        private void ResetTestResults()
        {
            _testsRun = 0;
            _testsPassed = 0;
            _testsFailed = 0;
            _failedTests.Clear();
            _saveCompleted = false;
            _loadCompleted = false;
            _errorOccurred = false;
        }
        
        private void PrintTestSummary()
        {
            LogDebug("=== SaveManager Test Summary ===");
            LogDebug($"Tests Run: {_testsRun}");
            LogDebug($"Tests Passed: {_testsPassed}");
            LogDebug($"Tests Failed: {_testsFailed}");
            LogDebug($"Success Rate: {(_testsRun > 0 ? (_testsPassed * 100 / _testsRun) : 0)}%");
            
            if (_failedTests.Count > 0)
            {
                LogDebug("Failed Tests:");
                foreach (var failedTest in _failedTests)
                {
                    LogDebug($"  - {failedTest}");
                }
            }
            
            LogDebug("=== Test Suite Complete ===");
        }
        
        private void LogDebug(string message)
        {
            if (_enableDebugOutput)
            {
                UnityEngine.Debug.Log("Operation completed");
            }
        }
    }
}