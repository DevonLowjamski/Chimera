using UnityEngine;
using ProjectChimera.Core.Logging;
using System.Collections.Generic;
using System.Linq;
using System;

namespace ProjectChimera.Systems.Construction
{
    /// <summary>
    /// Schematic Manager - Handles schematic creation, saving, and loading
    /// Provides the schematic system as described in gameplay document
    /// Allows players to save and share facility layouts and setups
    /// </summary>
    public class SchematicManager : MonoBehaviour
    {
        [Header("Schematic Settings")]
        [SerializeField] private string _schematicsSavePath = "Schematics";
        [SerializeField] private bool _enableSchematicSharing = true;
        [SerializeField] private bool _autoExcludeGeneticComponents = true;

        // Schematic storage
        private Dictionary<string, Schematic> _savedSchematics = new Dictionary<string, Schematic>();
        private Schematic _currentSchematic;

        // Selection state
        private List<GameObject> _selectedObjects = new List<GameObject>();
        private bool _isSelectionMode = false;

        private void Awake()
        {
            LoadSavedSchematics();
        }

        /// <summary>
        /// Starts creating a new schematic
        /// </summary>
        public void StartSchematicCreation(string schematicName, string description = "")
        {
            _currentSchematic = new Schematic
            {
                SchematicID = GenerateSchematicID(),
                SchematicName = schematicName,
                Description = description,
                CreationDate = DateTime.Now,
                Objects = new List<SchematicObject>()
            };

            _selectedObjects.Clear();
            _isSelectionMode = true;

            ChimeraLogger.Log("OTHER", "$1", this);
        }

        /// <summary>
        /// Cancels the current schematic creation
        /// </summary>
        public void CancelSchematicCreation()
        {
            _currentSchematic = null;
            _selectedObjects.Clear();
            _isSelectionMode = false;

            ChimeraLogger.Log("OTHER", "$1", this);
        }

        /// <summary>
        /// Adds an object to the current schematic
        /// </summary>
        public void AddObjectToSchematic(GameObject obj, Vector3 position, Quaternion rotation)
        {
            if (_currentSchematic == null || obj == null) return;

            // Auto-exclude genetic components as mentioned in gameplay document
            if (_autoExcludeGeneticComponents && IsGeneticComponent(obj))
            {
                ChimeraLogger.Log("OTHER", "$1", this);
                return;
            }

            var schematicObject = new SchematicObject
            {
                ObjectName = obj.name,
                PrefabName = GetPrefabName(obj),
                Position = position,
                Rotation = rotation.eulerAngles,
                Scale = obj.transform.localScale
            };

            _currentSchematic.Objects.Add(schematicObject);
            _selectedObjects.Add(obj);

            ChimeraLogger.Log("OTHER", "$1", this);
        }

        /// <summary>
        /// Removes an object from the current schematic
        /// </summary>
        public void RemoveObjectFromSchematic(GameObject obj)
        {
            if (_currentSchematic == null || obj == null) return;

            _currentSchematic.Objects.RemoveAll(o => o.ObjectName == obj.name);
            _selectedObjects.Remove(obj);

            ChimeraLogger.Log("OTHER", "$1", this);
        }

        /// <summary>
        /// Saves the current schematic
        /// </summary>
        public bool SaveCurrentSchematic()
        {
            if (_currentSchematic == null)
            {
                ChimeraLogger.Log("OTHER", "$1", this);
                return false;
            }

            if (_currentSchematic.Objects.Count == 0)
            {
                ChimeraLogger.Log("OTHER", "$1", this);
                return false;
            }

            _savedSchematics[_currentSchematic.SchematicID] = _currentSchematic;

            // Save to persistent storage (would integrate with save system)
            SaveSchematicToFile(_currentSchematic);

            ChimeraLogger.Log("OTHER", "$1", this);
            CancelSchematicCreation();

            return true;
        }

        /// <summary>
        /// Loads a schematic by ID
        /// </summary>
        public Schematic LoadSchematic(string schematicId)
        {
            if (_savedSchematics.TryGetValue(schematicId, out var schematic))
            {
                ChimeraLogger.Log("OTHER", "$1", this);
                return schematic;
            }

            ChimeraLogger.Log("OTHER", "$1", this);
            return null;
        }

        /// <summary>
        /// Loads a schematic by name
        /// </summary>
        public Schematic LoadSchematicByName(string schematicName)
        {
            var schematic = _savedSchematics.Values.FirstOrDefault(s => s.SchematicName == schematicName);
            if (schematic != null)
            {
                ChimeraLogger.Log("OTHER", "$1", this);
                return schematic;
            }

            ChimeraLogger.Log("OTHER", "$1", this);
            return null;
        }

        /// <summary>
        /// Deletes a schematic
        /// </summary>
        public bool DeleteSchematic(string schematicId)
        {
            if (_savedSchematics.Remove(schematicId))
            {
                // Remove from persistent storage
                DeleteSchematicFile(schematicId);

                ChimeraLogger.Log("OTHER", "$1", this);
                return true;
            }

            ChimeraLogger.Log("OTHER", "$1", this);
            return false;
        }

        /// <summary>
        /// Instantiates a schematic in the scene
        /// </summary>
        public List<GameObject> InstantiateSchematic(Schematic schematic, Vector3 position, Quaternion rotation)
        {
            if (schematic == null)
            {
                ChimeraLogger.Log("OTHER", "$1", this);
                return new List<GameObject>();
            }

            var instantiatedObjects = new List<GameObject>();

            foreach (var schematicObject in schematic.Objects)
            {
                // Load prefab (would integrate with asset management system)
                GameObject prefab = LoadPrefab(schematicObject.PrefabName);
                if (prefab == null)
                {
                    ChimeraLogger.Log("OTHER", "$1", this);
                    continue;
                }

                // Instantiate with correct position and rotation
                Vector3 worldPos = position + rotation * schematicObject.Position;
                Quaternion worldRot = rotation * Quaternion.Euler(schematicObject.Rotation);

                GameObject instance = Instantiate(prefab, worldPos, worldRot);
                instance.name = schematicObject.ObjectName;
                instance.transform.localScale = schematicObject.Scale;

                instantiatedObjects.Add(instance);
            }

            ChimeraLogger.Log("OTHER", "$1", this);
            return instantiatedObjects;
        }

        /// <summary>
        /// Gets all saved schematics
        /// </summary>
        public List<Schematic> GetSavedSchematics()
        {
            return new List<Schematic>(_savedSchematics.Values);
        }

        /// <summary>
        /// Gets schematics by category
        /// </summary>
        public List<Schematic> GetSchematicsByCategory(string category)
        {
            return _savedSchematics.Values.Where(s => s.Category == category).ToList();
        }

        /// <summary>
        /// Shares a schematic (for marketplace integration)
        /// </summary>
        public bool ShareSchematic(string schematicId, int skillPointCost)
        {
            if (!_enableSchematicSharing)
            {
                ChimeraLogger.Log("OTHER", "$1", this);
                return false;
            }

            var schematic = LoadSchematic(schematicId);
            if (schematic == null) return false;

            // Mark as shared (would integrate with marketplace system)
            schematic.IsShared = true;
            schematic.ShareDate = DateTime.Now;
            schematic.SkillPointCost = skillPointCost;

            ChimeraLogger.Log("OTHER", "$1", this);
            return true;
        }

        /// <summary>
        /// Imports a shared schematic
        /// </summary>
        public bool ImportSharedSchematic(Schematic sharedSchematic)
        {
            if (sharedSchematic == null || !_savedSchematics.ContainsKey(sharedSchematic.SchematicID))
            {
                _savedSchematics[sharedSchematic.SchematicID] = sharedSchematic;
                SaveSchematicToFile(sharedSchematic);

                ChimeraLogger.Log("OTHER", "$1", this);
                return true;
            }

            ChimeraLogger.Log("OTHER", "$1", this);
            return false;
        }

        /// <summary>
        /// Checks if an object is a genetic component (should be excluded from schematics)
        /// </summary>
        private bool IsGeneticComponent(GameObject obj)
        {
            // Check for genetic-related tags or components
            return obj.CompareTag("Plant") ||
                   obj.CompareTag("Seed") ||
                   obj.GetComponent<GeneticComponent>() != null;
        }

        /// <summary>
        /// Gets the prefab name from a game object
        /// </summary>
        private string GetPrefabName(GameObject obj)
        {
            // This would need to be implemented based on how prefabs are managed
            // For now, return the object name
            return obj.name.Replace("(Clone)", "").Trim();
        }

        /// <summary>
        /// Loads a prefab by name
        /// </summary>
        private GameObject LoadPrefab(string prefabName)
        {
            // Integrate with the enhanced asset management system
            var assetManager = AddressablesAssetManager.Instance;
            
            if (assetManager != null)
            {
                return assetManager.LoadAsset<GameObject>(prefabName);
            }
            else
            {
                // No fallback to Resources.Load - log warning and return null
                ChimeraLogger.LogWarning("CONSTRUCTION", $"Asset manager not available for prefab: {prefabName}. Configure AddressablesAssetManager.", this);
                return null;
            }
        }

        /// <summary>
        /// Generates a unique schematic ID
        /// </summary>
        private string GenerateSchematicID()
        {
            return $"schematic_{DateTime.Now.ToString("yyyyMMddHHmmss")}_{UnityEngine.Random.Range(1000, 9999)}";
        }

        /// <summary>
        /// Saves a schematic to persistent storage
        /// </summary>
        private void SaveSchematicToFile(Schematic schematic)
        {
            // Would integrate with save system
            string json = JsonUtility.ToJson(schematic);
            string filePath = GetSchematicFilePath(schematic.SchematicID);

            try
            {
                System.IO.File.WriteAllText(filePath, json);
            }
            catch (Exception ex)
            {
                ChimeraLogger.Log("OTHER", "$1", this);
            }
        }

        /// <summary>
        /// Deletes a schematic file
        /// </summary>
        private void DeleteSchematicFile(string schematicId)
        {
            string filePath = GetSchematicFilePath(schematicId);
            if (System.IO.File.Exists(filePath))
            {
                System.IO.File.Delete(filePath);
            }
        }

        /// <summary>
        /// Loads saved schematics from persistent storage
        /// </summary>
        private void LoadSavedSchematics()
        {
            // Would scan for schematic files and load them
            // For now, this is a placeholder
            ChimeraLogger.Log("OTHER", "$1", this);
        }

        /// <summary>
        /// Gets the file path for a schematic
        /// </summary>
        private string GetSchematicFilePath(string schematicId)
        {
            return System.IO.Path.Combine(Application.persistentDataPath, _schematicsSavePath, $"{schematicId}.json");
        }

        /// <summary>
        /// Checks if currently creating a schematic
        /// </summary>
        public bool IsCreatingSchematic()
        {
            return _currentSchematic != null;
        }

        /// <summary>
        /// Gets the current schematic being created
        /// </summary>
        public Schematic GetCurrentSchematic()
        {
            return _currentSchematic;
        }

        /// <summary>
        /// Gets the number of selected objects in current schematic
        /// </summary>
        public int GetSelectedObjectCount()
        {
            return _selectedObjects.Count;
        }

        /// <summary>
        /// Clears all saved schematics
        /// </summary>
        public void ClearAllSchematics()
        {
            _savedSchematics.Clear();
            ChimeraLogger.Log("OTHER", "$1", this);
        }
    }

    /// <summary>
    /// Schematic data structure
    /// </summary>
    [Serializable]
    public class Schematic
    {
        public string SchematicID;
        public string SchematicName;
        public string Description;
        public string Category;
        public DateTime CreationDate;
        public List<SchematicObject> Objects = new List<SchematicObject>();

        // Sharing properties
        public bool IsShared;
        public DateTime ShareDate;
        public int SkillPointCost;
    }

    /// <summary>
    /// Schematic object data structure
    /// </summary>
    [Serializable]
    public class SchematicObject
    {
        public string ObjectName;
        public string PrefabName;
        public Vector3 Position;
        public Vector3 Rotation;
        public Vector3 Scale;
    }
}

