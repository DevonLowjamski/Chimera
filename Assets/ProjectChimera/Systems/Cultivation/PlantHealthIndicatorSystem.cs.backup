using UnityEngine;
// using UnityEngine.UI; // Disabled due to assembly reference issues
using ProjectChimera.Core;
using ProjectChimera.Core.Updates;
using ProjectChimera.Data.Shared;
using ProjectChimera.Data.Cultivation;
using ProjectChimera.Core.Logging;

namespace ProjectChimera.Systems.Cultivation
{
    /// <summary>
    /// System for displaying plant health indicators and status
    /// </summary>
    public class PlantHealthIndicatorSystem : MonoBehaviour, ITickable
    {
        [Header("Health Indicator UI")]
        [SerializeField] private Canvas _healthCanvas;
        // Temporarily disabled due to UnityEngine.UI assembly reference issues
        // [SerializeField] private UnityEngine.UI.Slider _healthSlider;
        // [SerializeField] private UnityEngine.UI.Slider _hydrationSlider;
        // [SerializeField] private UnityEngine.UI.Slider _nutritionSlider;
        // [SerializeField] private UnityEngine.UI.Image _stressIndicator;
        [System.NonSerialized] private object _healthSlider;
        [System.NonSerialized] private object _hydrationSlider;
        [System.NonSerialized] private object _nutritionSlider;
        [System.NonSerialized] private object _stressIndicator;

        private bool _isInitialized = false;
        private InteractivePlant _targetPlant;

        public void Initialize(InteractivePlant plant)
        {
            _targetPlant = plant;
            _isInitialized = true;

            SetupUI();

            // Register with UpdateOrchestrator
            UpdateOrchestrator.Instance.RegisterTickable(this);
        }

        public void UpdateIndicators()
        {
            if (!_isInitialized || _targetPlant == null) return;

            // UI components temporarily disabled due to assembly reference issues
            // Update health indicators
            /*
            if (_healthSlider != null)
                _healthSlider.value = _targetPlant.CurrentHealth / _targetPlant.MaxHealth;

            if (_hydrationSlider != null)
                _hydrationSlider.value = _targetPlant.CurrentHydration / 100f;

            if (_nutritionSlider != null)
                _nutritionSlider.value = _targetPlant.CurrentNutrition / 100f;

            if (_stressIndicator != null)
            {
                float stress = _targetPlant.CurrentStressLevel / 100f;
                _stressIndicator.color = Color.Lerp(Color.green, Color.red, stress);
            }
            */

            UnityEngine.Debug.Log("Operation completed");
        }

        public void UpdateHealthDisplay(InteractivePlant plant, float quality)
        {
            if (plant == null) return;

            _targetPlant = plant;
            UpdateIndicators();

            // Apply quality-based visual feedback
            if (quality > 0.8f)
            {
                // High quality care - positive feedback
                ShowPositiveFeedback();
            }
            else if (quality < 0.4f)
            {
                // Low quality care - negative feedback
                ShowNegativeFeedback();
            }
        }

        private void ShowPositiveFeedback()
        {
            // Visual feedback for good care
            if (_stressIndicator != null)
            {
                StartCoroutine(FlashIndicator(_stressIndicator, Color.green, 0.5f));
            }
        }

        private void ShowNegativeFeedback()
        {
            // Visual feedback for poor care
            if (_stressIndicator != null)
            {
                StartCoroutine(FlashIndicator(_stressIndicator, Color.red, 0.5f));
            }
        }

        private System.Collections.IEnumerator FlashIndicator(UnityEngine.UI.Image indicator, Color color, float duration)
        {
            Color originalColor = indicator.color;
            indicator.color = color;
            yield return new WaitForSeconds(duration);
            indicator.color = originalColor;
        }

        public void ShowHealthStatus(bool show)
        {
            if (_healthCanvas != null)
                _healthCanvas.gameObject.SetActive(show);
        }

        private void SetupUI()
        {
            if (_healthCanvas == null)
            {
                // Create health canvas if not assigned
                GameObject canvasGO = new GameObject("PlantHealthCanvas");
                canvasGO.transform.SetParent(transform);
                _healthCanvas = canvasGO.AddComponent<Canvas>();
                _healthCanvas.renderMode = RenderMode.WorldSpace;
            }
        }

        #region ITickable Implementation

        public int Priority => TickPriority.UIManager;
        public bool Enabled => _isInitialized && _targetPlant != null;

        public void Tick(float deltaTime)
        {
            if (_isInitialized)
            {
                UpdateIndicators();
            }
        }

        #endregion

        private void OnDestroy()
        {
            if (UpdateOrchestrator.Instance != null)
            {
                UpdateOrchestrator.Instance.UnregisterTickable(this);
            }
        }
    }
}
