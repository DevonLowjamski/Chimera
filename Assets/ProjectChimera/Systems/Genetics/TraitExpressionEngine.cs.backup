using UnityEngine;
using System.Collections.Generic;
using ProjectChimera.Core.Logging;

namespace ProjectChimera.Systems.Genetics
{
    /// <summary>
    /// BASIC: Simple trait expression engine for Project Chimera's genetics system.
    /// Focuses on essential trait calculations without complex GxE interactions and compute shaders.
    /// </summary>
    public class TraitExpressionEngine : MonoBehaviour
    {
        [Header("Basic Expression Settings")]
        [SerializeField] private bool _enableBasicExpression = true;
        [SerializeField] private bool _enableLogging = true;
        [SerializeField] private float _baseThcMultiplier = 1.0f;
        [SerializeField] private float _baseYieldMultiplier = 1.0f;

        // Basic trait tracking
        private readonly Dictionary<string, TraitResult> _expressionCache = new Dictionary<string, TraitResult>();
        private bool _isInitialized = false;

        /// <summary>
        /// Events for trait expression
        /// </summary>
        public event System.Action<string, TraitResult> OnTraitEvaluated;

        /// <summary>
        /// Initialize basic trait expression engine
        /// </summary>
        public void Initialize()
        {
            if (_isInitialized) return;

            _isInitialized = true;

            if (_enableLogging)
            {
                UnityEngine.Debug.Log("Operation completed");
            }
        }

        /// <summary>
        /// Evaluate basic traits for a strain
        /// </summary>
        public TraitResult EvaluateTraits(string strainId, float baseThc, float baseYield, float environmentFactor = 1.0f)
        {
            if (!_enableBasicExpression || !_isInitialized) return new TraitResult();

            // Check cache first
            string cacheKey = $"{strainId}_{baseThc:F2}_{baseYield:F2}_{environmentFactor:F2}";
            if (_expressionCache.TryGetValue(cacheKey, out var cachedResult))
            {
                return cachedResult;
            }

            // Simple trait calculation
            float finalThc = baseThc * _baseThcMultiplier * environmentFactor;
            float finalYield = baseYield * _baseYieldMultiplier * environmentFactor;

            // Add some genetic variation (Â±10%)
            float thcVariation = Random.Range(0.9f, 1.1f);
            float yieldVariation = Random.Range(0.9f, 1.1f);

            finalThc *= thcVariation;
            finalYield *= yieldVariation;

            var result = new TraitResult
            {
                StrainId = strainId,
                FinalThc = Mathf.Clamp(finalThc, 0f, 35f), // Cap at 35%
                FinalYield = Mathf.Max(finalYield, 0f),
                EnvironmentFactor = environmentFactor,
                CalculatedTime = System.DateTime.Now
            };

            // Cache result
            _expressionCache[cacheKey] = result;
            OnTraitEvaluated?.Invoke(strainId, result);

            if (_enableLogging)
            {
                UnityEngine.Debug.Log("Operation completed");
            }

            return result;
        }

        /// <summary>
        /// Evaluate traits for a genetic data object
        /// </summary>
        public TraitResult EvaluateTraits(GeneticData geneticData, float environmentFactor = 1.0f)
        {
            if (geneticData == null) return new TraitResult();

            return EvaluateTraits(geneticData.StrainId, geneticData.ThcContent, geneticData.Yield, environmentFactor);
        }

        /// <summary>
        /// Get cached trait result
        /// </summary>
        public TraitResult GetCachedResult(string cacheKey)
        {
            return _expressionCache.TryGetValue(cacheKey, out var result) ? result : null;
        }

        /// <summary>
        /// Clear expression cache
        /// </summary>
        public void ClearCache()
        {
            _expressionCache.Clear();

            if (_enableLogging)
            {
                UnityEngine.Debug.Log("Operation completed");
            }
        }

        /// <summary>
        /// Get cache statistics
        /// </summary>
        public CacheStats GetCacheStats()
        {
            return new CacheStats
            {
                CachedResults = _expressionCache.Count,
                IsCacheEnabled = true,
                IsInitialized = _isInitialized
            };
        }

        /// <summary>
        /// Set expression enabled state
        /// </summary>
        public void SetExpressionEnabled(bool enabled)
        {
            _enableBasicExpression = enabled;

            if (!enabled)
            {
                ClearCache();
            }

            if (_enableLogging)
            {
                UnityEngine.Debug.Log("Operation completed");
            }
        }

        /// <summary>
        /// Update multipliers
        /// </summary>
        public void UpdateMultipliers(float thcMultiplier, float yieldMultiplier)
        {
            _baseThcMultiplier = Mathf.Max(0.1f, thcMultiplier);
            _baseYieldMultiplier = Mathf.Max(0.1f, yieldMultiplier);

            // Clear cache when multipliers change
            ClearCache();

            if (_enableLogging)
            {
                UnityEngine.Debug.Log("Operation completed");
            }
        }
    }

    /// <summary>
    /// Basic trait result
    /// </summary>
    [System.Serializable]
    public class TraitResult
    {
        public string StrainId;
        public float FinalThc;
        public float FinalYield;
        public float EnvironmentFactor;
        public System.DateTime CalculatedTime;
    }

    /// <summary>
    /// Cache statistics
    /// </summary>
    [System.Serializable]
    public struct CacheStats
    {
        public int CachedResults;
        public bool IsCacheEnabled;
        public bool IsInitialized;
    }
}
