using UnityEngine;
using UnityEngine.UIElements;
using System.Collections.Generic;
using ProjectChimera.Core;
using ProjectChimera.Core.DependencyInjection;
using ProjectChimera.UI.Core;
using ProjectChimera.UI.Events;
using ProjectChimera.UI.Components;
using ProjectChimera.Data.Camera;
using ProjectChimera.Systems.Gameplay;
using CoreEvents = ProjectChimera.Core.Events;
using DataEvents = ProjectChimera.Data.Events;
// using ProjectChimera.Data;
// using ProjectChimera.Data.UI;

namespace ProjectChimera.UI.Panels
{
    /// <summary>
    /// Contextual Menu Controller for Project Chimera.
    /// Provides mode/level/selection driven contextual UI that dynamically builds controls 
    /// based on current gameplay mode, camera level, and selected objects.
    /// </summary>
    public class ContextualMenuController : UIPanel
    {
        [Header("Contextual Menu Events")]
        [SerializeField] private ProjectChimera.Core.Events.SimpleGameEventSO _onPauseClicked;
        [SerializeField] private ProjectChimera.Core.Events.SimpleGameEventSO _onSettingsClicked;
        [SerializeField] private ProjectChimera.Core.Events.SimpleGameEventSO _onMenuClicked;
        [SerializeField] private UIButtonClickEventSO _onHUDButtonClicked;
        
        [Header("Event Channels - Phase 7")]
        [SerializeField] private ProjectChimera.Data.Events.ModeChangedEventSO _modeChangedEvent;
        [SerializeField] private ProjectChimera.Data.Events.CameraLevelChangedEventSO _cameraLevelChangedEvent;
        
        [Header("Selection Integration - Phase 7")]
        [SerializeField] private ProjectChimera.Systems.Camera.AdvancedCameraController _cameraController;
        
        [Header("Update Settings")]
        [SerializeField] private float _updateInterval = 1f;
        [SerializeField] private bool _enableRealTimeUpdates = true;
        [SerializeField] private bool _enableDebugLogging = false;
        
        // Main HUD containers
        private VisualElement _topBar;
        private VisualElement _bottomBar;
        private VisualElement _sidePanel;
        private VisualElement _centerHUD;
        private VisualElement _notificationArea;
        
        // Phase 7: Contextual Menu System
        private VisualElement _contextualMenuContainer;
        private VisualElement _currentContextualMenu;
        private Dictionary<ProjectChimera.Data.Events.GameplayMode, Dictionary<CameraLevel, VisualElement>> _contextualMenuCache;
        
        // Top bar elements
        private UIDataCard _cashCard;
        private UIDataCard _timeCard;
        private UIProgressBar _overallProgressBar;
        private Button _pauseButton;
        private Button _settingsButton;
        private Button _menuButton;
        
        // Bottom bar elements
        private VisualElement _quickActionBar;
        private Button _facilitiesButton;
        private Button _plantsButton;
        private Button _researchButton;
        private Button _marketButton;
        private Button _inventoryButton;
        
        // Side panel elements
        private UIStatusIndicator _facilityStatus;
        private UIStatusIndicator _plantHealthStatus;
        private UIStatusIndicator _financeStatus;
        private UISimpleChart _profitChart;
        
        // Center HUD elements
        private Label _currentTaskLabel;
        private UIProgressBar _currentTaskProgress;
        private VisualElement _alertsContainer;
        
        // State tracking
        private float _lastUpdateTime;
        private bool _isUpdatePaused;
        private Queue<UINotificationToast> _notificationQueue;
        
        // Performance optimization integration
        private UIPerformanceOptimizer _performanceOptimizer;
        private readonly Dictionary<string, VisualElement> _pooledElements = new();
        private readonly List<VisualElement> _reusableElements = new();
        private float _lastPerformanceCheck = 0f;
        private const float PERFORMANCE_CHECK_INTERVAL = 5f;
        
        // Phase 7: Context state tracking
        private ProjectChimera.Data.Events.GameplayMode _currentMode = ProjectChimera.Data.Events.GameplayMode.Cultivation;
        private CameraLevel _currentCameraLevel = CameraLevel.Facility;
        private Transform _currentSelection;
        private bool _isContextDirty;
        
        // Game managers (would be injected or found)
        // private TimeManager _timeManager;
        // private DataManager _dataManager;
        
        protected override void SetupUIElements()
        {
            base.SetupUIElements();
            
            // Initialize state
            _notificationQueue = new Queue<UINotificationToast>();
            
            // Phase 7: Initialize contextual menu system
            InitializeContextualMenuSystem();
            
            // Initialize performance optimization integration
            InitializePerformanceOptimization();
            
            // Get manager references
            // _timeManager = GameManager.Instance?.GetManager<TimeManager>();
            // _dataManager = GameManager.Instance?.GetManager<DataManager>();
            
            CreateHUDLayout();
            CreateTopBar();
            CreateBottomBar();
            CreateSidePanel();
            CreateCenterHUD();
            CreateNotificationArea();
            CreateContextualMenuContainer();
            
            StartHUDUpdates();
        }
        
        protected override void BindUIEvents()
        {
            base.BindUIEvents();
            
            // Top bar buttons
            _pauseButton?.RegisterCallback<ClickEvent>(OnPauseClicked);
            _settingsButton?.RegisterCallback<ClickEvent>(OnSettingsClicked);
            _menuButton?.RegisterCallback<ClickEvent>(OnMenuClicked);
            
            // Quick action buttons
            _facilitiesButton?.RegisterCallback<ClickEvent>(OnFacilitiesClicked);
            _plantsButton?.RegisterCallback<ClickEvent>(OnPlantsClicked);
            _researchButton?.RegisterCallback<ClickEvent>(OnResearchClicked);
            _marketButton?.RegisterCallback<ClickEvent>(OnMarketClicked);
            _inventoryButton?.RegisterCallback<ClickEvent>(OnInventoryClicked);
            
            // Phase 7: Subscribe to mode and camera level change events
            SubscribeToContextEvents();
            
            // Setup hover effects
            SetupButtonEffects();
        }
        
        /// <summary>
        /// Create the main HUD layout structure
        /// </summary>
        private void CreateHUDLayout()
        {
            _rootElement.Clear();
            
            // Main container with flex layout
            var mainContainer = new VisualElement();
            mainContainer.name = "hud-main-container";
            mainContainer.style.flexGrow = 1;
            mainContainer.style.flexDirection = FlexDirection.Column;
            
            // Top bar
            _topBar = new VisualElement();
            _topBar.name = "top-bar";
            _topBar.style.height = 60;
            _topBar.style.backgroundColor = new Color(0.1f, 0.1f, 0.1f, 0.9f);
            _topBar.style.flexDirection = FlexDirection.Row;
            _topBar.style.alignItems = Align.Center;
            _topBar.style.justifyContent = Justify.SpaceBetween;
            _topBar.style.paddingLeft = 16;
            _topBar.style.paddingRight = 16;
            
            // Center area container
            var centerContainer = new VisualElement();
            centerContainer.name = "center-container";
            centerContainer.style.flexGrow = 1;
            centerContainer.style.flexDirection = FlexDirection.Row;
            
            // Center HUD
            _centerHUD = new VisualElement();
            _centerHUD.name = "center-hud";
            _centerHUD.style.flexGrow = 1;
            _centerHUD.style.position = Position.Relative;
            
            // Side panel
            _sidePanel = new VisualElement();
            _sidePanel.name = "side-panel";
            _sidePanel.style.width = 300;
            _sidePanel.style.backgroundColor = new Color(0.1f, 0.1f, 0.1f, 0.8f);
            _sidePanel.style.paddingTop = 16;
            _sidePanel.style.paddingBottom = 16;
            _sidePanel.style.paddingLeft = 16;
            _sidePanel.style.paddingRight = 16;
            
            // Bottom bar
            _bottomBar = new VisualElement();
            _bottomBar.name = "bottom-bar";
            _bottomBar.style.height = 80;
            _bottomBar.style.backgroundColor = new Color(0.1f, 0.1f, 0.1f, 0.9f);
            _bottomBar.style.flexDirection = FlexDirection.Row;
            _bottomBar.style.alignItems = Align.Center;
            _bottomBar.style.justifyContent = Justify.Center;
            _bottomBar.style.paddingLeft = 16;
            _bottomBar.style.paddingRight = 16;
            
            centerContainer.Add(_centerHUD);
            centerContainer.Add(_sidePanel);
            
            mainContainer.Add(_topBar);
            mainContainer.Add(centerContainer);
            mainContainer.Add(_bottomBar);
            
            _rootElement.Add(mainContainer);
        }
        
        /// <summary>
        /// Create the top bar with game information and controls
        /// </summary>
        private void CreateTopBar()
        {
            // Left section - Game status
            var leftSection = new VisualElement();
            leftSection.name = "top-bar-left";
            leftSection.style.flexDirection = FlexDirection.Row;
            leftSection.style.alignItems = Align.Center;
            
            // Cash display
            _cashCard = new UIDataCard("Cash", "$0", "");
            _cashCard.style.marginRight = 16;
            // _cashCard.SetValueColor(_uiManager.DesignSystem.ColorPalette.AccentGold);
            
            // Time display
            _timeCard = new UIDataCard("Day", "1", "");
            _timeCard.style.marginRight = 16;
            
            // Overall progress
            _overallProgressBar = new UIProgressBar(100f);
            _overallProgressBar.Format = "Progress: {0:F0}%";
            _overallProgressBar.style.minWidth = 200;
            // _overallProgressBar.SetColor(_uiManager.DesignSystem.ColorPalette.PrimaryGreen);
            
            leftSection.Add(_cashCard);
            leftSection.Add(_timeCard);
            leftSection.Add(_overallProgressBar);
            
            // Right section - Controls
            var rightSection = new VisualElement();
            rightSection.name = "top-bar-right";
            rightSection.style.flexDirection = FlexDirection.Row;
            rightSection.style.alignItems = Align.Center;
            
            // Pause button
            _pauseButton = CreateOptimizedButton("⏸", null, "top-bar-button");
            _pauseButton.name = "pause-button";
            _pauseButton.style.width = 40;
            _pauseButton.style.height = 40;
            _pauseButton.style.marginRight = 8;
            // _uiManager.ApplyDesignSystemStyle(_pauseButton, UIStyleToken.SecondaryButton);
            
            // Settings button
            _settingsButton = CreateOptimizedButton("⚙", null, "top-bar-button");
            _settingsButton.name = "settings-button";
            _settingsButton.style.width = 40;
            _settingsButton.style.height = 40;
            _settingsButton.style.marginRight = 8;
            // _uiManager.ApplyDesignSystemStyle(_settingsButton, UIStyleToken.SecondaryButton);
            
            // Menu button
            _menuButton = CreateOptimizedButton("☰", null, "top-bar-button");
            _menuButton.name = "menu-button";
            _menuButton.style.width = 40;
            _menuButton.style.height = 40;
            // _uiManager.ApplyDesignSystemStyle(_menuButton, UIStyleToken.SecondaryButton);
            
            rightSection.Add(_pauseButton);
            rightSection.Add(_settingsButton);
            rightSection.Add(_menuButton);
            
            _topBar.Add(leftSection);
            _topBar.Add(rightSection);
        }
        
        /// <summary>
        /// Create the bottom bar with quick actions
        /// </summary>
        private void CreateBottomBar()
        {
            _quickActionBar = new VisualElement();
            _quickActionBar.name = "quick-action-bar";
            _quickActionBar.style.flexDirection = FlexDirection.Row;
            _quickActionBar.style.justifyContent = Justify.Center;
            _quickActionBar.style.alignItems = Align.Center;
            
            // Quick action buttons
            _facilitiesButton = CreateQuickActionButton("🏭", "Facilities", "Manage your cultivation facilities");
            _plantsButton = CreateQuickActionButton("🌱", "Plants", "Monitor and care for your plants");
            _researchButton = CreateQuickActionButton("🔬", "Research", "Unlock new technologies and techniques");
            _marketButton = CreateQuickActionButton("📈", "Market", "View market prices and trading opportunities");
            _inventoryButton = CreateQuickActionButton("📦", "Inventory", "Manage seeds, nutrients, and equipment");
            
            _quickActionBar.Add(_facilitiesButton);
            _quickActionBar.Add(_plantsButton);
            _quickActionBar.Add(_researchButton);
            _quickActionBar.Add(_marketButton);
            _quickActionBar.Add(_inventoryButton);
            
            _bottomBar.Add(_quickActionBar);
        }
        
        /// <summary>
        /// Create a quick action button with performance optimization
        /// </summary>
        private Button CreateQuickActionButton(string icon, string label, string tooltip)
        {
            var button = CreateOptimizedButton("", null, "quick-action-button");
            button.name = label.ToLower() + "-quick-button";
            
            // Create button content
            var content = new VisualElement();
            content.style.alignItems = Align.Center;
            content.pickingMode = PickingMode.Ignore;
            
            var iconLabel = new Label(icon);
            iconLabel.style.fontSize = 24;
            iconLabel.style.marginBottom = 4;
            
            var textLabel = new Label(label);
            textLabel.style.fontSize = 12;
            // textLabel.style.color = _uiManager.DesignSystem.ColorPalette.TextSecondary;
            
            content.Add(iconLabel);
            content.Add(textLabel);
            button.Add(content);
            
            // Styling
            button.style.width = 80;
            button.style.height = 60;
            button.style.marginLeft = 8;
            button.style.marginRight = 8;
            button.style.backgroundColor = Color.clear;
            button.style.borderTopWidth = 0;
            button.style.borderRightWidth = 0;
            button.style.borderBottomWidth = 0;
            button.style.borderLeftWidth = 0;
            button.style.borderTopLeftRadius = 8;
            button.style.borderTopRightRadius = 8;
            button.style.borderBottomLeftRadius = 8;
            button.style.borderBottomRightRadius = 8;
            
            // Tooltip
            if (!string.IsNullOrEmpty(tooltip))
            {
                button.SetupTooltip(tooltip, _rootElement);
            }
            
            return button;
        }
        
        /// <summary>
        /// Create the side panel with detailed information
        /// </summary>
        private void CreateSidePanel()
        {
            // Title
            var titleLabel = new Label("Status Overview");
            titleLabel.name = "side-panel-title";
            titleLabel.style.fontSize = 16;
            // titleLabel.style.color = _uiManager.DesignSystem.ColorPalette.TextPrimary;
            titleLabel.style.unityFontStyleAndWeight = FontStyle.Bold;
            titleLabel.style.marginBottom = 16;
            
            // Status indicators
            _facilityStatus = new UIStatusIndicator(UIStatus.Success, "Facilities Online");
            _facilityStatus.style.marginBottom = 8;
            
            _plantHealthStatus = new UIStatusIndicator(UIStatus.Success, "Plants Healthy");
            _plantHealthStatus.style.marginBottom = 8;
            
            _financeStatus = new UIStatusIndicator(UIStatus.Warning, "Cash Flow Positive");
            _financeStatus.style.marginBottom = 16;
            
            // Profit chart
            _profitChart = new UISimpleChart("Daily Profit");
            _profitChart.style.marginBottom = 16;
            _profitChart.SetRange(-1000f, 5000f);
            
            // Sample data for chart
            var sampleData = new List<float> { 100f, 250f, 180f, 320f, 450f, 380f, 520f };
            _profitChart.SetData(sampleData);
            
            _sidePanel.Add(titleLabel);
            _sidePanel.Add(_facilityStatus);
            _sidePanel.Add(_plantHealthStatus);
            _sidePanel.Add(_financeStatus);
            _sidePanel.Add(_profitChart);
        }
        
        /// <summary>
        /// Create the center HUD elements
        /// </summary>
        private void CreateCenterHUD()
        {
            // Current task display
            var taskContainer = new VisualElement();
            taskContainer.name = "task-container";
            taskContainer.style.position = Position.Absolute;
            taskContainer.style.top = 20;
            taskContainer.style.left = 20;
            taskContainer.style.backgroundColor = new Color(0.1f, 0.1f, 0.1f, 0.8f);
            taskContainer.style.borderTopLeftRadius = 8;
            taskContainer.style.borderTopRightRadius = 8;
            taskContainer.style.borderBottomLeftRadius = 8;
            taskContainer.style.borderBottomRightRadius = 8;
            taskContainer.style.paddingTop = 12;
            taskContainer.style.paddingBottom = 12;
            taskContainer.style.paddingLeft = 16;
            taskContainer.style.paddingRight = 16;
            taskContainer.style.minWidth = 250;
            
            _currentTaskLabel = new Label("Current Task: Plant Monitoring");
            _currentTaskLabel.name = "current-task-label";
            _currentTaskLabel.style.fontSize = 14;
            // _currentTaskLabel.style.color = _uiManager.DesignSystem.ColorPalette.TextPrimary;
            _currentTaskLabel.style.marginBottom = 8;
            
            _currentTaskProgress = new UIProgressBar(100f);
            _currentTaskProgress.Value = 65f;
            _currentTaskProgress.Format = "{0:F0}% Complete";
            // _currentTaskProgress.SetColor(_uiManager.DesignSystem.ColorPalette.Info);
            
            taskContainer.Add(_currentTaskLabel);
            taskContainer.Add(_currentTaskProgress);
            
            // Alerts container
            _alertsContainer = new VisualElement();
            _alertsContainer.name = "alerts-container";
            _alertsContainer.style.position = Position.Absolute;
            _alertsContainer.style.bottom = 20;
            _alertsContainer.style.left = 20;
            _alertsContainer.style.right = 20;
            _alertsContainer.style.flexDirection = FlexDirection.Column;
            _alertsContainer.style.alignItems = Align.FlexStart;
            
            _centerHUD.Add(taskContainer);
            _centerHUD.Add(_alertsContainer);
        }
        
        /// <summary>
        /// Create the notification area
        /// </summary>
        private void CreateNotificationArea()
        {
            _notificationArea = new VisualElement();
            _notificationArea.name = "notification-area";
            _notificationArea.style.position = Position.Absolute;
            _notificationArea.style.top = 80;
            _notificationArea.style.right = 20;
            _notificationArea.style.width = 350;
            _notificationArea.style.flexDirection = FlexDirection.Column;
            _notificationArea.style.alignItems = Align.FlexEnd;
            
            _rootElement.Add(_notificationArea);
        }
        
        /// <summary>
        /// Setup button hover and click effects
        /// </summary>
        private void SetupButtonEffects()
        {
            var buttons = new[] { _pauseButton, _settingsButton, _menuButton, 
                                _facilitiesButton, _plantsButton, _researchButton, _marketButton, _inventoryButton };
            
            foreach (var button in buttons)
            {
                if (button == null) continue;
                
                button.AddClickAnimation();
                
                // var hoverColor = _uiManager.DesignSystem.ColorPalette.InteractiveHover;
                var hoverColor = new Color(0.67f, 0.47f, 1f, 1f); // Placeholder hover color
                var normalColor = button.style.backgroundColor.value;
                button.AddHoverEffects(hoverColor, normalColor);
            }
        }
        
        /// <summary>
        /// Start HUD updates
        /// </summary>
        private void StartHUDUpdates()
        {
            if (_enableRealTimeUpdates)
            {
                InvokeRepeating(nameof(UpdateHUDData), 0f, _updateInterval);
            }
        }
        
        /// <summary>
        /// Update HUD data from game managers
        /// </summary>
        private void UpdateHUDData()
        {
            if (_isUpdatePaused) return;
            
            UpdateFinancialData();
            UpdateTimeData();
            UpdateStatusIndicators();
            UpdateProgressBars();
            
            _lastUpdateTime = Time.time;
        }
        
        /// <summary>
        /// Update financial information
        /// </summary>
        private void UpdateFinancialData()
        {
            // This would integrate with the economics manager
            // For now, use sample data
            var currentCash = 125000f;
            _cashCard.Value = FormatCurrency(currentCash);
            
            // Update color based on cash flow
            if (currentCash < 10000f)
            {
                // _cashCard.SetValueColor(_uiManager.DesignSystem.ColorPalette.Error);
            }
            // else if (currentCash < 50000f)
            // {
                // _cashCard.SetValueColor(_uiManager.DesignSystem.ColorPalette.Warning);
            // }
            // else
            // {
                // _cashCard.SetValueColor(_uiManager.DesignSystem.ColorPalette.AccentGold);
            // }
        }
        
        /// <summary>
        /// Update time information
        /// </summary>
        private void UpdateTimeData()
        {
            // if (_timeManager != null)
            // {
                // Get current game day from time manager
                var currentDay = 1; // TODO: Get from time manager
                _timeCard.Value = currentDay.ToString();
                
                // Update time card with additional info
                var timeOfDay = System.DateTime.Now; // TODO: Get from time manager
                _timeCard.Unit = $"{timeOfDay:HH:mm}";
            // }
            // else
            // {
                // Fallback to sample data
                _timeCard.Value = "15";
                _timeCard.Unit = "14:30";
            // }
        }
        
        /// <summary>
        /// Update status indicators
        /// </summary>
        private void UpdateStatusIndicators()
        {
            // This would integrate with facility, cultivation, and economics managers
            // For now, use sample logic
            
            // Facility status
            var facilityHealth = 85f; // Would come from facility manager
            if (facilityHealth > 80f)
                _facilityStatus.Status = UIStatus.Success;
            else if (facilityHealth > 50f)
                _facilityStatus.Status = UIStatus.Warning;
            else
                _facilityStatus.Status = UIStatus.Error;
            
            // Plant health status
            var avgPlantHealth = 92f; // Would come from cultivation manager
            if (avgPlantHealth > 80f)
                _plantHealthStatus.Status = UIStatus.Success;
            else if (avgPlantHealth > 60f)
                _plantHealthStatus.Status = UIStatus.Warning;
            else
                _plantHealthStatus.Status = UIStatus.Error;
            
            // Finance status
            var cashFlow = 1500f; // Would come from economics manager
            if (cashFlow > 0f)
                _financeStatus.Status = UIStatus.Success;
            else if (cashFlow > -1000f)
                _financeStatus.Status = UIStatus.Warning;
            else
                _financeStatus.Status = UIStatus.Error;
        }
        
        /// <summary>
        /// Update progress bars
        /// </summary>
        private void UpdateProgressBars()
        {
            // Overall progress (could be based on research, skills, or objectives)
            var overallProgress = 67f; // Would come from progression manager
            _overallProgressBar.Value = overallProgress;
            
            // Current task progress
            var taskProgress = 78f; // Would come from task manager
            _currentTaskProgress.Value = taskProgress;
        }
        
        /// <summary>
        /// Format currency display
        /// </summary>
        private string FormatCurrency(float amount)
        {
            if (amount >= 1000000f)
                return $"${amount / 1000000f:F1}M";
            else if (amount >= 1000f)
                return $"${amount / 1000f:F1}K";
            else
                return $"${amount:F0}";
        }
        
        /// <summary>
        /// Show notification toast
        /// </summary>
        public void ShowNotification(string message, UIStatus type = UIStatus.Info, float duration = 5f)
        {
            // Use the enhanced NotificationManager if available
            var notificationManager = NotificationManager.Instance;
            if (notificationManager != null)
            {
                var severity = ConvertUIStatusToSeverity(type);
                notificationManager.ShowNotification(message, severity);
                return;
            }
            
            // Fallback to legacy system
            var notification = new UINotificationToast(message, type, () => {
                // Notification closed callback
            });
            
            notification.Show(_notificationArea, duration);
            _notificationQueue.Enqueue(notification);
            
            // Limit number of notifications
            while (_notificationQueue.Count > 5)
            {
                var oldNotification = _notificationQueue.Dequeue();
                // Could remove old notification here
            }
        }
        
        /// <summary>
        /// Show enhanced notification with title and improved features
        /// </summary>
        public void ShowNotificationEnhanced(string title, string message, UIStatus type = UIStatus.Info, float duration = 5f)
        {
            var notificationManager = NotificationManager.Instance;
            if (notificationManager != null)
            {
                var severity = ConvertUIStatusToSeverity(type);
                notificationManager.ShowNotification(title, message, severity, duration);
            }
            else
            {
                // Fallback to simple notification
                ShowNotification($"{title}: {message}", type, duration);
            }
        }
        
        /// <summary>
        /// Show persistent notification that stays until dismissed
        /// </summary>
        public void ShowPersistentNotification(string key, string message, UIStatus type = UIStatus.Warning)
        {
            var notificationManager = NotificationManager.Instance;
            if (notificationManager != null)
            {
                var severity = ConvertUIStatusToSeverity(type);
                notificationManager.ShowPersistentNotification(key, message, severity);
            }
            else
            {
                // Fallback to regular notification with longer duration
                ShowNotification(message, type, 30f);
            }
        }
        
        /// <summary>
        /// Dismiss a persistent notification
        /// </summary>
        public void DismissPersistentNotification(string key)
        {
            var notificationManager = NotificationManager.Instance;
            if (notificationManager != null)
            {
                notificationManager.DismissNotification(key);
            }
        }
        
        /// <summary>
        /// Convert UIStatus to NotificationSeverity for enhanced notifications
        /// </summary>
        private NotificationSeverity ConvertUIStatusToSeverity(UIStatus status)
        {
            return status switch
            {
                UIStatus.Success => NotificationSeverity.Success,
                UIStatus.Warning => NotificationSeverity.Warning,
                UIStatus.Error => NotificationSeverity.Error,
                UIStatus.Processing => NotificationSeverity.Info,
                _ => NotificationSeverity.Info
            };
        }
        
        /// <summary>
        /// Pause/resume HUD updates
        /// </summary>
        public void SetUpdatesPaused(bool paused)
        {
            _isUpdatePaused = paused;
        }

        #region Performance Optimization Integration
        
        /// <summary>
        /// Initialize performance optimization integration
        /// </summary>
        private void InitializePerformanceOptimization()
        {
            // Get performance optimizer from manager system
            _performanceOptimizer = GameManager.Instance?.GetManager<UIPerformanceOptimizer>();
            
            if (_performanceOptimizer == null)
            {
                if (_enableDebugLogging)
                {
                    Debug.LogWarning("[ContextualMenuController] UIPerformanceOptimizer not found. Performance optimizations disabled.");
                }
            }
            else
            {
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Performance optimization integrated successfully");
                }
            }
        }
        
        /// <summary>
        /// Create optimized button using pooling when available
        /// </summary>
        private Button CreateOptimizedButton(string text, System.Action clickHandler, string poolKey = "default-button")
        {
            Button button = null;
            
            // Try to get from performance optimizer pool first
            if (_performanceOptimizer != null)
            {
                button = _performanceOptimizer.GetPooledElement<Button>();
                button.text = text;
                if (clickHandler != null)
                {
                    button.clicked += clickHandler;
                }
            }
            else
            {
                // Fallback to local pooling or new creation
                if (_pooledElements.TryGetValue(poolKey, out var pooledElement) && pooledElement is Button pooledButton)
                {
                    _pooledElements.Remove(poolKey);
                    button = pooledButton;
                    button.text = text;
                    if (clickHandler != null)
                    {
                        button.clicked += clickHandler;
                    }
                }
                else
                {
                    button = new Button(clickHandler) { text = text };
                }
            }
            
            // Apply USS styling for performance
            UIMenuStyleHelper.ApplyActionButtonStyle(button, UIButtonType.Default, true);
            
            return button;
        }
        
        /// <summary>
        /// Clean up unused contextual menus to free memory
        /// </summary>
        private void CleanupUnusedContextualMenus()
        {
            if (_contextualMenuCache == null) return;
            
            var elementsToRemove = new List<VisualElement>();
            
            foreach (var modeCache in _contextualMenuCache.Values)
            {
                foreach (var kvp in modeCache)
                {
                    // Keep only the current level menu, clean up others
                    if (kvp.Key != _currentCameraLevel)
                    {
                        elementsToRemove.Add(kvp.Value);
                    }
                }
            }
            
            // Return elements to pool
            foreach (var element in elementsToRemove)
            {
                if (_performanceOptimizer != null)
                {
                    _performanceOptimizer.ReturnToPool(element);
                }
            }
            
            // Rebuild cache keeping only current context
            var currentModeCache = _contextualMenuCache.GetValueOrDefault(_currentMode);
            var currentMenu = currentModeCache?.GetValueOrDefault(_currentCameraLevel);
            
            _contextualMenuCache.Clear();
            
            if (currentMenu != null)
            {
                _contextualMenuCache[_currentMode] = new Dictionary<CameraLevel, VisualElement>
                {
                    [_currentCameraLevel] = currentMenu
                };
            }
        }
        
        #endregion
        
        #region Phase 7: Contextual Menu System

        /// <summary>
        /// Initialize the contextual menu system
        /// </summary>
        private void InitializeContextualMenuSystem()
        {
            _contextualMenuCache = new Dictionary<ProjectChimera.Data.Events.GameplayMode, Dictionary<CameraLevel, VisualElement>>();
            _isContextDirty = true;
            
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Contextual menu system initialized");
            }
        }

        /// <summary>
        /// Subscribe to context change events
        /// </summary>
        private void SubscribeToContextEvents()
        {
            if (_modeChangedEvent != null)
            {
                _modeChangedEvent.Subscribe(OnModeChanged);
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Subscribed to mode changed events");
                }
            }
            
            if (_cameraLevelChangedEvent != null)
            {
                _cameraLevelChangedEvent.Subscribe(OnCameraLevelChanged);
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Subscribed to camera level changed events");
                }
            }
            
            // Subscribe to selection changes from camera controller
            if (_cameraController != null)
            {
                _cameraController.OnFocusTargetChanged += OnSelectionChanged;
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Subscribed to focus target changed events");
                }
            }
            else
            {
                // Try to find camera controller if not assigned
                _cameraController = FindObjectOfType<ProjectChimera.Systems.Camera.AdvancedCameraController>();
                if (_cameraController != null)
                {
                    _cameraController.OnFocusTargetChanged += OnSelectionChanged;
                    if (_enableDebugLogging)
                    {
                        Debug.Log("[ContextualMenuController] Found and subscribed to camera controller focus events");
                    }
                }
                else if (_enableDebugLogging)
                {
                    Debug.LogWarning("[ContextualMenuController] AdvancedCameraController not found - selection changes will not update contextual menu");
                }
            }
        }

        /// <summary>
        /// Create the contextual menu container
        /// </summary>
        private void CreateContextualMenuContainer()
        {
            _contextualMenuContainer = new VisualElement();
            _contextualMenuContainer.name = "contextual-menu-container";
            _contextualMenuContainer.style.position = Position.Absolute;
            _contextualMenuContainer.style.left = 20;
            _contextualMenuContainer.style.top = 80;
            _contextualMenuContainer.style.width = 300;
            _contextualMenuContainer.style.backgroundColor = new Color(0.1f, 0.1f, 0.1f, 0.9f);
            _contextualMenuContainer.style.borderTopLeftRadius = 8;
            _contextualMenuContainer.style.borderTopRightRadius = 8;
            _contextualMenuContainer.style.borderBottomLeftRadius = 8;
            _contextualMenuContainer.style.borderBottomRightRadius = 8;
            _contextualMenuContainer.style.paddingTop = 16;
            _contextualMenuContainer.style.paddingBottom = 16;
            _contextualMenuContainer.style.paddingLeft = 16;
            _contextualMenuContainer.style.paddingRight = 16;
            
            _rootElement.Add(_contextualMenuContainer);
            
            // Build initial contextual menu
            BuildContextualMenu();
        }

        /// <summary>
        /// Build the contextual menu based on current mode and camera level
        /// </summary>
        private void BuildContextualMenu()
        {
            if (!_isContextDirty) return;

            // Clear existing menu
            _contextualMenuContainer?.Clear();

            // Get or create the menu for current context
            var contextualMenu = GetOrCreateContextualMenu(_currentMode, _currentCameraLevel);
            
            if (contextualMenu != null)
            {
                _currentContextualMenu = contextualMenu;
                _contextualMenuContainer?.Add(_currentContextualMenu);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Built contextual menu for Mode: {_currentMode}, Level: {_currentCameraLevel}");
                }
            }

            _isContextDirty = false;
        }

        /// <summary>
        /// Get or create a contextual menu for the specified mode and camera level
        /// </summary>
        private VisualElement GetOrCreateContextualMenu(ProjectChimera.Data.Events.GameplayMode mode, CameraLevel cameraLevel)
        {
            // Check cache first
            if (_contextualMenuCache.TryGetValue(mode, out var levelCache) && 
                levelCache.TryGetValue(cameraLevel, out var cachedMenu))
            {
                return cachedMenu;
            }

            // Create new menu
            var menu = CreateContextualMenuForContext(mode, cameraLevel);
            
            // Cache it
            if (!_contextualMenuCache.ContainsKey(mode))
            {
                _contextualMenuCache[mode] = new Dictionary<CameraLevel, VisualElement>();
            }
            _contextualMenuCache[mode][cameraLevel] = menu;

            return menu;
        }

        /// <summary>
        /// Refresh the contextual menu when context changes
        /// </summary>
        private void RefreshContextualMenu()
        {
            if (_contextualMenuContainer == null)
            {
                if (_enableDebugLogging)
                {
                    Debug.LogWarning("[ContextualMenuController] Cannot refresh contextual menu - container is null");
                }
                return;
            }

            // Clear existing menu
            _contextualMenuContainer.Clear();
            _currentContextualMenu = null;

            // Get or create the menu for current context
            var contextualMenu = GetOrCreateContextualMenu(_currentMode, _currentCameraLevel);
            
            if (contextualMenu != null)
            {
                _currentContextualMenu = contextualMenu;
                _contextualMenuContainer.Add(_currentContextualMenu);
                
                // Apply mode-specific styling
                UIMenuStyleHelper.ApplyMenuContainerStyle(_contextualMenuContainer, _currentMode);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Refreshed contextual menu for Mode: {_currentMode}, Level: {_currentCameraLevel}");
                }
            }
            else
            {
                if (_enableDebugLogging)
                {
                    Debug.LogWarning($"[ContextualMenuController] Failed to create contextual menu for Mode: {_currentMode}, Level: {_currentCameraLevel}");
                }
            }
            
            // Reset dirty flag
            _isContextDirty = false;
        }

        /// <summary>
        /// Create contextual menu for specific mode and camera level context
        /// </summary>
        private VisualElement CreateContextualMenuForContext(ProjectChimera.Data.Events.GameplayMode mode, CameraLevel cameraLevel)
        {
            var container = new VisualElement();
            container.name = $"contextual-menu-{mode}-{cameraLevel}";
            container.style.flexDirection = FlexDirection.Column;

            // Add title
            var title = new Label($"{mode} - {cameraLevel} Level");
            title.style.fontSize = 16;
            title.style.unityFontStyleAndWeight = FontStyle.Bold;
            title.style.marginBottom = 12;
            title.style.color = Color.white;
            container.Add(title);

            // Add context-specific content based on mode and level
            switch (mode)
            {
                case ProjectChimera.Data.Events.GameplayMode.Construction:
                    AddConstructionModeContent(container, cameraLevel);
                    break;
                case ProjectChimera.Data.Events.GameplayMode.Cultivation:
                    AddCultivationModeContent(container, cameraLevel);
                    break;
                case ProjectChimera.Data.Events.GameplayMode.Genetics:
                    AddGeneticsModeContent(container, cameraLevel);
                    break;
            }

            // Add analytics dashboard access to all modes
            AddAnalyticsDashboardSection(container, mode, cameraLevel);

            return container;
        }

        /// <summary>
        /// Add construction mode specific content with tabbed interface
        /// </summary>
        private void AddConstructionModeContent(VisualElement container, CameraLevel level)
        {
            // Create tab container
            var tabContainer = CreateTabContainer();
            
            // Create tabs
            var roomsTab = CreateTab("Rooms", true);
            var equipmentTab = CreateTab("Equipment", false);
            var utilitiesTab = CreateTab("Utilities", false);
            var schematicsTab = CreateTab("Schematics", false);
            
            // Add tabs to container
            var tabHeader = new VisualElement();
            tabHeader.name = "tab-header";
            tabHeader.style.flexDirection = FlexDirection.Row;
            tabHeader.style.marginBottom = 8;
            
            tabHeader.Add(roomsTab);
            tabHeader.Add(equipmentTab);
            tabHeader.Add(utilitiesTab);
            tabHeader.Add(schematicsTab);
            
            // Create content area
            var tabContent = new VisualElement();
            tabContent.name = "tab-content";
            tabContent.style.flexGrow = 1;
            
            // Add initial content (Rooms tab)
            CreateRoomsTabContent(tabContent, level);
            
            tabContainer.Add(tabHeader);
            tabContainer.Add(tabContent);
            container.Add(tabContainer);
            
            // Wire up tab switching (for future tasks)
            SetupTabSwitching(roomsTab, equipmentTab, utilitiesTab, schematicsTab, tabContent, level);
        }
        
        /// <summary>
        /// Create the rooms tab content with construction actions
        /// </summary>
        private void CreateRoomsTabContent(VisualElement container, CameraLevel level)
        {
            container.Clear();
            
            // Add section title
            var sectionTitle = new Label("Room Construction");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.color = Color.white;
            container.Add(sectionTitle);
            
            // Room type buttons based on camera level
            var roomTypes = GetAvailableRoomTypes(level);
            
            foreach (var roomType in roomTypes)
            {
                var roomButton = CreateRoomConstructionButton(roomType);
                container.Add(roomButton);
            }
            
            // Add placement controls if in appropriate level
            if (level == CameraLevel.Room || level == CameraLevel.Facility)
            {
                var separator = new VisualElement();
                separator.style.height = 1;
                separator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                separator.style.marginTop = 8;
                separator.style.marginBottom = 8;
                container.Add(separator);
                
                var placementTitle = new Label("Placement Controls");
                placementTitle.style.fontSize = 12;
                placementTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
                placementTitle.style.marginBottom = 4;
                placementTitle.style.color = new Color(0.8f, 0.8f, 0.8f, 1f);
                container.Add(placementTitle);
                
                var cancelButton = CreateActionButton("Cancel Placement", OnCancelPlacement);
                container.Add(cancelButton);
            }
        }
        
        /// <summary>
        /// Create the equipment tab content with construction actions
        /// </summary>
        private void CreateEquipmentTabContent(VisualElement container, CameraLevel level)
        {
            container.Clear();
            
            // Add section title
            var sectionTitle = new Label("Equipment Placement");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.color = Color.white;
            container.Add(sectionTitle);
            
            // Equipment categories based on camera level
            var equipmentCategories = GetAvailableEquipmentCategories(level);
            
            foreach (var category in equipmentCategories)
            {
                // Create category section
                var categoryContainer = CreateEquipmentCategorySection(category, level);
                container.Add(categoryContainer);
            }
            
            // Add placement controls if in appropriate level
            if (level == CameraLevel.Room || level == CameraLevel.Bench)
            {
                var separator = new VisualElement();
                separator.style.height = 1;
                separator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                separator.style.marginTop = 8;
                separator.style.marginBottom = 8;
                container.Add(separator);
                
                var placementTitle = new Label("Equipment Controls");
                placementTitle.style.fontSize = 12;
                placementTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
                placementTitle.style.marginBottom = 4;
                placementTitle.style.color = new Color(0.8f, 0.8f, 0.8f, 1f);
                container.Add(placementTitle);
                
                var cancelButton = CreateActionButton("Cancel Equipment Placement", OnCancelEquipmentPlacement);
                container.Add(cancelButton);
            }
        }
        
        /// <summary>
        /// Create the utilities tab content with construction actions
        /// </summary>
        private void CreateUtilitiesTabContent(VisualElement container, CameraLevel level)
        {
            container.Clear();
            
            // Add section title
            var sectionTitle = new Label("Utilities Installation");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.color = Color.white;
            container.Add(sectionTitle);
            
            // Utility categories based on camera level
            var utilityCategories = GetAvailableUtilityCategories(level);
            
            foreach (var category in utilityCategories)
            {
                // Create category section
                var categoryContainer = CreateUtilityCategorySection(category, level);
                container.Add(categoryContainer);
            }
            
            // Add installation controls if in appropriate level
            if (level == CameraLevel.Facility || level == CameraLevel.Room)
            {
                var separator = new VisualElement();
                separator.style.height = 1;
                separator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                separator.style.marginTop = 8;
                separator.style.marginBottom = 8;
                container.Add(separator);
                
                var installationTitle = new Label("Installation Controls");
                installationTitle.style.fontSize = 12;
                installationTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
                installationTitle.style.marginBottom = 4;
                installationTitle.style.color = new Color(0.8f, 0.8f, 0.8f, 1f);
                container.Add(installationTitle);
                
                var cancelButton = CreateActionButton("Cancel Utility Installation", OnCancelUtilityInstallation);
                container.Add(cancelButton);
            }
        }
        
        /// <summary>
        /// Get available utility categories based on camera level
        /// </summary>
        private string[] GetAvailableUtilityCategories(CameraLevel level)
        {
            return level switch
            {
                CameraLevel.Facility => new[] { "Electrical", "Water", "Waste Management", "Infrastructure" },
                CameraLevel.Room => new[] { "Electrical", "Water", "Ventilation", "Waste Management" },
                CameraLevel.Bench => new[] { "Power Outlets", "Water Lines", "Drainage" },
                CameraLevel.Plant => new[] { "Individual Plant Support" },
                _ => new[] { "Electrical", "Water", "Ventilation" }
            };
        }
        
        /// <summary>
        /// Create a utility category section with items
        /// </summary>
        private VisualElement CreateUtilityCategorySection(string category, CameraLevel level)
        {
            var categoryContainer = new VisualElement();
            categoryContainer.name = $"utility-category-{category.ToLower().Replace(" ", "-")}";
            categoryContainer.style.marginBottom = 8;
            
            // Category header
            var categoryHeader = new Label(category);
            categoryHeader.style.fontSize = 12;
            categoryHeader.style.unityFontStyleAndWeight = FontStyle.Bold;
            categoryHeader.style.marginBottom = 4;
            categoryHeader.style.color = new Color(0.9f, 0.6f, 0.3f, 1f); // Orange theme for utilities
            categoryContainer.Add(categoryHeader);
            
            // Utility items for this category
            var utilityItems = GetUtilityItemsForCategory(category, level);
            
            foreach (var item in utilityItems)
            {
                var utilityButton = CreateUtilityInstallationButton(category, item);
                categoryContainer.Add(utilityButton);
            }
            
            return categoryContainer;
        }
        
        /// <summary>
        /// Get utility items for a specific category and level
        /// </summary>
        private string[] GetUtilityItemsForCategory(string category, CameraLevel level)
        {
            return category switch
            {
                "Electrical" => level switch
                {
                    CameraLevel.Facility => new[] { "Main Electrical Panel", "Distribution Panels", "Backup Generators" },
                    CameraLevel.Room => new[] { "Sub-Panel", "Circuit Breakers", "Emergency Lighting" },
                    CameraLevel.Bench => new[] { "GFCI Outlets", "Timer Switches" },
                    _ => new[] { "Power Strips" }
                },
                "Water" => level switch
                {
                    CameraLevel.Facility => new[] { "Water Main", "Pressure Tanks", "Filtration Systems" },
                    CameraLevel.Room => new[] { "Water Lines", "Shut-off Valves", "Water Heaters" },
                    CameraLevel.Bench => new[] { "Drip Lines", "Spray Nozzles" },
                    _ => new[] { "Watering Supplies" }
                },
                "Waste Management" => level switch
                {
                    CameraLevel.Facility => new[] { "Waste Collection System", "Composting Units" },
                    CameraLevel.Room => new[] { "Drainage Systems", "Waste Containers" },
                    CameraLevel.Bench => new[] { "Drip Trays", "Collection Pans" },
                    _ => new[] { "Individual Containers" }
                },
                "Ventilation" => new[] { "Intake Vents", "Exhaust Vents", "Ductwork", "Dampers" },
                "Infrastructure" => new[] { "Foundation Systems", "Support Structures", "Access Walkways" },
                "Power Outlets" => new[] { "Standard Outlets", "GFCI Outlets", "Timer Outlets" },
                "Water Lines" => new[] { "Supply Lines", "Return Lines", "Drainage Lines" },
                "Drainage" => new[] { "Floor Drains", "Collection Systems", "Pump Systems" },
                "Individual Plant Support" => new[] { "Stake Systems", "Support Cages", "Tie Systems" },
                _ => new[] { "Generic Utility" }
            };
        }
        
        /// <summary>
        /// Create a utility installation button
        /// </summary>
        private Button CreateUtilityInstallationButton(string category, string utilityType)
        {
            var button = new Button();
            button.text = $"Install {utilityType}";
            button.name = $"install-{utilityType.ToLower().Replace(" ", "-")}-button";
            
            // Styling - orange theme for utilities
            button.style.height = 28;
            button.style.marginBottom = 2;
            button.style.marginLeft = 8; // Indent under category
            button.style.backgroundColor = new Color(0.45f, 0.3f, 0.15f, 1f); // Orange-brown
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.6f, 0.45f, 0.3f, 1f);
            button.style.borderRightColor = new Color(0.6f, 0.45f, 0.3f, 1f);
            button.style.borderBottomColor = new Color(0.6f, 0.45f, 0.3f, 1f);
            button.style.borderLeftColor = new Color(0.6f, 0.45f, 0.3f, 1f);
            button.style.borderTopLeftRadius = 3;
            button.style.borderTopRightRadius = 3;
            button.style.borderBottomLeftRadius = 3;
            button.style.borderBottomRightRadius = 3;
            button.style.color = Color.white;
            button.style.fontSize = 11;
            
            // Wire up click handler
            button.RegisterCallback<ClickEvent>(evt => OnUtilityInstallationClicked(category, utilityType));
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.55f, 0.4f, 0.25f, 1f), 
                new Color(0.45f, 0.3f, 0.15f, 1f)
            );
            
            return button;
        }
        
        /// <summary>
        /// Create the schematics tab content with construction actions
        /// </summary>
        private void CreateSchematicsTabContent(VisualElement container, CameraLevel level)
        {
            container.Clear();
            
            // Add section title
            var sectionTitle = new Label("Design Schematics");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.color = Color.white;
            container.Add(sectionTitle);
            
            // Schematic categories based on camera level
            var schematicCategories = GetAvailableSchematicCategories(level);
            
            foreach (var category in schematicCategories)
            {
                // Create category section
                var categoryContainer = CreateSchematicCategorySection(category, level);
                container.Add(categoryContainer);
            }
            
            // Add design controls if in appropriate level
            if (level == CameraLevel.Facility || level == CameraLevel.Room)
            {
                var separator = new VisualElement();
                separator.style.height = 1;
                separator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                separator.style.marginTop = 8;
                separator.style.marginBottom = 8;
                container.Add(separator);
                
                var designTitle = new Label("Design Tools");
                designTitle.style.fontSize = 12;
                designTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
                designTitle.style.marginBottom = 4;
                designTitle.style.color = new Color(0.8f, 0.8f, 0.8f, 1f);
                container.Add(designTitle);
                
                var saveSchematicButton = CreateActionButton("Save Current Design", OnSaveSchematic);
                var loadSchematicButton = CreateActionButton("Load Schematic", OnLoadSchematic);
                var clearDesignButton = CreateActionButton("Clear Design", OnClearDesign);
                
                container.Add(saveSchematicButton);
                container.Add(loadSchematicButton);
                container.Add(clearDesignButton);
            }
        }
        
        /// <summary>
        /// Get available schematic categories based on camera level
        /// </summary>
        private string[] GetAvailableSchematicCategories(CameraLevel level)
        {
            return level switch
            {
                CameraLevel.Facility => new[] { "Facility Layouts", "Multi-Room Designs", "Infrastructure Plans", "Complete Blueprints" },
                CameraLevel.Room => new[] { "Room Layouts", "Equipment Arrangements", "Workflow Designs", "Custom Configurations" },
                CameraLevel.Bench => new[] { "Bench Layouts", "Growing Arrangements", "Equipment Positioning" },
                CameraLevel.Plant => new[] { "Plant Spacing", "Individual Setups", "Micro Environments" },
                _ => new[] { "Basic Layouts", "Standard Designs" }
            };
        }
        
        /// <summary>
        /// Create a schematic category section with items
        /// </summary>
        private VisualElement CreateSchematicCategorySection(string category, CameraLevel level)
        {
            var categoryContainer = new VisualElement();
            categoryContainer.name = $"schematic-category-{category.ToLower().Replace(" ", "-")}";
            categoryContainer.style.marginBottom = 8;
            
            // Category header
            var categoryHeader = new Label(category);
            categoryHeader.style.fontSize = 12;
            categoryHeader.style.unityFontStyleAndWeight = FontStyle.Bold;
            categoryHeader.style.marginBottom = 4;
            categoryHeader.style.color = new Color(0.6f, 0.3f, 0.9f, 1f); // Purple theme for schematics
            categoryContainer.Add(categoryHeader);
            
            // Schematic items for this category
            var schematicItems = GetSchematicItemsForCategory(category, level);
            
            foreach (var item in schematicItems)
            {
                var schematicButton = CreateSchematicLoadButton(category, item);
                categoryContainer.Add(schematicButton);
            }
            
            return categoryContainer;
        }
        
        /// <summary>
        /// Get schematic items for a specific category and level
        /// </summary>
        private string[] GetSchematicItemsForCategory(string category, CameraLevel level)
        {
            return category switch
            {
                "Facility Layouts" => new[] { "Standard Greenhouse", "Multi-Zone Facility", "Research Facility", "Commercial Operation" },
                "Multi-Room Designs" => new[] { "Perpetual Harvest", "Mother-Clone-Flower", "Full Cycle Design", "Nursery + Production" },
                "Infrastructure Plans" => new[] { "Power Distribution", "Water & Drainage", "HVAC Systems", "Integrated Utilities" },
                "Complete Blueprints" => new[] { "Small Scale (1000 sq ft)", "Medium Scale (5000 sq ft)", "Large Scale (10000 sq ft)", "Enterprise Scale" },
                "Room Layouts" => level switch
                {
                    CameraLevel.Room => new[] { "Vegetative Room", "Flowering Room", "Mother Room", "Drying Room", "Laboratory" },
                    _ => new[] { "Basic Room", "Advanced Room" }
                },
                "Equipment Arrangements" => new[] { "Lighting Grid", "HVAC Layout", "Irrigation Setup", "Monitoring Network" },
                "Workflow Designs" => new[] { "Efficiency Optimized", "Quality Focused", "Space Maximized", "Labor Minimized" },
                "Custom Configurations" => new[] { "Hydroponic Setup", "Soil-Based Layout", "Aeroponic Design", "Mixed Media" },
                "Bench Layouts" => new[] { "Standard Benches", "Rolling Benches", "Flood Tables", "NFT Systems" },
                "Growing Arrangements" => new[] { "Dense Canopy", "SOG (Sea of Green)", "SCROG (Screen of Green)", "LST Layout" },
                "Equipment Positioning" => new[] { "Optimal Lighting", "Air Flow Pattern", "Irrigation Coverage", "Monitoring Points" },
                "Plant Spacing" => new[] { "High Density", "Standard Spacing", "Premium Quality", "Training Optimized" },
                "Individual Setups" => new[] { "Single Plant Station", "Mother Plant Setup", "Clone Propagation", "Specimen Display" },
                "Micro Environments" => new[] { "Controlled Conditions", "Stress Testing", "Phenotype Hunting", "Research Setup" },
                "Basic Layouts" => new[] { "Simple Setup", "Beginner Layout" },
                "Standard Designs" => new[] { "Proven Designs", "Industry Standard" },
                _ => new[] { "Generic Schematic" }
            };
        }
        
        /// <summary>
        /// Create a schematic load button
        /// </summary>
        private Button CreateSchematicLoadButton(string category, string schematicType)
        {
            var button = new Button();
            button.text = $"Load {schematicType}";
            button.name = $"load-{schematicType.ToLower().Replace(" ", "-").Replace("(", "").Replace(")", "")}-button";
            
            // Styling - purple theme for schematics
            button.style.height = 28;
            button.style.marginBottom = 2;
            button.style.marginLeft = 8; // Indent under category
            button.style.backgroundColor = new Color(0.3f, 0.15f, 0.45f, 1f); // Purple
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.5f, 0.3f, 0.6f, 1f);
            button.style.borderRightColor = new Color(0.5f, 0.3f, 0.6f, 1f);
            button.style.borderBottomColor = new Color(0.5f, 0.3f, 0.6f, 1f);
            button.style.borderLeftColor = new Color(0.5f, 0.3f, 0.6f, 1f);
            button.style.borderTopLeftRadius = 3;
            button.style.borderTopRightRadius = 3;
            button.style.borderBottomLeftRadius = 3;
            button.style.borderBottomRightRadius = 3;
            button.style.color = Color.white;
            button.style.fontSize = 11;
            
            // Wire up click handler
            button.RegisterCallback<ClickEvent>(evt => OnSchematicLoadClicked(category, schematicType));
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.4f, 0.25f, 0.55f, 1f), 
                new Color(0.3f, 0.15f, 0.45f, 1f)
            );
            
            return button;
        }
        
        /// <summary>
        /// Get available equipment categories based on camera level
        /// </summary>
        private string[] GetAvailableEquipmentCategories(CameraLevel level)
        {
            return level switch
            {
                CameraLevel.Facility => new[] { "Lighting", "HVAC", "Security", "Power" },
                CameraLevel.Room => new[] { "Lighting", "HVAC", "Irrigation", "Monitoring" },
                CameraLevel.Bench => new[] { "Lighting", "Irrigation", "Monitoring", "Support" },
                CameraLevel.Plant => new[] { "Monitoring", "Support Tools" },
                _ => new[] { "Lighting", "HVAC", "Irrigation" }
            };
        }
        
        /// <summary>
        /// Create an equipment category section with items
        /// </summary>
        private VisualElement CreateEquipmentCategorySection(string category, CameraLevel level)
        {
            var categoryContainer = new VisualElement();
            categoryContainer.name = $"equipment-category-{category.ToLower()}";
            categoryContainer.style.marginBottom = 8;
            
            // Category header
            var categoryHeader = new Label(category);
            categoryHeader.style.fontSize = 12;
            categoryHeader.style.unityFontStyleAndWeight = FontStyle.Bold;
            categoryHeader.style.marginBottom = 4;
            categoryHeader.style.color = new Color(0.9f, 0.9f, 0.9f, 1f);
            categoryContainer.Add(categoryHeader);
            
            // Equipment items for this category
            var equipmentItems = GetEquipmentItemsForCategory(category, level);
            
            foreach (var item in equipmentItems)
            {
                var equipmentButton = CreateEquipmentPlacementButton(category, item);
                categoryContainer.Add(equipmentButton);
            }
            
            return categoryContainer;
        }
        
        /// <summary>
        /// Get equipment items for a specific category and level
        /// </summary>
        private string[] GetEquipmentItemsForCategory(string category, CameraLevel level)
        {
            return category switch
            {
                "Lighting" => level switch
                {
                    CameraLevel.Facility => new[] { "LED Fixtures", "HPS Systems" },
                    CameraLevel.Room => new[] { "LED Panels", "HPS Lights", "T5 Fluorescent" },
                    CameraLevel.Bench => new[] { "LED Strips", "Spot Lights" },
                    _ => new[] { "LED Strips" }
                },
                "HVAC" => level switch
                {
                    CameraLevel.Facility => new[] { "Main HVAC", "Backup Systems" },
                    CameraLevel.Room => new[] { "Exhaust Fans", "Intake Fans", "AC Units" },
                    _ => new[] { "Circulation Fans" }
                },
                "Irrigation" => new[] { "Drip Systems", "Spray Systems", "Nutrient Pumps" },
                "Monitoring" => new[] { "Temperature Sensors", "Humidity Sensors", "pH Meters", "Cameras" },
                "Security" => new[] { "Security Cameras", "Access Controls", "Alarms" },
                "Power" => new[] { "Electrical Panels", "UPS Systems", "Generators" },
                "Support" => new[] { "Benches", "Trellises", "Tool Storage" },
                "Support Tools" => new[] { "Plant Stakes", "Ties", "Hand Tools" },
                _ => new[] { "Generic Equipment" }
            };
        }
        
        /// <summary>
        /// Create an equipment placement button
        /// </summary>
        private Button CreateEquipmentPlacementButton(string category, string equipmentType)
        {
            var button = new Button();
            button.text = $"Place {equipmentType}";
            button.name = $"place-{equipmentType.ToLower().Replace(" ", "-")}-button";
            
            // Styling
            button.style.height = 28;
            button.style.marginBottom = 2;
            button.style.marginLeft = 8; // Indent under category
            button.style.backgroundColor = new Color(0.25f, 0.35f, 0.45f, 1f);
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.4f, 0.5f, 0.6f, 1f);
            button.style.borderRightColor = new Color(0.4f, 0.5f, 0.6f, 1f);
            button.style.borderBottomColor = new Color(0.4f, 0.5f, 0.6f, 1f);
            button.style.borderLeftColor = new Color(0.4f, 0.5f, 0.6f, 1f);
            button.style.borderTopLeftRadius = 3;
            button.style.borderTopRightRadius = 3;
            button.style.borderBottomLeftRadius = 3;
            button.style.borderBottomRightRadius = 3;
            button.style.color = Color.white;
            button.style.fontSize = 11;
            
            // Wire up click handler
            button.RegisterCallback<ClickEvent>(evt => OnEquipmentPlacementClicked(category, equipmentType));
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.35f, 0.45f, 0.55f, 1f), 
                new Color(0.25f, 0.35f, 0.45f, 1f)
            );
            
            return button;
        }
        
        /// <summary>
        /// Get available room types based on camera level
        /// </summary>
        private string[] GetAvailableRoomTypes(CameraLevel level)
        {
            return level switch
            {
                CameraLevel.Facility => new[] { "Vegetative", "Flowering", "Nursery", "Mother", "Laboratory" },
                CameraLevel.Room => new[] { "Vegetative", "Flowering", "Nursery", "Mother" },
                CameraLevel.Bench => new[] { "Equipment Area", "Growing Space" },
                CameraLevel.Plant => new[] { "Individual Plant Space" },
                _ => new[] { "Vegetative", "Flowering", "Nursery" }
            };
        }
        
        /// <summary>
        /// Create a room construction button
        /// </summary>
        private Button CreateRoomConstructionButton(string roomType)
        {
            var button = new Button();
            button.text = $"Place {roomType} Room";
            button.name = $"place-{roomType.ToLower()}-room-button";
            
            // Styling
            button.style.height = 32;
            button.style.marginBottom = 4;
            button.style.backgroundColor = new Color(0.2f, 0.3f, 0.5f, 1f);
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.4f, 0.5f, 0.7f, 1f);
            button.style.borderRightColor = new Color(0.4f, 0.5f, 0.7f, 1f);
            button.style.borderBottomColor = new Color(0.4f, 0.5f, 0.7f, 1f);
            button.style.borderLeftColor = new Color(0.4f, 0.5f, 0.7f, 1f);
            button.style.borderTopLeftRadius = 4;
            button.style.borderTopRightRadius = 4;
            button.style.borderBottomLeftRadius = 4;
            button.style.borderBottomRightRadius = 4;
            button.style.color = Color.white;
            
            // Wire up click handler
            button.RegisterCallback<ClickEvent>(evt => OnRoomPlacementClicked(roomType));
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.3f, 0.4f, 0.6f, 1f), 
                new Color(0.2f, 0.3f, 0.5f, 1f)
            );
            
            return button;
        }

        /// <summary>
        /// Add cultivation mode specific content with Tools section
        /// </summary>
        private void AddCultivationModeContent(VisualElement container, CameraLevel level)
        {
            // Add title
            var title = new Label($"Cultivation Tools - {level} Level");
            title.style.fontSize = 16;
            title.style.unityFontStyleAndWeight = FontStyle.Bold;
            title.style.marginBottom = 12;
            title.style.color = Color.white;
            container.Add(title);

            // Create Tools section
            CreateCultivationToolsSection(container, level);
            
            // Create Environment Controls section
            CreateEnvironmentControlsSection(container, level);
            
            // Create Plant Care section
            CreatePlantCareSection(container, level);
        }
        
        /// <summary>
        /// Create the cultivation tools section
        /// </summary>
        private void CreateCultivationToolsSection(VisualElement container, CameraLevel level)
        {
            // Section title
            var sectionTitle = new Label("Cultivation Tools");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.color = new Color(0.3f, 0.8f, 0.3f, 1f); // Green theme for cultivation
            container.Add(sectionTitle);
            
            // Tool categories based on camera level
            var toolCategories = GetAvailableCultivationToolCategories(level);
            
            foreach (var category in toolCategories)
            {
                // Create category section
                var categoryContainer = CreateCultivationToolCategorySection(category, level);
                container.Add(categoryContainer);
            }
            
            // Add tool controls if in appropriate level
            if (level == CameraLevel.Plant || level == CameraLevel.Bench)
            {
                var separator = new VisualElement();
                separator.style.height = 1;
                separator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                separator.style.marginTop = 8;
                separator.style.marginBottom = 8;
                container.Add(separator);
                
                var toolsTitle = new Label("Active Tools");
                toolsTitle.style.fontSize = 12;
                toolsTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
                toolsTitle.style.marginBottom = 4;
                toolsTitle.style.color = new Color(0.8f, 0.8f, 0.8f, 1f);
                container.Add(toolsTitle);
                
                var putAwayToolButton = CreateActionButton("Put Away Current Tool", OnPutAwayTool);
                container.Add(putAwayToolButton);
            }
        }
        
        /// <summary>
        /// Get available cultivation tool categories based on camera level
        /// </summary>
        private string[] GetAvailableCultivationToolCategories(CameraLevel level)
        {
            return level switch
            {
                CameraLevel.Facility => new[] { "Facility Management", "Bulk Operations", "System Monitoring" },
                CameraLevel.Room => new[] { "Room Management", "Environmental Tools", "Harvest Tools", "Maintenance Tools" },
                CameraLevel.Bench => new[] { "Plant Care", "Training Tools", "Harvest Tools", "Measurement Tools" },
                CameraLevel.Plant => new[] { "Individual Care", "Training Tools", "Assessment Tools", "Harvest Tools" },
                _ => new[] { "Basic Tools", "Plant Care" }
            };
        }
        
        /// <summary>
        /// Create a cultivation tool category section with items
        /// </summary>
        private VisualElement CreateCultivationToolCategorySection(string category, CameraLevel level)
        {
            var categoryContainer = new VisualElement();
            categoryContainer.name = $"cultivation-tool-category-{category.ToLower().Replace(" ", "-")}";
            categoryContainer.style.marginBottom = 8;
            
            // Category header
            var categoryHeader = new Label(category);
            categoryHeader.style.fontSize = 12;
            categoryHeader.style.unityFontStyleAndWeight = FontStyle.Bold;
            categoryHeader.style.marginBottom = 4;
            categoryHeader.style.color = new Color(0.5f, 0.9f, 0.5f, 1f); // Light green for tool categories
            categoryContainer.Add(categoryHeader);
            
            // Tool items for this category
            var toolItems = GetCultivationToolItemsForCategory(category, level);
            
            foreach (var item in toolItems)
            {
                var toolButton = CreateCultivationToolButton(category, item);
                categoryContainer.Add(toolButton);
            }
            
            return categoryContainer;
        }
        
        /// <summary>
        /// Get cultivation tool items for a specific category and level
        /// </summary>
        private string[] GetCultivationToolItemsForCategory(string category, CameraLevel level)
        {
            return category switch
            {
                "Facility Management" => new[] { "Facility Overview Dashboard", "Production Reports", "Batch Management", "Quality Control" },
                "Bulk Operations" => new[] { "Mass Watering System", "Bulk Feeding", "Environmental Presets", "Automation Scheduler" },
                "System Monitoring" => new[] { "Sensor Network", "Alert Dashboard", "Performance Analytics", "Maintenance Scheduler" },
                "Room Management" => new[] { "Room Controller", "Environmental Presets", "Lighting Scheduler", "Harvest Planner" },
                "Environmental Tools" => new[] { "Temperature Gun", "Humidity Meter", "pH Tester", "Light Meter", "CO2 Monitor" },
                "Harvest Tools" => level switch
                {
                    CameraLevel.Room => new[] { "Batch Harvest", "Quality Inspector", "Yield Calculator", "Drying Setup" },
                    CameraLevel.Bench => new[] { "Selective Harvest", "Trimming Shears", "Collection Trays", "Weight Scale" },
                    CameraLevel.Plant => new[] { "Hand Trimmer", "Magnifying Glass", "Sample Collector", "Individual Scale" },
                    _ => new[] { "Basic Harvest Tools" }
                },
                "Maintenance Tools" => new[] { "Cleaning Supplies", "Equipment Calibration", "System Diagnostics", "Repair Kit" },
                "Plant Care" => level switch
                {
                    CameraLevel.Bench => new[] { "Watering Can", "Nutrient Feeder", "Pruning Shears", "Plant Stakes" },
                    CameraLevel.Plant => new[] { "Precision Watering", "Foliar Spray", "Training Wire", "Support Clips" },
                    _ => new[] { "Basic Plant Care" }
                },
                "Training Tools" => new[] { "LST Wire", "SCROG Net", "Plant Ties", "Support Stakes", "Bending Tools" },
                "Measurement Tools" => new[] { "Ruler", "Digital Calipers", "Plant Height Gauge", "Canopy Analyzer" },
                "Individual Care" => new[] { "Precision Watering", "Targeted Nutrition", "Individual Monitoring", "Custom Care Plan" },
                "Assessment Tools" => new[] { "Trichome Scope", "Bud Density Meter", "Maturity Checker", "Quality Assessor" },
                "Basic Tools" => new[] { "Watering Can", "Basic Pruners", "Plant Stakes" },
                _ => new[] { "Generic Tool" }
            };
        }
        
        /// <summary>
        /// Create a cultivation tool button
        /// </summary>
        private Button CreateCultivationToolButton(string category, string toolType)
        {
            var button = new Button();
            button.text = $"Use {toolType}";
            button.name = $"use-{toolType.ToLower().Replace(" ", "-")}-button";
            
            // Styling - green theme for cultivation tools
            button.style.height = 28;
            button.style.marginBottom = 2;
            button.style.marginLeft = 8; // Indent under category
            button.style.backgroundColor = new Color(0.15f, 0.45f, 0.15f, 1f); // Dark green
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.3f, 0.6f, 0.3f, 1f);
            button.style.borderRightColor = new Color(0.3f, 0.6f, 0.3f, 1f);
            button.style.borderBottomColor = new Color(0.3f, 0.6f, 0.3f, 1f);
            button.style.borderLeftColor = new Color(0.3f, 0.6f, 0.3f, 1f);
            button.style.borderTopLeftRadius = 3;
            button.style.borderTopRightRadius = 3;
            button.style.borderBottomLeftRadius = 3;
            button.style.borderBottomRightRadius = 3;
            button.style.color = Color.white;
            button.style.fontSize = 11;
            
            // Wire up click handler
            button.RegisterCallback<ClickEvent>(evt => OnCultivationToolClicked(category, toolType));
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.25f, 0.55f, 0.25f, 1f), 
                new Color(0.15f, 0.45f, 0.15f, 1f)
            );
            
            return button;
        }
        
        /// <summary>
        /// Create the environment controls section
        /// </summary>
        private void CreateEnvironmentControlsSection(VisualElement container, CameraLevel level)
        {
            // Add separator from tools section
            var separator = new VisualElement();
            separator.style.height = 1;
            separator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
            separator.style.marginTop = 12;
            separator.style.marginBottom = 8;
            container.Add(separator);
            
            // Section title
            var sectionTitle = new Label("Environment Controls");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.color = new Color(0.3f, 0.6f, 0.8f, 1f); // Blue theme for environment
            container.Add(sectionTitle);
            
            // Environment control categories based on camera level
            var environmentCategories = GetAvailableEnvironmentControlCategories(level);
            
            foreach (var category in environmentCategories)
            {
                // Create category section
                var categoryContainer = CreateEnvironmentControlCategorySection(category, level);
                container.Add(categoryContainer);
            }
            
            // Add environment management controls if in appropriate level
            if (level == CameraLevel.Facility || level == CameraLevel.Room)
            {
                var envSeparator = new VisualElement();
                envSeparator.style.height = 1;
                envSeparator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                envSeparator.style.marginTop = 8;
                envSeparator.style.marginBottom = 8;
                container.Add(envSeparator);
                
                var managementTitle = new Label("Environment Management");
                managementTitle.style.fontSize = 12;
                managementTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
                managementTitle.style.marginBottom = 4;
                managementTitle.style.color = new Color(0.8f, 0.8f, 0.8f, 1f);
                container.Add(managementTitle);
                
                var savePresetButton = CreateActionButton("Save Current Preset", OnSaveEnvironmentPreset);
                var loadPresetButton = CreateActionButton("Load Environment Preset", OnLoadEnvironmentPreset);
                var resetToDefaultButton = CreateActionButton("Reset to Default", OnResetEnvironmentToDefault);
                
                container.Add(savePresetButton);
                container.Add(loadPresetButton);
                container.Add(resetToDefaultButton);
            }
        }
        
        /// <summary>
        /// Get available environment control categories based on camera level
        /// </summary>
        private string[] GetAvailableEnvironmentControlCategories(CameraLevel level)
        {
            return level switch
            {
                CameraLevel.Facility => new[] { "Climate Systems", "Air Quality", "Lighting Control", "Water Systems" },
                CameraLevel.Room => new[] { "Temperature Control", "Humidity Control", "Lighting", "Air Circulation", "CO2 Management" },
                CameraLevel.Bench => new[] { "Microclimate", "Local Lighting", "Irrigation Control", "Air Flow" },
                CameraLevel.Plant => new[] { "Individual Environment", "Targeted Lighting", "Precision Watering", "Localized Air" },
                _ => new[] { "Basic Climate", "Lighting" }
            };
        }
        
        /// <summary>
        /// Create an environment control category section with items
        /// </summary>
        private VisualElement CreateEnvironmentControlCategorySection(string category, CameraLevel level)
        {
            var categoryContainer = new VisualElement();
            categoryContainer.name = $"environment-control-category-{category.ToLower().Replace(" ", "-")}";
            categoryContainer.style.marginBottom = 8;
            
            // Category header
            var categoryHeader = new Label(category);
            categoryHeader.style.fontSize = 12;
            categoryHeader.style.unityFontStyleAndWeight = FontStyle.Bold;
            categoryHeader.style.marginBottom = 4;
            categoryHeader.style.color = new Color(0.5f, 0.7f, 0.9f, 1f); // Light blue for environment categories
            categoryContainer.Add(categoryHeader);
            
            // Environment control items for this category
            var controlItems = GetEnvironmentControlItemsForCategory(category, level);
            
            foreach (var item in controlItems)
            {
                var controlButton = CreateEnvironmentControlButton(category, item);
                categoryContainer.Add(controlButton);
            }
            
            return categoryContainer;
        }
        
        /// <summary>
        /// Get environment control items for a specific category and level
        /// </summary>
        private string[] GetEnvironmentControlItemsForCategory(string category, CameraLevel level)
        {
            return category switch
            {
                "Climate Systems" => new[] { "Master Climate Control", "Zone Management", "Seasonal Programs", "Weather Simulation" },
                "Air Quality" => new[] { "Air Filtration", "Ventilation Control", "Pressure Management", "Air Quality Monitoring" },
                "Lighting Control" => level switch
                {
                    CameraLevel.Facility => new[] { "Master Lighting", "Zone Scheduling", "Energy Management", "Light Spectrum Control" },
                    CameraLevel.Room => new[] { "Room Lighting", "Schedule Control", "Intensity Adjustment", "Spectrum Tuning" },
                    _ => new[] { "Basic Lighting Control" }
                },
                "Water Systems" => new[] { "Water Distribution", "Quality Control", "Recycling Systems", "Waste Management" },
                "Temperature Control" => new[] { "Set Temperature", "Heating Control", "Cooling Control", "Temperature Scheduling" },
                "Humidity Control" => new[] { "Set Humidity", "Humidification", "Dehumidification", "Humidity Scheduling" },
                "Lighting" => level switch
                {
                    CameraLevel.Room => new[] { "Light Schedule", "Intensity Control", "Spectrum Control", "Photoperiod" },
                    CameraLevel.Bench => new[] { "Local Lights", "Spot Lighting", "Growth Lights", "Supplemental UV" },
                    CameraLevel.Plant => new[] { "Individual Light", "Targeted Spectrum", "Growth Boost", "Stress Lighting" },
                    _ => new[] { "Basic Lighting" }
                },
                "Air Circulation" => new[] { "Fan Control", "Air Movement", "Circulation Patterns", "Fresh Air Exchange" },
                "CO2 Management" => new[] { "CO2 Injection", "CO2 Monitoring", "CO2 Scheduling", "CO2 Distribution" },
                "Microclimate" => new[] { "Local Temperature", "Local Humidity", "Air Movement", "Microenvironment" },
                "Local Lighting" => new[] { "Bench Lights", "Task Lighting", "Grow Lights", "Accent Lighting" },
                "Irrigation Control" => new[] { "Watering Schedule", "Nutrient Delivery", "Drainage Control", "Moisture Monitoring" },
                "Air Flow" => new[] { "Local Fans", "Air Direction", "Ventilation", "Air Exchange" },
                "Individual Environment" => new[] { "Plant Microclimate", "Custom Conditions", "Stress Management", "Recovery Environment" },
                "Targeted Lighting" => new[] { "Individual Light", "Growth Enhancement", "Flowering Trigger", "Recovery Light" },
                "Precision Watering" => new[] { "Targeted Irrigation", "Nutrient Precision", "Moisture Control", "Root Zone Care" },
                "Localized Air" => new[] { "Personal Fan", "Micro Circulation", "Individual Ventilation", "Stress Relief" },
                "Basic Climate" => new[] { "Temperature", "Humidity", "Air Flow" },
                _ => new[] { "Generic Control" }
            };
        }
        
        /// <summary>
        /// Create an environment control button
        /// </summary>
        private Button CreateEnvironmentControlButton(string category, string controlType)
        {
            var button = new Button();
            button.text = $"Adjust {controlType}";
            button.name = $"adjust-{controlType.ToLower().Replace(" ", "-")}-button";
            
            // Styling - blue theme for environment controls
            button.style.height = 28;
            button.style.marginBottom = 2;
            button.style.marginLeft = 8; // Indent under category
            button.style.backgroundColor = new Color(0.15f, 0.3f, 0.45f, 1f); // Dark blue
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.3f, 0.5f, 0.6f, 1f);
            button.style.borderRightColor = new Color(0.3f, 0.5f, 0.6f, 1f);
            button.style.borderBottomColor = new Color(0.3f, 0.5f, 0.6f, 1f);
            button.style.borderLeftColor = new Color(0.3f, 0.5f, 0.6f, 1f);
            button.style.borderTopLeftRadius = 3;
            button.style.borderTopRightRadius = 3;
            button.style.borderBottomLeftRadius = 3;
            button.style.borderBottomRightRadius = 3;
            button.style.color = Color.white;
            button.style.fontSize = 11;
            
            // Wire up click handler
            button.RegisterCallback<ClickEvent>(evt => OnEnvironmentControlClicked(category, controlType));
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.25f, 0.4f, 0.55f, 1f), 
                new Color(0.15f, 0.3f, 0.45f, 1f)
            );
            
            return button;
        }
        
        /// <summary>
        /// Create the plant care section
        /// </summary>
        private void CreatePlantCareSection(VisualElement container, CameraLevel level)
        {
            // Add separator from environment controls section
            var separator = new VisualElement();
            separator.style.height = 1;
            separator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
            separator.style.marginTop = 12;
            separator.style.marginBottom = 8;
            container.Add(separator);
            
            // Section title
            var sectionTitle = new Label("Plant Care");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.color = new Color(0.8f, 0.3f, 0.8f, 1f); // Purple theme for plant care
            container.Add(sectionTitle);
            
            // Plant care categories based on camera level
            var plantCareCategories = GetAvailablePlantCareCategories(level);
            
            foreach (var category in plantCareCategories)
            {
                // Create category section
                var categoryContainer = CreatePlantCareCategorySection(category, level);
                container.Add(categoryContainer);
            }
            
            // Add plant management controls if in appropriate level
            if (level == CameraLevel.Plant || level == CameraLevel.Bench)
            {
                var careSeparator = new VisualElement();
                careSeparator.style.height = 1;
                careSeparator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                careSeparator.style.marginTop = 8;
                careSeparator.style.marginBottom = 8;
                container.Add(careSeparator);
                
                var managementTitle = new Label("Plant Management");
                managementTitle.style.fontSize = 12;
                managementTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
                managementTitle.style.marginBottom = 4;
                managementTitle.style.color = new Color(0.8f, 0.8f, 0.8f, 1f);
                container.Add(managementTitle);
                
                var createCareScheduleButton = CreateActionButton("Create Care Schedule", OnCreatePlantCareSchedule);
                var viewPlantHealthButton = CreateActionButton("View Plant Health Report", OnViewPlantHealthReport);
                var recordObservationButton = CreateActionButton("Record Observation", OnRecordPlantObservation);
                
                container.Add(createCareScheduleButton);
                container.Add(viewPlantHealthButton);
                container.Add(recordObservationButton);
            }
        }
        
        /// <summary>
        /// Get available plant care categories based on camera level
        /// </summary>
        private string[] GetAvailablePlantCareCategories(CameraLevel level)
        {
            return level switch
            {
                CameraLevel.Facility => new[] { "Facility Health", "Batch Management", "Disease Prevention", "Harvest Planning" },
                CameraLevel.Room => new[] { "Room Health", "Group Care", "Environmental Health", "Pest Management", "Nutrient Management" },
                CameraLevel.Bench => new[] { "Bench Care", "Watering", "Feeding", "Training", "Health Monitoring" },
                CameraLevel.Plant => new[] { "Individual Care", "Detailed Health", "Precise Nutrition", "Training & Support", "Growth Monitoring" },
                _ => new[] { "Basic Care", "Health Check" }
            };
        }
        
        /// <summary>
        /// Create a plant care category section with items
        /// </summary>
        private VisualElement CreatePlantCareCategorySection(string category, CameraLevel level)
        {
            var categoryContainer = new VisualElement();
            categoryContainer.name = $"plant-care-category-{category.ToLower().Replace(" ", "-")}";
            categoryContainer.style.marginBottom = 8;
            
            // Category header
            var categoryHeader = new Label(category);
            categoryHeader.style.fontSize = 12;
            categoryHeader.style.unityFontStyleAndWeight = FontStyle.Bold;
            categoryHeader.style.marginBottom = 4;
            categoryHeader.style.color = new Color(0.9f, 0.5f, 0.9f, 1f); // Light purple for plant care categories
            categoryContainer.Add(categoryHeader);
            
            // Plant care items for this category
            var careItems = GetPlantCareItemsForCategory(category, level);
            
            foreach (var item in careItems)
            {
                var careButton = CreatePlantCareButton(category, item);
                categoryContainer.Add(careButton);
            }
            
            return categoryContainer;
        }
        
        /// <summary>
        /// Get plant care items for a specific category and level
        /// </summary>
        private string[] GetPlantCareItemsForCategory(string category, CameraLevel level)
        {
            return category switch
            {
                "Facility Health" => new[] { "Overall Health Assessment", "Facility Diagnostics", "Production Analytics", "Quality Metrics" },
                "Batch Management" => new[] { "Batch Health Check", "Batch Scheduling", "Harvest Coordination", "Quality Control" },
                "Disease Prevention" => new[] { "Preventive Treatments", "Health Protocols", "Quarantine Management", "Sanitization" },
                "Harvest Planning" => new[] { "Harvest Scheduler", "Maturity Assessment", "Yield Estimation", "Processing Prep" },
                "Room Health" => new[] { "Room Assessment", "Group Health Check", "Environmental Correlation", "Problem Identification" },
                "Group Care" => new[] { "Collective Watering", "Group Feeding", "Uniform Training", "Synchronized Care" },
                "Environmental Health" => new[] { "Climate Health Check", "Air Quality Assessment", "Light Quality Check", "Stress Analysis" },
                "Pest Management" => new[] { "Pest Inspection", "IPM Treatment", "Beneficial Release", "Prevention Protocol" },
                "Nutrient Management" => new[] { "Nutrient Analysis", "Feed Schedule", "Deficiency Check", "Solution Mixing" },
                "Bench Care" => level switch
                {
                    CameraLevel.Bench => new[] { "Bench Health Check", "Collective Care", "Bench Maintenance", "Group Monitoring" },
                    _ => new[] { "Basic Bench Care" }
                },
                "Watering" => level switch
                {
                    CameraLevel.Bench => new[] { "Bench Watering", "Scheduled Irrigation", "Moisture Check", "Drainage Maintenance" },
                    CameraLevel.Plant => new[] { "Individual Watering", "Precision Irrigation", "Root Zone Care", "Custom Schedule" },
                    _ => new[] { "Basic Watering" }
                },
                "Feeding" => level switch
                {
                    CameraLevel.Bench => new[] { "Nutrient Feeding", "Feed Schedule", "Solution Check", "pH Balance" },
                    CameraLevel.Plant => new[] { "Individual Feeding", "Custom Nutrition", "Targeted Supplements", "Precise Dosing" },
                    _ => new[] { "Basic Feeding" }
                },
                "Training" => new[] { "LST Training", "Topping", "FIMing", "Defoliation", "Support Installation" },
                "Health Monitoring" => level switch
                {
                    CameraLevel.Bench => new[] { "Bench Health Scan", "Growth Tracking", "Problem Detection", "Care History" },
                    CameraLevel.Plant => new[] { "Individual Health Check", "Detailed Assessment", "Growth Measurement", "Health Log" },
                    _ => new[] { "Basic Health Check" }
                },
                "Individual Care" => new[] { "Personal Care Plan", "Individual Schedule", "Custom Treatment", "Special Needs" },
                "Detailed Health" => new[] { "Comprehensive Check", "Detailed Diagnostics", "Health Report", "Treatment Plan" },
                "Precise Nutrition" => new[] { "Nutrient Profile", "Custom Feeding", "Supplement Plan", "Deficiency Treatment" },
                "Training & Support" => new[] { "Individual Training", "Support Setup", "Growth Direction", "Structure Maintenance" },
                "Growth Monitoring" => new[] { "Growth Tracking", "Development Log", "Progress Photos", "Milestone Recording" },
                "Basic Care" => new[] { "Water Plants", "Check Health", "Basic Feeding" },
                "Health Check" => new[] { "Visual Inspection", "Basic Assessment", "Problem Detection" },
                _ => new[] { "Generic Care" }
            };
        }
        
        /// <summary>
        /// Create a plant care button
        /// </summary>
        private Button CreatePlantCareButton(string category, string careType)
        {
            var button = new Button();
            button.text = $"Perform {careType}";
            button.name = $"perform-{careType.ToLower().Replace(" ", "-").Replace("&", "and")}-button";
            
            // Styling - purple theme for plant care
            button.style.height = 28;
            button.style.marginBottom = 2;
            button.style.marginLeft = 8; // Indent under category
            button.style.backgroundColor = new Color(0.45f, 0.15f, 0.45f, 1f); // Dark purple
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.6f, 0.3f, 0.6f, 1f);
            button.style.borderRightColor = new Color(0.6f, 0.3f, 0.6f, 1f);
            button.style.borderBottomColor = new Color(0.6f, 0.3f, 0.6f, 1f);
            button.style.borderLeftColor = new Color(0.6f, 0.3f, 0.6f, 1f);
            button.style.borderTopLeftRadius = 3;
            button.style.borderTopRightRadius = 3;
            button.style.borderBottomLeftRadius = 3;
            button.style.borderBottomRightRadius = 3;
            button.style.color = Color.white;
            button.style.fontSize = 11;
            
            // Wire up click handler
            button.RegisterCallback<ClickEvent>(evt => OnPlantCareClicked(category, careType));
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.55f, 0.25f, 0.55f, 1f), 
                new Color(0.45f, 0.15f, 0.45f, 1f)
            );
            
            return button;
        }

        /// <summary>
        /// Add genetics mode specific content with Seed Bank section
        /// </summary>
        private void AddGeneticsModeContent(VisualElement container, CameraLevel level)
        {
            // Add title
            var title = new Label($"Genetics Tools - {level} Level");
            title.style.fontSize = 16;
            title.style.unityFontStyleAndWeight = FontStyle.Bold;
            title.style.marginBottom = 12;
            title.style.color = Color.white;
            container.Add(title);

            // Create Seed Bank section
            CreateSeedBankSection(container, level);
            
            // Create Tissue Culture section
            CreateTissueCultureSection(container, level);
            
            // Create Microprop section
            CreateMicropropSection(container, level);
        }
        
        /// <summary>
        /// Create the seed bank section
        /// </summary>
        private void CreateSeedBankSection(VisualElement container, CameraLevel level)
        {
            // Section title
            var sectionTitle = new Label("Seed Bank");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.color = new Color(0.8f, 0.6f, 0.2f, 1f); // Gold theme for genetics
            container.Add(sectionTitle);
            
            // Seed bank categories based on camera level
            var seedBankCategories = GetAvailableSeedBankCategories(level);
            
            foreach (var category in seedBankCategories)
            {
                // Create category section
                var categoryContainer = CreateSeedBankCategorySection(category, level);
                container.Add(categoryContainer);
            }
            
            // Add seed bank management controls if in appropriate level
            if (level == CameraLevel.Facility || level == CameraLevel.Room)
            {
                var separator = new VisualElement();
                separator.style.height = 1;
                separator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                separator.style.marginTop = 8;
                separator.style.marginBottom = 8;
                container.Add(separator);
                
                var managementTitle = new Label("Seed Bank Management");
                managementTitle.style.fontSize = 12;
                managementTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
                managementTitle.style.marginBottom = 4;
                managementTitle.style.color = new Color(0.8f, 0.8f, 0.8f, 1f);
                container.Add(managementTitle);
                
                var createCollectionButton = CreateActionButton("Create New Collection", OnCreateSeedCollection);
                var exportGeneticsButton = CreateActionButton("Export Genetics Data", OnExportGeneticsData);
                var importSeedsButton = CreateActionButton("Import Seeds", OnImportSeeds);
                
                container.Add(createCollectionButton);
                container.Add(exportGeneticsButton);
                container.Add(importSeedsButton);
            }
        }
        
        /// <summary>
        /// Get available seed bank categories based on camera level
        /// </summary>
        private string[] GetAvailableSeedBankCategories(CameraLevel level)
        {
            return level switch
            {
                CameraLevel.Facility => new[] { "Master Collection", "Strain Library", "Breeding Programs", "Conservation Bank" },
                CameraLevel.Room => new[] { "Active Strains", "Breeding Projects", "Genetic Testing", "Storage Management" },
                CameraLevel.Bench => new[] { "Current Seeds", "Germination Testing", "Seedling Production", "Quality Control" },
                CameraLevel.Plant => new[] { "Individual Genetics", "Phenotype Analysis", "Breeding Selection", "Seed Collection" },
                _ => new[] { "Basic Seeds", "Strain Collection" }
            };
        }
        
        /// <summary>
        /// Create a seed bank category section with items
        /// </summary>
        private VisualElement CreateSeedBankCategorySection(string category, CameraLevel level)
        {
            var categoryContainer = new VisualElement();
            categoryContainer.name = $"seed-bank-category-{category.ToLower().Replace(" ", "-")}";
            categoryContainer.style.marginBottom = 8;
            
            // Category header
            var categoryHeader = new Label(category);
            categoryHeader.style.fontSize = 12;
            categoryHeader.style.unityFontStyleAndWeight = FontStyle.Bold;
            categoryHeader.style.marginBottom = 4;
            categoryHeader.style.color = new Color(0.9f, 0.7f, 0.3f, 1f); // Light gold for seed bank categories
            categoryContainer.Add(categoryHeader);
            
            // Seed bank items for this category
            var seedBankItems = GetSeedBankItemsForCategory(category, level);
            
            foreach (var item in seedBankItems)
            {
                var seedBankButton = CreateSeedBankButton(category, item);
                categoryContainer.Add(seedBankButton);
            }
            
            return categoryContainer;
        }
        
        /// <summary>
        /// Get seed bank items for a specific category and level
        /// </summary>
        private string[] GetSeedBankItemsForCategory(string category, CameraLevel level)
        {
            return category switch
            {
                "Master Collection" => new[] { "All Strains Database", "Genetic Diversity Index", "Collection Overview", "Heritage Varieties" },
                "Strain Library" => new[] { "Indica Collection", "Sativa Collection", "Hybrid Varieties", "Rare Genetics", "Commercial Strains" },
                "Breeding Programs" => new[] { "Active Crosses", "F1 Generation", "Backcross Projects", "Stabilization Programs" },
                "Conservation Bank" => new[] { "Landrace Preservation", "Genetic Backup", "Cryogenic Storage", "Emergency Reserve" },
                "Active Strains" => level switch
                {
                    CameraLevel.Room => new[] { "Current Production", "Mother Plants", "Breeding Stock", "Test Varieties" },
                    _ => new[] { "Available Strains" }
                },
                "Breeding Projects" => new[] { "Cross Planning", "Genetic Mapping", "Trait Selection", "Generation Tracking" },
                "Genetic Testing" => new[] { "DNA Analysis", "Cannabinoid Profiling", "Terpene Analysis", "Genetic Markers" },
                "Storage Management" => new[] { "Inventory Control", "Viability Testing", "Storage Conditions", "Seed Health" },
                "Current Seeds" => level switch
                {
                    CameraLevel.Bench => new[] { "Ready to Plant", "Germination Queue", "Test Batches", "Quality Samples" },
                    _ => new[] { "Available Seeds" }
                },
                "Germination Testing" => new[] { "Viability Tests", "Germination Rates", "Growth Tests", "Quality Assessment" },
                "Seedling Production" => new[] { "Germination Setup", "Seedling Care", "Transplant Prep", "Selection Process" },
                "Quality Control" => new[] { "Seed Inspection", "Purity Testing", "Health Screening", "Certification" },
                "Individual Genetics" => new[] { "Plant Genome", "Genetic Profile", "DNA Fingerprint", "Trait Analysis" },
                "Phenotype Analysis" => new[] { "Visual Assessment", "Growth Patterns", "Cannabinoid Expression", "Terpene Profile" },
                "Breeding Selection" => new[] { "Parent Selection", "Cross Planning", "Trait Combination", "Selection Criteria" },
                "Seed Collection" => new[] { "Harvest Seeds", "Process Seeds", "Store Seeds", "Quality Grade" },
                "Basic Seeds" => new[] { "View Collection", "Plant Seeds", "Store Seeds" },
                "Strain Collection" => new[] { "Browse Strains", "Select Genetics", "Compare Varieties" },
                _ => new[] { "Generic Genetics" }
            };
        }
        
        /// <summary>
        /// Create a seed bank button
        /// </summary>
        private Button CreateSeedBankButton(string category, string bankType)
        {
            var button = new Button();
            button.text = $"Access {bankType}";
            button.name = $"access-{bankType.ToLower().Replace(" ", "-")}-button";
            
            // Styling - gold theme for seed bank
            button.style.height = 28;
            button.style.marginBottom = 2;
            button.style.marginLeft = 8; // Indent under category
            button.style.backgroundColor = new Color(0.45f, 0.35f, 0.15f, 1f); // Dark gold
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.6f, 0.5f, 0.3f, 1f);
            button.style.borderRightColor = new Color(0.6f, 0.5f, 0.3f, 1f);
            button.style.borderBottomColor = new Color(0.6f, 0.5f, 0.3f, 1f);
            button.style.borderLeftColor = new Color(0.6f, 0.5f, 0.3f, 1f);
            button.style.borderTopLeftRadius = 3;
            button.style.borderTopRightRadius = 3;
            button.style.borderBottomLeftRadius = 3;
            button.style.borderBottomRightRadius = 3;
            button.style.color = Color.white;
            button.style.fontSize = 11;
            
            // Wire up click handler
            button.RegisterCallback<ClickEvent>(evt => OnSeedBankClicked(category, bankType));
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.55f, 0.45f, 0.25f, 1f), 
                new Color(0.45f, 0.35f, 0.15f, 1f)
            );
            
            return button;
        }

        /// <summary>
        /// Create the tissue culture section
        /// </summary>
        private void CreateTissueCultureSection(VisualElement container, CameraLevel level)
        {
            // Section title
            var sectionTitle = new Label("Tissue Culture");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.marginTop = 12;
            sectionTitle.style.color = new Color(0.6f, 0.8f, 0.4f, 1f); // Light green theme for tissue culture
            container.Add(sectionTitle);
            
            // Tissue culture categories based on camera level
            var tissueCultureCategories = GetAvailableTissueCultureCategories(level);
            
            foreach (var category in tissueCultureCategories)
            {
                // Create category section
                var categoryContainer = CreateTissueCultureCategorySection(category, level);
                container.Add(categoryContainer);
            }
            
            // Add tissue culture management controls if in appropriate level
            if (level == CameraLevel.Facility || level == CameraLevel.Room)
            {
                var separator = new VisualElement();
                separator.style.height = 1;
                separator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                separator.style.marginTop = 8;
                separator.style.marginBottom = 8;
                container.Add(separator);
                
                var managementTitle = new Label("Laboratory Management");
                managementTitle.style.fontSize = 12;
                managementTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
                managementTitle.style.marginBottom = 6;
                managementTitle.style.color = new Color(0.6f, 0.8f, 0.4f, 1f);
                container.Add(managementTitle);
                
                var setupLabButton = CreateActionButton("Setup Sterile Lab", OnSetupSterileEnvironment);
                var prepareMediaButton = CreateActionButton("Prepare Culture Media", OnPrepareCultureMedia);
                var sterilizeEquipmentButton = CreateActionButton("Sterilize Equipment", OnSterilizeEquipment);
                
                container.Add(setupLabButton);
                container.Add(prepareMediaButton);
                container.Add(sterilizeEquipmentButton);
            }
        }
        
        /// <summary>
        /// Create tissue culture category section
        /// </summary>
        private VisualElement CreateTissueCultureCategorySection(string category, CameraLevel level)
        {
            var categoryContainer = new VisualElement();
            
            // Category header
            var categoryHeader = new Label(category);
            categoryHeader.style.fontSize = 12;
            categoryHeader.style.unityFontStyleAndWeight = FontStyle.Bold;
            categoryHeader.style.marginTop = 6;
            categoryHeader.style.marginBottom = 4;
            categoryHeader.style.color = new Color(0.5f, 0.7f, 0.3f, 1f);
            categoryContainer.Add(categoryHeader);
            
            // Get operations for this category
            var operations = GetTissueCultureOperations(category, level);
            
            foreach (var operation in operations)
            {
                var button = CreateTissueCultureButton(category, operation);
                categoryContainer.Add(button);
            }
            
            return categoryContainer;
        }
        
        /// <summary>
        /// Get available tissue culture categories based on camera level
        /// </summary>
        private string[] GetAvailableTissueCultureCategories(CameraLevel level)
        {
            return level switch
            {
                CameraLevel.Facility => new[] { "Sterile Techniques", "Culture Media", "Propagation Methods", "Contamination Control" },
                CameraLevel.Room => new[] { "Active Cultures", "Media Preparation", "Equipment Sterilization", "Quality Control" },
                CameraLevel.Bench => new[] { "Current Cultures", "Media Bottles", "Sterile Tools", "Growth Monitoring" },
                CameraLevel.Plant => new[] { "Individual Cultures", "Clone Development", "Rooting Progress", "Transfer Ready" },
                _ => new[] { "Basic Culture", "Growth Medium" }
            };
        }
        
        /// <summary>
        /// Get tissue culture operations for category and level
        /// </summary>
        private string[] GetTissueCultureOperations(string category, CameraLevel level)
        {
            return category switch
            {
                "Sterile Techniques" => new[] { "Laminar Flow Setup", "Aseptic Transfer", "Sterile Isolation", "Clean Room Protocols" },
                "Culture Media" => new[] { "MS Medium", "Rooting Medium", "Shooting Medium", "Custom Formulations" },
                "Propagation Methods" => new[] { "Nodal Cutting", "Shoot Tip Culture", "Callus Induction", "Somatic Embryogenesis" },
                "Contamination Control" => new[] { "Bacterial Testing", "Fungal Screening", "Antibiotic Treatment", "Quarantine Protocols" },
                "Active Cultures" => level switch
                {
                    CameraLevel.Room => new[] { "Mother Cultures", "Production Lines", "Experimental Batches", "Backup Cultures" },
                    _ => new[] { "Standard Cultures", "Research Lines" }
                },
                "Media Preparation" => new[] { "Autoclave Sterilization", "pH Adjustment", "Nutrient Mixing", "Agar Preparation" },
                "Equipment Sterilization" => new[] { "Autoclave Equipment", "UV Sterilization", "Chemical Disinfection", "Flame Sterilization" },
                "Quality Control" => new[] { "Contamination Check", "Growth Assessment", "Viability Testing", "Genetic Stability" },
                "Current Cultures" => new[] { "Growth Monitoring", "Subculture Schedule", "Harvest Timing", "Transfer Planning" },
                "Media Bottles" => new[] { "Fresh Medium", "Used Medium", "Specialty Formulations", "Stock Solutions" },
                "Sterile Tools" => new[] { "Forceps", "Scalpels", "Transfer Loops", "Pipettes" },
                "Growth Monitoring" => new[] { "Daily Checks", "Growth Measurement", "Photo Documentation", "Progress Notes" },
                "Individual Cultures" => new[] { "Culture Health", "Growth Rate", "Contamination Status", "Ready for Transfer" },
                "Clone Development" => new[] { "Shoot Formation", "Node Development", "Leaf Expansion", "Root Initiation" },
                "Rooting Progress" => new[] { "Root Length", "Root Density", "Root Health", "Transplant Readiness" },
                "Transfer Ready" => new[] { "Acclimatization Prep", "Hardening Process", "Transplant Schedule", "Success Rate" },
                "Basic Culture" => new[] { "View Cultures", "Monitor Growth", "Schedule Transfer" },
                "Growth Medium" => new[] { "Check Medium", "Replace Medium", "Adjust Nutrients" },
                _ => new[] { "Generic Culture Operation" }
            };
        }
        
        /// <summary>
        /// Create a tissue culture button
        /// </summary>
        private Button CreateTissueCultureButton(string category, string operation)
        {
            var button = new Button();
            button.text = $"Perform {operation}";
            button.name = $"perform-{operation.ToLower().Replace(" ", "-")}-button";
            
            // Styling - light green theme for tissue culture
            button.style.height = 28;
            button.style.marginBottom = 2;
            button.style.marginLeft = 8; // Indent under category
            button.style.backgroundColor = new Color(0.25f, 0.4f, 0.2f, 1f); // Dark green
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.4f, 0.6f, 0.35f, 1f);
            button.style.borderRightColor = new Color(0.4f, 0.6f, 0.35f, 1f);
            button.style.borderBottomColor = new Color(0.4f, 0.6f, 0.35f, 1f);
            button.style.borderLeftColor = new Color(0.4f, 0.6f, 0.35f, 1f);
            button.style.borderTopLeftRadius = 3;
            button.style.borderTopRightRadius = 3;
            button.style.borderBottomLeftRadius = 3;
            button.style.borderBottomRightRadius = 3;
            button.style.color = Color.white;
            button.style.fontSize = 11;
            
            // Wire up click handler
            button.RegisterCallback<ClickEvent>(evt => OnTissueCultureClicked(category, operation));
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.35f, 0.5f, 0.3f, 1f), 
                new Color(0.25f, 0.4f, 0.2f, 1f)
            );
            
            return button;
        }

        /// <summary>
        /// Create the micropropagation section
        /// </summary>
        private void CreateMicropropSection(VisualElement container, CameraLevel level)
        {
            // Section title
            var sectionTitle = new Label("Micropropagation");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.marginTop = 12;
            sectionTitle.style.color = new Color(0.4f, 0.6f, 0.8f, 1f); // Blue theme for micropropagation
            container.Add(sectionTitle);
            
            // Microprop categories based on camera level
            var micropropCategories = GetAvailableMicropropCategories(level);
            
            foreach (var category in micropropCategories)
            {
                // Create category section
                var categoryContainer = CreateMicropropCategorySection(category, level);
                container.Add(categoryContainer);
            }
            
            // Add microprop management controls if in appropriate level
            if (level == CameraLevel.Facility || level == CameraLevel.Room)
            {
                var separator = new VisualElement();
                separator.style.height = 1;
                separator.style.backgroundColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                separator.style.marginTop = 8;
                separator.style.marginBottom = 8;
                container.Add(separator);
                
                var managementTitle = new Label("Production Management");
                managementTitle.style.fontSize = 12;
                managementTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
                managementTitle.style.marginBottom = 6;
                managementTitle.style.color = new Color(0.4f, 0.6f, 0.8f, 1f);
                container.Add(managementTitle);
                
                var scaleCultureButton = CreateActionButton("Scale Culture Production", OnScaleCultureProduction);
                var optimizeProtocolButton = CreateActionButton("Optimize Protocols", OnOptimizeProtocols);
                var qualityAssuranceButton = CreateActionButton("Quality Assurance Check", OnQualityAssuranceCheck);
                
                container.Add(scaleCultureButton);
                container.Add(optimizeProtocolButton);
                container.Add(qualityAssuranceButton);
            }
        }
        
        /// <summary>
        /// Add analytics dashboard section to contextual menu
        /// Provides quick access to data insights across all gameplay modes
        /// </summary>
        private void AddAnalyticsDashboardSection(VisualElement container, ProjectChimera.Data.Events.GameplayMode mode, CameraLevel level)
        {
            // Add separator for visual distinction
            var separator = new VisualElement();
            separator.style.height = 2;
            separator.style.backgroundColor = new Color(0.2f, 0.4f, 0.6f, 1f); // Analytics theme color
            separator.style.marginTop = 16;
            separator.style.marginBottom = 12;
            container.Add(separator);

            // Section title with analytics icon styling
            var sectionTitle = new Label("📊 Analytics Dashboard");
            sectionTitle.style.fontSize = 14;
            sectionTitle.style.unityFontStyleAndWeight = FontStyle.Bold;
            sectionTitle.style.marginBottom = 8;
            sectionTitle.style.color = new Color(0.3f, 0.6f, 0.9f, 1f); // Analytics blue
            container.Add(sectionTitle);

            // Create analytics buttons based on mode and context
            CreateAnalyticsButtons(container, mode, level);
        }

        /// <summary>
        /// Create analytics buttons based on current mode and camera level
        /// </summary>
        private void CreateAnalyticsButtons(VisualElement container, ProjectChimera.Data.Events.GameplayMode mode, CameraLevel level)
        {
            // Main dashboard button - always available
            var dashboardButton = CreateAnalyticsButton(
                "View Dashboard", 
                "📈 Open comprehensive KPI dashboard with real-time metrics",
                OnOpenAnalyticsDashboard
            );
            container.Add(dashboardButton);

            // Context-specific analytics based on mode
            switch (mode)
            {
                case ProjectChimera.Data.Events.GameplayMode.Cultivation:
                    AddCultivationAnalyticsButtons(container, level);
                    break;
                case ProjectChimera.Data.Events.GameplayMode.Construction:
                    AddConstructionAnalyticsButtons(container, level);
                    break;
                case ProjectChimera.Data.Events.GameplayMode.Genetics:
                    AddGeneticsAnalyticsButtons(container, level);
                    break;
            }

            // Facility-specific analytics at facility level
            if (level == CameraLevel.Facility)
            {
                var facilityAnalyticsButton = CreateAnalyticsButton(
                    "Facility Report",
                    "🏢 View facility-specific performance metrics",
                    OnOpenFacilityAnalytics
                );
                container.Add(facilityAnalyticsButton);
            }
        }

        /// <summary>
        /// Add cultivation-specific analytics buttons
        /// </summary>
        private void AddCultivationAnalyticsButtons(VisualElement container, CameraLevel level)
        {
            var yieldAnalyticsButton = CreateAnalyticsButton(
                "Yield Analytics",
                "🌿 Track harvest yields, plant health, and growth rates",
                OnOpenYieldAnalytics
            );
            container.Add(yieldAnalyticsButton);

            if (level == CameraLevel.Plant || level == CameraLevel.Bench)
            {
                var plantHealthButton = CreateAnalyticsButton(
                    "Plant Health Report",
                    "🔬 Individual plant health metrics and care recommendations",
                    OnOpenPlantHealthAnalytics
                );
                container.Add(plantHealthButton);
            }
        }

        /// <summary>
        /// Add construction-specific analytics buttons
        /// </summary>
        private void AddConstructionAnalyticsButtons(VisualElement container, CameraLevel level)
        {
            var utilizationButton = CreateAnalyticsButton(
                "Space Utilization",
                "🏗️ Analyze facility capacity and construction efficiency",
                OnOpenUtilizationAnalytics
            );
            container.Add(utilizationButton);

            var costAnalyticsButton = CreateAnalyticsButton(
                "Construction Costs",
                "💰 Track building expenses and ROI analysis",
                OnOpenConstructionCostAnalytics
            );
            container.Add(costAnalyticsButton);
        }

        /// <summary>
        /// Add genetics-specific analytics buttons
        /// </summary>
        private void AddGeneticsAnalyticsButtons(VisualElement container, CameraLevel level)
        {
            var geneticsReportButton = CreateAnalyticsButton(
                "Genetics Report",
                "🧬 Analyze breeding success rates and genetic diversity",
                OnOpenGeneticsAnalytics
            );
            container.Add(geneticsReportButton);

            var traitAnalysisButton = CreateAnalyticsButton(
                "Trait Analysis",
                "📊 Track trait expression and heritability data",
                OnOpenTraitAnalytics
            );
            container.Add(traitAnalysisButton);
        }

        /// <summary>
        /// Create a styled analytics button with tooltip
        /// </summary>
        private Button CreateAnalyticsButton(string buttonText, string tooltip, System.Action onClickAction)
        {
            var button = new Button(() => onClickAction?.Invoke());
            button.text = buttonText;
            
            // Style the button with analytics theme
            button.style.backgroundColor = new Color(0.2f, 0.3f, 0.4f, 0.8f);
            button.style.color = new Color(0.9f, 0.9f, 0.9f, 1f);
            button.style.borderTopWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderTopColor = new Color(0.3f, 0.6f, 0.9f, 0.5f);
            button.style.borderBottomColor = new Color(0.3f, 0.6f, 0.9f, 0.5f);
            button.style.borderLeftColor = new Color(0.3f, 0.6f, 0.9f, 0.5f);
            button.style.borderRightColor = new Color(0.3f, 0.6f, 0.9f, 0.5f);
            button.style.borderTopLeftRadius = 4;
            button.style.borderTopRightRadius = 4;
            button.style.borderBottomLeftRadius = 4;
            button.style.borderBottomRightRadius = 4;
            button.style.marginBottom = 4;
            button.style.height = 32;
            button.style.fontSize = 12;

            // Add hover effects
            button.RegisterCallback<MouseEnterEvent>(_ => {
                button.style.backgroundColor = new Color(0.3f, 0.5f, 0.7f, 0.9f);
            });

            button.RegisterCallback<MouseLeaveEvent>(_ => {
                button.style.backgroundColor = new Color(0.2f, 0.3f, 0.4f, 0.8f);
            });

            // Add tooltip (simplified - would need proper tooltip system in production)
            button.tooltip = tooltip;

            return button;
        }

        #region Analytics Button Handlers

        /// <summary>
        /// Open the main analytics dashboard
        /// </summary>
        private void OnOpenAnalyticsDashboard()
        {
            if (_enableDebugLogging)
                Debug.Log("[ContextualMenuController] Opening Analytics Dashboard");

            // Find and show the DataDashboardPanel
            var dashboardPanel = FindObjectOfType<ProjectChimera.UI.Panels.DataDashboardPanel>();
            if (dashboardPanel != null)
            {
                dashboardPanel.Show();
                if (_enableDebugLogging)
                    Debug.Log("[ContextualMenuController] Analytics Dashboard opened successfully");
            }
            else
            {
                Debug.LogWarning("[ContextualMenuController] DataDashboardPanel not found in scene");
                // Fallback: Could create dashboard dynamically or show error message
                ShowAnalyticsNotAvailableMessage();
            }
        }

        /// <summary>
        /// Open yield analytics view
        /// </summary>
        private void OnOpenYieldAnalytics()
        {
            var dashboardPanel = FindObjectOfType<ProjectChimera.UI.Panels.DataDashboardPanel>();
            if (dashboardPanel != null)
            {
                dashboardPanel.Show();
                // Switch to cultivation metrics focus
                dashboardPanel.SetFacilityFilter("All Facilities");
                dashboardPanel.SetTimeRangeFilter(ProjectChimera.Systems.Analytics.TimeRange.LastWeek);
                if (_enableDebugLogging)
                    Debug.Log("[ContextualMenuController] Yield Analytics view opened");
            }
        }

        /// <summary>
        /// Open plant health analytics view
        /// </summary>
        private void OnOpenPlantHealthAnalytics()
        {
            var dashboardPanel = FindObjectOfType<ProjectChimera.UI.Panels.DataDashboardPanel>();
            if (dashboardPanel != null)
            {
                dashboardPanel.Show();
                // Focus on plant health metrics
                dashboardPanel.SetTimeRangeFilter(ProjectChimera.Systems.Analytics.TimeRange.Last24Hours);
                if (_enableDebugLogging)
                    Debug.Log("[ContextualMenuController] Plant Health Analytics view opened");
            }
        }

        /// <summary>
        /// Open facility analytics view
        /// </summary>
        private void OnOpenFacilityAnalytics()
        {
            var dashboardPanel = FindObjectOfType<ProjectChimera.UI.Panels.DataDashboardPanel>();
            if (dashboardPanel != null)
            {
                dashboardPanel.Show();
                // Set to current facility context
                dashboardPanel.SetFacilityFilter("Main Facility"); // Would get actual facility name from context
                if (_enableDebugLogging)
                    Debug.Log("[ContextualMenuController] Facility Analytics view opened");
            }
        }

        /// <summary>
        /// Open utilization analytics view
        /// </summary>
        private void OnOpenUtilizationAnalytics()
        {
            var dashboardPanel = FindObjectOfType<ProjectChimera.UI.Panels.DataDashboardPanel>();
            if (dashboardPanel != null)
            {
                dashboardPanel.Show();
                dashboardPanel.SetTimeRangeFilter(ProjectChimera.Systems.Analytics.TimeRange.LastMonth);
                if (_enableDebugLogging)
                    Debug.Log("[ContextualMenuController] Utilization Analytics view opened");
            }
        }

        /// <summary>
        /// Open construction cost analytics view
        /// </summary>
        private void OnOpenConstructionCostAnalytics()
        {
            var dashboardPanel = FindObjectOfType<ProjectChimera.UI.Panels.DataDashboardPanel>();
            if (dashboardPanel != null)
            {
                dashboardPanel.Show();
                // Focus on economic metrics
                dashboardPanel.SetTimeRangeFilter(ProjectChimera.Systems.Analytics.TimeRange.LastMonth);
                if (_enableDebugLogging)
                    Debug.Log("[ContextualMenuController] Construction Cost Analytics view opened");
            }
        }

        /// <summary>
        /// Open genetics analytics view
        /// </summary>
        private void OnOpenGeneticsAnalytics()
        {
            var dashboardPanel = FindObjectOfType<ProjectChimera.UI.Panels.DataDashboardPanel>();
            if (dashboardPanel != null)
            {
                dashboardPanel.Show();
                dashboardPanel.SetTimeRangeFilter(ProjectChimera.Systems.Analytics.TimeRange.Last3Months);
                if (_enableDebugLogging)
                    Debug.Log("[ContextualMenuController] Genetics Analytics view opened");
            }
        }

        /// <summary>
        /// Open trait analysis view
        /// </summary>
        private void OnOpenTraitAnalytics()
        {
            var dashboardPanel = FindObjectOfType<ProjectChimera.UI.Panels.DataDashboardPanel>();
            if (dashboardPanel != null)
            {
                dashboardPanel.Show();
                dashboardPanel.SetTimeRangeFilter(ProjectChimera.Systems.Analytics.TimeRange.LastYear);
                if (_enableDebugLogging)
                    Debug.Log("[ContextualMenuController] Trait Analytics view opened");
            }
        }

        /// <summary>
        /// Show message when analytics are not available
        /// </summary>
        private void ShowAnalyticsNotAvailableMessage()
        {
            if (_enableDebugLogging)
                Debug.LogWarning("[ContextualMenuController] Analytics dashboard not available - DataDashboardPanel not found");
            
            // In a production system, would show a proper notification or error message
            // For now, just log the issue
        }

        #endregion

        /// <summary>
        /// Create microprop category section
        /// </summary>
        private VisualElement CreateMicropropCategorySection(string category, CameraLevel level)
        {
            var categoryContainer = new VisualElement();
            
            // Category header
            var categoryHeader = new Label(category);
            categoryHeader.style.fontSize = 12;
            categoryHeader.style.unityFontStyleAndWeight = FontStyle.Bold;
            categoryHeader.style.marginTop = 6;
            categoryHeader.style.marginBottom = 4;
            categoryHeader.style.color = new Color(0.3f, 0.5f, 0.7f, 1f);
            categoryContainer.Add(categoryHeader);
            
            // Get techniques for this category
            var techniques = GetMicropropTechniques(category, level);
            
            foreach (var technique in techniques)
            {
                var button = CreateMicropropButton(category, technique);
                categoryContainer.Add(button);
            }
            
            return categoryContainer;
        }
        
        /// <summary>
        /// Get available microprop categories based on camera level
        /// </summary>
        private string[] GetAvailableMicropropCategories(CameraLevel level)
        {
            return level switch
            {
                CameraLevel.Facility => new[] { "Mass Propagation", "Protocol Development", "Quality Control", "Scale-Up Operations" },
                CameraLevel.Room => new[] { "Production Lines", "Bioreactor Systems", "Environmental Control", "Harvest Scheduling" },
                CameraLevel.Bench => new[] { "Culture Vessels", "Growth Media", "Monitoring Systems", "Transfer Protocols" },
                CameraLevel.Plant => new[] { "Individual Cultures", "Growth Assessment", "Rooting Success", "Acclimatization" },
                _ => new[] { "Basic Microprop", "Standard Protocol" }
            };
        }
        
        /// <summary>
        /// Get microprop techniques for category and level
        /// </summary>
        private string[] GetMicropropTechniques(string category, CameraLevel level)
        {
            return category switch
            {
                "Mass Propagation" => new[] { "Shoot Multiplication", "Somatic Embryogenesis", "Organogenesis", "Liquid Culture Systems" },
                "Protocol Development" => new[] { "Medium Optimization", "Growth Regulator Testing", "Sterilization Protocols", "Rooting Procedures" },
                "Quality Control" => new[] { "Genetic Fidelity Testing", "Contamination Screening", "Vigor Assessment", "Success Rate Analysis" },
                "Scale-Up Operations" => new[] { "Bioreactor Setup", "Automated Systems", "Production Planning", "Cost Optimization" },
                "Production Lines" => level switch
                {
                    CameraLevel.Room => new[] { "Stage I Establishment", "Stage II Multiplication", "Stage III Rooting", "Stage IV Acclimatization" },
                    _ => new[] { "Standard Production", "Custom Protocols" }
                },
                "Bioreactor Systems" => new[] { "Temporary Immersion", "Bubble Column", "Stirred Tank", "Mist Reactors" },
                "Environmental Control" => new[] { "Temperature Regulation", "Light Management", "Humidity Control", "Air Circulation" },
                "Harvest Scheduling" => new[] { "Growth Monitoring", "Maturity Assessment", "Harvest Timing", "Post-Harvest Processing" },
                "Culture Vessels" => new[] { "Test Tubes", "Culture Bottles", "Petri Dishes", "Bioreactor Vessels" },
                "Growth Media" => new[] { "MS Medium", "WPM Medium", "B5 Medium", "Custom Formulations" },
                "Monitoring Systems" => new[] { "Growth Tracking", "pH Monitoring", "Temperature Logging", "Contamination Detection" },
                "Transfer Protocols" => new[] { "Aseptic Transfer", "Subculture Timing", "Medium Refreshing", "Vessel Preparation" },
                "Individual Cultures" => new[] { "Growth Rate", "Morphology", "Genetic Stability", "Physiological Status" },
                "Growth Assessment" => new[] { "Shoot Count", "Leaf Development", "Root Formation", "Overall Vigor" },
                "Rooting Success" => new[] { "Root Length", "Root Number", "Root Quality", "Transplant Readiness" },
                "Acclimatization" => new[] { "Humidity Adaptation", "Light Adaptation", "Soil Transition", "Survival Rate" },
                "Basic Microprop" => new[] { "Culture Maintenance", "Basic Monitoring", "Standard Care" },
                "Standard Protocol" => new[] { "Follow Protocol", "Record Data", "Schedule Transfer" },
                _ => new[] { "Generic Microprop Operation" }
            };
        }
        
        /// <summary>
        /// Create a micropropagation button
        /// </summary>
        private Button CreateMicropropButton(string category, string technique)
        {
            var button = new Button();
            button.text = $"Execute {technique}";
            button.name = $"execute-{technique.ToLower().Replace(" ", "-")}-button";
            
            // Styling - blue theme for micropropagation
            button.style.height = 28;
            button.style.marginBottom = 2;
            button.style.marginLeft = 8; // Indent under category
            button.style.backgroundColor = new Color(0.2f, 0.35f, 0.5f, 1f); // Dark blue
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.35f, 0.5f, 0.65f, 1f);
            button.style.borderRightColor = new Color(0.35f, 0.5f, 0.65f, 1f);
            button.style.borderBottomColor = new Color(0.35f, 0.5f, 0.65f, 1f);
            button.style.borderLeftColor = new Color(0.35f, 0.5f, 0.65f, 1f);
            button.style.borderTopLeftRadius = 3;
            button.style.borderTopRightRadius = 3;
            button.style.borderBottomLeftRadius = 3;
            button.style.borderBottomRightRadius = 3;
            button.style.color = Color.white;
            button.style.fontSize = 11;
            
            // Wire up click handler
            button.RegisterCallback<ClickEvent>(evt => OnMicropropClicked(category, technique));
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.3f, 0.45f, 0.6f, 1f), 
                new Color(0.2f, 0.35f, 0.5f, 1f)
            );
            
            return button;
        }

        /// <summary>
        /// Handle mode change events
        /// </summary>
        private void OnModeChanged(DataEvents.ModeChangeEventData eventData)
        {
            _currentMode = eventData.NewMode;
            _isContextDirty = true;
            
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Mode changed to {_currentMode}, refreshing contextual menu");
            }
            
            // Refresh menu immediately for instant response
            RefreshContextualMenu();
        }

        /// <summary>
        /// Handle camera level change events
        /// </summary>
        private void OnCameraLevelChanged(DataEvents.CameraLevelChangeEventData eventData)
        {
            _currentCameraLevel = eventData.NewLevel;
            _isContextDirty = true;
            
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Camera level changed to {_currentCameraLevel}, refreshing contextual menu");
            }
            
            // Refresh menu immediately for instant response
            RefreshContextualMenu();
        }

        /// <summary>
        /// Handle selection changes (called externally)
        /// </summary>
        public void OnSelectionChanged(Transform newSelection)
        {
            _currentSelection = newSelection;
            _isContextDirty = true;
            
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Selection changed to {(newSelection?.name ?? "null")}, refreshing contextual menu");
            }
            
            // Refresh menu immediately for instant response
            RefreshContextualMenu();
        }

        #region Tab System Helpers

        /// <summary>
        /// Create a tab container
        /// </summary>
        private VisualElement CreateTabContainer()
        {
            var container = new VisualElement();
            container.name = "tab-container";
            container.style.flexDirection = FlexDirection.Column;
            return container;
        }

        /// <summary>
        /// Create a tab button with performance optimization
        /// </summary>
        private Button CreateTab(string tabName, bool isActive)
        {
            var tab = CreateOptimizedButton(tabName, null, "tab-button");
            tab.name = $"tab-{tabName.ToLower()}";
            
            // Styling
            tab.style.height = 28;
            tab.style.minWidth = 60;
            tab.style.marginRight = 2;
            tab.style.borderTopLeftRadius = 4;
            tab.style.borderTopRightRadius = 4;
            tab.style.borderBottomLeftRadius = 0;
            tab.style.borderBottomRightRadius = 0;
            tab.style.borderTopWidth = 1;
            tab.style.borderRightWidth = 1;
            tab.style.borderBottomWidth = 0;
            tab.style.borderLeftWidth = 1;
            
            if (isActive)
            {
                tab.style.backgroundColor = new Color(0.3f, 0.4f, 0.6f, 1f);
                tab.style.borderTopColor = new Color(0.5f, 0.6f, 0.8f, 1f);
                tab.style.borderRightColor = new Color(0.5f, 0.6f, 0.8f, 1f);
                tab.style.borderLeftColor = new Color(0.5f, 0.6f, 0.8f, 1f);
                tab.style.color = Color.white;
            }
            else
            {
                tab.style.backgroundColor = new Color(0.15f, 0.15f, 0.15f, 1f);
                tab.style.borderTopColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                tab.style.borderRightColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                tab.style.borderLeftColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                tab.style.color = new Color(0.7f, 0.7f, 0.7f, 1f);
            }
            
            return tab;
        }

        /// <summary>
        /// Create an action button with performance optimization
        /// </summary>
        private Button CreateActionButton(string buttonText, System.Action onClickAction)
        {
            var button = CreateOptimizedButton(buttonText, onClickAction, "action-button");
            button.name = $"action-{buttonText.ToLower().Replace(" ", "-")}-button";
            
            // Styling
            button.style.height = 28;
            button.style.marginBottom = 2;
            button.style.backgroundColor = new Color(0.4f, 0.2f, 0.2f, 1f);
            button.style.borderTopWidth = 1;
            button.style.borderRightWidth = 1;
            button.style.borderBottomWidth = 1;
            button.style.borderLeftWidth = 1;
            button.style.borderTopColor = new Color(0.6f, 0.3f, 0.3f, 1f);
            button.style.borderRightColor = new Color(0.6f, 0.3f, 0.3f, 1f);
            button.style.borderBottomColor = new Color(0.6f, 0.3f, 0.3f, 1f);
            button.style.borderLeftColor = new Color(0.6f, 0.3f, 0.3f, 1f);
            button.style.borderTopLeftRadius = 4;
            button.style.borderTopRightRadius = 4;
            button.style.borderBottomLeftRadius = 4;
            button.style.borderBottomRightRadius = 4;
            button.style.color = Color.white;
            
            // Wire up click handler
            if (onClickAction != null)
            {
                button.RegisterCallback<ClickEvent>(evt => onClickAction.Invoke());
            }
            
            // Add hover effects
            button.AddHoverEffects(
                new Color(0.5f, 0.3f, 0.3f, 1f), 
                new Color(0.4f, 0.2f, 0.2f, 1f)
            );
            
            return button;
        }

        /// <summary>
        /// Setup tab switching logic - placeholder for future tasks
        /// </summary>
        private void SetupTabSwitching(Button roomsTab, Button equipmentTab, Button utilitiesTab, Button schematicsTab, VisualElement tabContent, CameraLevel level)
        {
            // This will be implemented when the other tabs are created in tasks 4-6
            roomsTab.RegisterCallback<ClickEvent>(evt => {
                CreateRoomsTabContent(tabContent, level);
                UpdateTabAppearance(roomsTab, true);
                UpdateTabAppearance(equipmentTab, false);
                UpdateTabAppearance(utilitiesTab, false);
                UpdateTabAppearance(schematicsTab, false);
            });
            
            equipmentTab.RegisterCallback<ClickEvent>(evt => {
                CreateEquipmentTabContent(tabContent, level);
                UpdateTabAppearance(roomsTab, false);
                UpdateTabAppearance(equipmentTab, true);
                UpdateTabAppearance(utilitiesTab, false);
                UpdateTabAppearance(schematicsTab, false);
            });
            
            utilitiesTab.RegisterCallback<ClickEvent>(evt => {
                CreateUtilitiesTabContent(tabContent, level);
                UpdateTabAppearance(roomsTab, false);
                UpdateTabAppearance(equipmentTab, false);
                UpdateTabAppearance(utilitiesTab, true);
                UpdateTabAppearance(schematicsTab, false);
            });
            
            schematicsTab.RegisterCallback<ClickEvent>(evt => {
                CreateSchematicsTabContent(tabContent, level);
                UpdateTabAppearance(roomsTab, false);
                UpdateTabAppearance(equipmentTab, false);
                UpdateTabAppearance(utilitiesTab, false);
                UpdateTabAppearance(schematicsTab, true);
            });
        }

        /// <summary>
        /// Update tab appearance for active/inactive states
        /// </summary>
        private void UpdateTabAppearance(Button tab, bool isActive)
        {
            if (isActive)
            {
                tab.style.backgroundColor = new Color(0.3f, 0.4f, 0.6f, 1f);
                tab.style.borderTopColor = new Color(0.5f, 0.6f, 0.8f, 1f);
                tab.style.borderRightColor = new Color(0.5f, 0.6f, 0.8f, 1f);
                tab.style.borderLeftColor = new Color(0.5f, 0.6f, 0.8f, 1f);
                tab.style.color = Color.white;
            }
            else
            {
                tab.style.backgroundColor = new Color(0.15f, 0.15f, 0.15f, 1f);
                tab.style.borderTopColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                tab.style.borderRightColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                tab.style.borderLeftColor = new Color(0.3f, 0.3f, 0.3f, 1f);
                tab.style.color = new Color(0.7f, 0.7f, 0.7f, 1f);
            }
        }

        /// <summary>
        /// Show placeholder content for tabs not yet implemented
        /// </summary>
        private void ShowTabPlaceholder(VisualElement container, string tabName, string taskNumber)
        {
            container.Clear();
            
            var placeholder = new Label($"{tabName} tools will be implemented in {taskNumber}");
            placeholder.style.fontSize = 12;
            placeholder.style.color = new Color(0.8f, 0.8f, 0.8f, 1f);
            placeholder.style.whiteSpace = WhiteSpace.Normal;
            placeholder.style.marginTop = 8;
            container.Add(placeholder);
        }

        #endregion

        #region Construction Action Handlers

        /// <summary>
        /// Handle room placement button clicks - wire to Construction services
        /// </summary>
        private void OnRoomPlacementClicked(string roomType)
        {
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Room placement clicked: {roomType}");
            }

            // TODO: Wire to ConstructionManager once assembly reference is resolved
            // For now, show debug notification that button was clicked
            Debug.Log($"[ContextualMenuController] Room placement requested: {roomType}Room");
            ShowNotification($"Room placement: {roomType} Room (Construction wiring pending)", UIStatus.Info);
            
            /* Assembly reference issue - will be resolved later
            // Get the ConstructionManager service via DI
            var constructionManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Construction.ConstructionManager>();
            if (constructionManager != null)
            {
                // Start placement mode with the room template
                var templateName = $"{roomType}Room"; // Convert to template name
                constructionManager.StartPlacementMode(templateName);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Started placement mode for {templateName}");
                }
                
                // Show notification
                ShowNotification($"Placing {roomType} Room - Click to place", UIStatus.Info);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] ConstructionManager service not found!");
                ShowNotification("Construction service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle cancel placement action - wire to Construction services
        /// </summary>
        private void OnCancelPlacement()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Cancel placement clicked");
            }

            // TODO: Wire to ConstructionManager once assembly reference is resolved
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Cancel placement requested");
            ShowNotification("Placement cancelled (Construction wiring pending)", UIStatus.Info);
            
            /* Assembly reference issue - will be resolved later
            // Get the ConstructionManager service via DI
            var constructionManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Construction.ConstructionManager>();
            if (constructionManager != null)
            {
                constructionManager.CancelPlacementMode();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Cancelled placement mode");
                }
                
                // Show notification
                ShowNotification("Placement cancelled", UIStatus.Info);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] ConstructionManager service not found!");
            }
            */
        }

        /// <summary>
        /// Handle equipment placement button clicks - wire to Construction services
        /// </summary>
        private void OnEquipmentPlacementClicked(string category, string equipmentType)
        {
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Equipment placement clicked: {category} - {equipmentType}");
            }

            // TODO: Wire to EquipmentManager/ConstructionManager once assembly reference is resolved
            // For now, show debug notification that button was clicked
            Debug.Log($"[ContextualMenuController] Equipment placement requested: {category}/{equipmentType}");
            ShowNotification($"Equipment placement: {equipmentType} (Construction wiring pending)", UIStatus.Info);
            
            /* Assembly reference issue - will be resolved later
            // Get the ConstructionManager service via DI
            var constructionManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Construction.ConstructionManager>();
            if (constructionManager != null)
            {
                // Start placement mode with the equipment template
                var templateName = $"{category}_{equipmentType.Replace(" ", "_")}"; // Convert to template name
                constructionManager.StartPlacementMode(templateName);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Started equipment placement mode for {templateName}");
                }
                
                // Show notification
                ShowNotification($"Placing {equipmentType} - Click to place", UIStatus.Info);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] ConstructionManager service not found!");
                ShowNotification("Construction service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle cancel equipment placement action
        /// </summary>
        private void OnCancelEquipmentPlacement()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Cancel equipment placement clicked");
            }

            // TODO: Wire to ConstructionManager once assembly reference is resolved
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Cancel equipment placement requested");
            ShowNotification("Equipment placement cancelled (Construction wiring pending)", UIStatus.Info);
            
            /* Assembly reference issue - will be resolved later
            // Get the ConstructionManager service via DI
            var constructionManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Construction.ConstructionManager>();
            if (constructionManager != null)
            {
                constructionManager.CancelPlacementMode();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Cancelled equipment placement mode");
                }
                
                // Show notification
                ShowNotification("Equipment placement cancelled", UIStatus.Info);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] ConstructionManager service not found!");
            }
            */
        }

        /// <summary>
        /// Handle utility installation button clicks - wire to Construction services
        /// </summary>
        private void OnUtilityInstallationClicked(string category, string utilityType)
        {
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Utility installation clicked: {category} - {utilityType}");
            }

            // TODO: Wire to ConstructionManager/UtilityManager once assembly reference is resolved
            // For now, show debug notification that button was clicked
            Debug.Log($"[ContextualMenuController] Utility installation requested: {category}/{utilityType}");
            ShowNotification($"Utility installation: {utilityType} (Construction wiring pending)", UIStatus.Info);
            
            /* Assembly reference issue - will be resolved later
            // Get the ConstructionManager service via DI
            var constructionManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Construction.ConstructionManager>();
            if (constructionManager != null)
            {
                // Start placement mode with the utility template
                var templateName = $"Utility_{category}_{utilityType.Replace(" ", "_")}"; // Convert to template name
                constructionManager.StartPlacementMode(templateName);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Started utility installation mode for {templateName}");
                }
                
                // Show notification
                ShowNotification($"Installing {utilityType} - Click to place", UIStatus.Info);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] ConstructionManager service not found!");
                ShowNotification("Construction service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle cancel utility installation action
        /// </summary>
        private void OnCancelUtilityInstallation()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Cancel utility installation clicked");
            }

            // TODO: Wire to ConstructionManager once assembly reference is resolved
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Cancel utility installation requested");
            ShowNotification("Utility installation cancelled (Construction wiring pending)", UIStatus.Info);
            
            /* Assembly reference issue - will be resolved later
            // Get the ConstructionManager service via DI
            var constructionManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Construction.ConstructionManager>();
            if (constructionManager != null)
            {
                constructionManager.CancelPlacementMode();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Cancelled utility installation mode");
                }
                
                // Show notification
                ShowNotification("Utility installation cancelled", UIStatus.Info);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] ConstructionManager service not found!");
            }
            */
        }

        /// <summary>
        /// Handle schematic load button clicks - wire to Construction services
        /// </summary>
        private void OnSchematicLoadClicked(string category, string schematicType)
        {
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Schematic load clicked: {category} - {schematicType}");
            }

            // TODO: Wire to ConstructionManager/SchematicManager once assembly reference is resolved
            // For now, show debug notification that button was clicked
            Debug.Log($"[ContextualMenuController] Schematic load requested: {category}/{schematicType}");
            ShowNotification($"Loading schematic: {schematicType} (Construction wiring pending)", UIStatus.Info);
            
            /* Assembly reference issue - will be resolved later
            // Get the ConstructionManager service via DI
            var constructionManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Construction.ConstructionManager>();
            if (constructionManager != null)
            {
                // Load the schematic template
                var templateName = $"Schematic_{category}_{schematicType.Replace(" ", "_").Replace("(", "").Replace(")", "")}"; // Convert to template name
                constructionManager.LoadSchematic(templateName);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Loaded schematic template: {templateName}");
                }
                
                // Show notification
                ShowNotification($"Loaded {schematicType} schematic", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] ConstructionManager service not found!");
                ShowNotification("Construction service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle save schematic action
        /// </summary>
        private void OnSaveSchematic()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Save schematic clicked");
            }

            // TODO: Wire to ConstructionManager/SchematicManager once assembly reference is resolved
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Save schematic requested");
            ShowNotification("Schematic saved (Construction wiring pending)", UIStatus.Info);
            
            /* Assembly reference issue - will be resolved later
            // Get the ConstructionManager service via DI
            var constructionManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Construction.ConstructionManager>();
            if (constructionManager != null)
            {
                // Save current design as schematic
                constructionManager.SaveCurrentDesignAsSchematic();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Saved current design as schematic");
                }
                
                // Show notification
                ShowNotification("Design saved as schematic", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] ConstructionManager service not found!");
                ShowNotification("Construction service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle load schematic action
        /// </summary>
        private void OnLoadSchematic()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Load schematic clicked");
            }

            // TODO: Wire to ConstructionManager/SchematicManager once assembly reference is resolved
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Load schematic requested");
            ShowNotification("Schematic browser opened (Construction wiring pending)", UIStatus.Info);
            
            /* Assembly reference issue - will be resolved later
            // Get the ConstructionManager service via DI
            var constructionManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Construction.ConstructionManager>();
            if (constructionManager != null)
            {
                // Open schematic browser/selector
                constructionManager.OpenSchematicBrowser();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Opened schematic browser");
                }
                
                // Show notification
                ShowNotification("Select a schematic to load", UIStatus.Info);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] ConstructionManager service not found!");
                ShowNotification("Construction service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle clear design action
        /// </summary>
        private void OnClearDesign()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Clear design clicked");
            }

            // TODO: Wire to ConstructionManager once assembly reference is resolved
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Clear design requested");
            ShowNotification("Design cleared (Construction wiring pending)", UIStatus.Info);
            
            /* Assembly reference issue - will be resolved later
            // Get the ConstructionManager service via DI
            var constructionManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Construction.ConstructionManager>();
            if (constructionManager != null)
            {
                // Clear current design
                constructionManager.ClearCurrentDesign();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Cleared current design");
                }
                
                // Show notification
                ShowNotification("Design cleared", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] ConstructionManager service not found!");
                ShowNotification("Construction service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle cultivation tool button clicks - wire to Cultivation services
        /// </summary>
        private void OnCultivationToolClicked(string category, string toolType)
        {
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Cultivation tool clicked: {category} - {toolType}");
            }

            // TODO: Wire to CultivationManager/ToolManager once available
            // For now, show debug notification that button was clicked
            Debug.Log($"[ContextualMenuController] Cultivation tool requested: {category}/{toolType}");
            ShowNotification($"Using tool: {toolType} (Cultivation wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to cultivation services
            // Get the CultivationManager service via DI
            var cultivationManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Cultivation.CultivationManager>();
            if (cultivationManager != null)
            {
                // Activate the cultivation tool
                var toolId = $"{category}_{toolType.Replace(" ", "_")}"; // Convert to tool ID
                cultivationManager.ActivateTool(toolId);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Activated cultivation tool: {toolId}");
                }
                
                // Show notification
                ShowNotification($"Using {toolType}", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] CultivationManager service not found!");
                ShowNotification("Cultivation service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle put away tool action
        /// </summary>
        private void OnPutAwayTool()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Put away tool clicked");
            }

            // TODO: Wire to CultivationManager/ToolManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Put away tool requested");
            ShowNotification("Tool put away (Cultivation wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to cultivation services
            // Get the CultivationManager service via DI
            var cultivationManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Cultivation.CultivationManager>();
            if (cultivationManager != null)
            {
                // Deactivate current tool
                cultivationManager.DeactivateCurrentTool();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Deactivated current tool");
                }
                
                // Show notification
                ShowNotification("Tool put away", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] CultivationManager service not found!");
                ShowNotification("Cultivation service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle environment control button clicks - wire to Environmental services
        /// </summary>
        private void OnEnvironmentControlClicked(string category, string controlType)
        {
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Environment control clicked: {category} - {controlType}");
            }

            // TODO: Wire to EnvironmentalManager once available
            // For now, show debug notification that button was clicked
            Debug.Log($"[ContextualMenuController] Environment control requested: {category}/{controlType}");
            ShowNotification($"Adjusting: {controlType} (Environmental wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to environmental services
            // Get the EnvironmentalManager service via DI
            var environmentalManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Environment.EnvironmentalManager>();
            if (environmentalManager != null)
            {
                // Adjust the environmental control
                var controlId = $"{category}_{controlType.Replace(" ", "_")}"; // Convert to control ID
                environmentalManager.AdjustEnvironmentalControl(controlId);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Adjusted environmental control: {controlId}");
                }
                
                // Show notification
                ShowNotification($"Adjusted {controlType}", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] EnvironmentalManager service not found!");
                ShowNotification("Environmental service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle save environment preset action
        /// </summary>
        private void OnSaveEnvironmentPreset()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Save environment preset clicked");
            }

            // TODO: Wire to EnvironmentalManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Save environment preset requested");
            ShowNotification("Environment preset saved (Environmental wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to environmental services
            // Get the EnvironmentalManager service via DI
            var environmentalManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Environment.EnvironmentalManager>();
            if (environmentalManager != null)
            {
                // Save current environmental settings as preset
                environmentalManager.SaveCurrentEnvironmentAsPreset();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Saved current environment as preset");
                }
                
                // Show notification
                ShowNotification("Environment preset saved", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] EnvironmentalManager service not found!");
                ShowNotification("Environmental service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle load environment preset action
        /// </summary>
        private void OnLoadEnvironmentPreset()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Load environment preset clicked");
            }

            // TODO: Wire to EnvironmentalManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Load environment preset requested");
            ShowNotification("Environment preset browser opened (Environmental wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to environmental services
            // Get the EnvironmentalManager service via DI
            var environmentalManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Environment.EnvironmentalManager>();
            if (environmentalManager != null)
            {
                // Open environment preset browser/selector
                environmentalManager.OpenEnvironmentPresetBrowser();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Opened environment preset browser");
                }
                
                // Show notification
                ShowNotification("Select an environment preset to load", UIStatus.Info);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] EnvironmentalManager service not found!");
                ShowNotification("Environmental service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle reset environment to default action
        /// </summary>
        private void OnResetEnvironmentToDefault()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Reset environment to default clicked");
            }

            // TODO: Wire to EnvironmentalManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Reset environment to default requested");
            ShowNotification("Environment reset to default (Environmental wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to environmental services
            // Get the EnvironmentalManager service via DI
            var environmentalManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Environment.EnvironmentalManager>();
            if (environmentalManager != null)
            {
                // Reset environment to default settings
                environmentalManager.ResetEnvironmentToDefault();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Reset environment to default settings");
                }
                
                // Show notification
                ShowNotification("Environment reset to default", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] EnvironmentalManager service not found!");
                ShowNotification("Environmental service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle plant care button clicks - wire to Cultivation services
        /// </summary>
        private void OnPlantCareClicked(string category, string careType)
        {
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Plant care clicked: {category} - {careType}");
            }

            // TODO: Wire to CultivationManager/PlantCareManager once available
            // For now, show debug notification that button was clicked
            Debug.Log($"[ContextualMenuController] Plant care requested: {category}/{careType}");
            ShowNotification($"Performing: {careType} (Plant Care wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to cultivation services
            // Get the CultivationManager service via DI
            var cultivationManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Cultivation.CultivationManager>();
            if (cultivationManager != null)
            {
                // Perform the plant care action
                var careId = $"{category}_{careType.Replace(" ", "_").Replace("&", "And")}"; // Convert to care ID
                cultivationManager.PerformPlantCare(careId);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Performed plant care: {careId}");
                }
                
                // Show notification
                ShowNotification($"Performed {careType}", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] CultivationManager service not found!");
                ShowNotification("Cultivation service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle create plant care schedule action
        /// </summary>
        private void OnCreatePlantCareSchedule()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Create plant care schedule clicked");
            }

            // TODO: Wire to CultivationManager/PlantCareManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Create plant care schedule requested");
            ShowNotification("Care schedule created (Plant Care wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to cultivation services
            // Get the CultivationManager service via DI
            var cultivationManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Cultivation.CultivationManager>();
            if (cultivationManager != null)
            {
                // Create plant care schedule
                cultivationManager.CreatePlantCareSchedule();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Created plant care schedule");
                }
                
                // Show notification
                ShowNotification("Plant care schedule created", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] CultivationManager service not found!");
                ShowNotification("Cultivation service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle view plant health report action
        /// </summary>
        private void OnViewPlantHealthReport()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] View plant health report clicked");
            }

            // TODO: Wire to CultivationManager/PlantCareManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] View plant health report requested");
            ShowNotification("Health report opened (Plant Care wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to cultivation services
            // Get the CultivationManager service via DI
            var cultivationManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Cultivation.CultivationManager>();
            if (cultivationManager != null)
            {
                // Open plant health report
                cultivationManager.OpenPlantHealthReport();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Opened plant health report");
                }
                
                // Show notification
                ShowNotification("Plant health report opened", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] CultivationManager service not found!");
                ShowNotification("Cultivation service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle record plant observation action
        /// </summary>
        private void OnRecordPlantObservation()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Record plant observation clicked");
            }

            // TODO: Wire to CultivationManager/PlantCareManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Record plant observation requested");
            ShowNotification("Observation recorded (Plant Care wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to cultivation services
            // Get the CultivationManager service via DI
            var cultivationManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Cultivation.CultivationManager>();
            if (cultivationManager != null)
            {
                // Record plant observation
                cultivationManager.RecordPlantObservation();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Recorded plant observation");
                }
                
                // Show notification
                ShowNotification("Plant observation recorded", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] CultivationManager service not found!");
                ShowNotification("Cultivation service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle seed bank button clicks - wire to Genetics services
        /// </summary>
        private void OnSeedBankClicked(string category, string bankType)
        {
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Seed bank clicked: {category} - {bankType}");
            }

            // TODO: Wire to GeneticsManager/SeedBankManager once available
            // For now, show debug notification that button was clicked
            Debug.Log($"[ContextualMenuController] Seed bank access requested: {category}/{bankType}");
            ShowNotification($"Accessing: {bankType} (Genetics wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to genetics services
            // Get the GeneticsManager service via DI
            var geneticsManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.GeneticsManager>();
            if (geneticsManager != null)
            {
                // Access the seed bank resource
                var bankId = $"{category}_{bankType.Replace(" ", "_")}"; // Convert to bank ID
                geneticsManager.AccessSeedBank(bankId);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Accessed seed bank: {bankId}");
                }
                
                // Show notification
                ShowNotification($"Accessed {bankType}", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] GeneticsManager service not found!");
                ShowNotification("Genetics service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle create seed collection action
        /// </summary>
        private void OnCreateSeedCollection()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Create seed collection clicked");
            }

            // TODO: Wire to GeneticsManager/SeedBankManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Create seed collection requested");
            ShowNotification("Seed collection created (Genetics wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to genetics services
            // Get the GeneticsManager service via DI
            var geneticsManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.GeneticsManager>();
            if (geneticsManager != null)
            {
                // Create new seed collection
                geneticsManager.CreateNewSeedCollection();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Created new seed collection");
                }
                
                // Show notification
                ShowNotification("New seed collection created", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] GeneticsManager service not found!");
                ShowNotification("Genetics service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle export genetics data action
        /// </summary>
        private void OnExportGeneticsData()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Export genetics data clicked");
            }

            // TODO: Wire to GeneticsManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Export genetics data requested");
            ShowNotification("Genetics data exported (Genetics wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to genetics services
            // Get the GeneticsManager service via DI
            var geneticsManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.GeneticsManager>();
            if (geneticsManager != null)
            {
                // Export genetics data
                geneticsManager.ExportGeneticsData();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Exported genetics data");
                }
                
                // Show notification
                ShowNotification("Genetics data exported", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] GeneticsManager service not found!");
                ShowNotification("Genetics service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle import seeds action
        /// </summary>
        private void OnImportSeeds()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Import seeds clicked");
            }

            // TODO: Wire to GeneticsManager/SeedBankManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Import seeds requested");
            ShowNotification("Seeds imported (Genetics wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to genetics services
            // Get the GeneticsManager service via DI
            var geneticsManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.GeneticsManager>();
            if (geneticsManager != null)
            {
                // Import seeds
                geneticsManager.ImportSeeds();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Imported seeds");
                }
                
                // Show notification
                ShowNotification("Seeds imported successfully", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] GeneticsManager service not found!");
                ShowNotification("Genetics service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle tissue culture button clicks - wire to Genetics services
        /// </summary>
        private void OnTissueCultureClicked(string category, string operation)
        {
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Tissue culture clicked: {category} - {operation}");
            }

            // TODO: Wire to TissueCultureManager/GeneticsManager once available
            // For now, show debug notification that button was clicked
            Debug.Log($"[ContextualMenuController] Tissue culture operation requested: {category}/{operation}");
            ShowNotification($"Performing: {operation} (Tissue culture wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to tissue culture services
            // Get the TissueCultureManager service via DI
            var tissueCultureManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.TissueCultureManager>();
            if (tissueCultureManager != null)
            {
                // Perform the tissue culture operation
                var operationId = $"{category}_{operation.Replace(" ", "_")}"; // Convert to operation ID
                tissueCultureManager.PerformOperation(operationId);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Performed tissue culture operation: {operationId}");
                }
                
                // Show notification
                ShowNotification($"Performed {operation}", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] TissueCultureManager service not found!");
                ShowNotification("Tissue culture service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle setup sterile environment action
        /// </summary>
        private void OnSetupSterileEnvironment()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Setup sterile environment clicked");
            }

            // TODO: Wire to TissueCultureManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Setup sterile environment requested");
            ShowNotification("Sterile environment setup initiated (Tissue culture wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to tissue culture services
            // Get the TissueCultureManager service via DI
            var tissueCultureManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.TissueCultureManager>();
            if (tissueCultureManager != null)
            {
                // Setup sterile environment
                tissueCultureManager.SetupSterileEnvironment();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Sterile environment setup initiated");
                }
                
                // Show notification
                ShowNotification("Sterile environment ready", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] TissueCultureManager service not found!");
                ShowNotification("Tissue culture service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle prepare culture media action
        /// </summary>
        private void OnPrepareCultureMedia()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Prepare culture media clicked");
            }

            // TODO: Wire to TissueCultureManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Prepare culture media requested");
            ShowNotification("Culture media preparation started (Tissue culture wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to tissue culture services
            // Get the TissueCultureManager service via DI
            var tissueCultureManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.TissueCultureManager>();
            if (tissueCultureManager != null)
            {
                // Prepare culture media
                tissueCultureManager.PrepareCultureMedia();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Culture media preparation started");
                }
                
                // Show notification
                ShowNotification("Culture media prepared", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] TissueCultureManager service not found!");
                ShowNotification("Tissue culture service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle sterilize equipment action
        /// </summary>
        private void OnSterilizeEquipment()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Sterilize equipment clicked");
            }

            // TODO: Wire to TissueCultureManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Sterilize equipment requested");
            ShowNotification("Equipment sterilization started (Tissue culture wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to tissue culture services
            // Get the TissueCultureManager service via DI
            var tissueCultureManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.TissueCultureManager>();
            if (tissueCultureManager != null)
            {
                // Sterilize equipment
                tissueCultureManager.SterilizeEquipment();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Equipment sterilization started");
                }
                
                // Show notification
                ShowNotification("Equipment sterilized", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] TissueCultureManager service not found!");
                ShowNotification("Tissue culture service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle micropropagation button clicks - wire to Genetics services
        /// </summary>
        private void OnMicropropClicked(string category, string technique)
        {
            if (_enableDebugLogging)
            {
                Debug.Log($"[ContextualMenuController] Micropropagation clicked: {category} - {technique}");
            }

            // TODO: Wire to MicropropagationManager/GeneticsManager once available
            // For now, show debug notification that button was clicked
            Debug.Log($"[ContextualMenuController] Micropropagation technique requested: {category}/{technique}");
            ShowNotification($"Executing: {technique} (Microprop wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to micropropagation services
            // Get the MicropropagationManager service via DI
            var micropropagationManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.MicropropagationManager>();
            if (micropropagationManager != null)
            {
                // Execute the micropropagation technique
                var techniqueId = $"{category}_{technique.Replace(" ", "_")}"; // Convert to technique ID
                micropropagationManager.ExecuteTechnique(techniqueId);
                
                if (_enableDebugLogging)
                {
                    Debug.Log($"[ContextualMenuController] Executed micropropagation technique: {techniqueId}");
                }
                
                // Show notification
                ShowNotification($"Executed {technique}", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] MicropropagationManager service not found!");
                ShowNotification("Micropropagation service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle scale culture production action
        /// </summary>
        private void OnScaleCultureProduction()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Scale culture production clicked");
            }

            // TODO: Wire to MicropropagationManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Scale culture production requested");
            ShowNotification("Culture scaling initiated (Microprop wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to micropropagation services
            // Get the MicropropagationManager service via DI
            var micropropagationManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.MicropropagationManager>();
            if (micropropagationManager != null)
            {
                // Scale culture production
                micropropagationManager.ScaleCultureProduction();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Culture production scaling initiated");
                }
                
                // Show notification
                ShowNotification("Culture production scaled up", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] MicropropagationManager service not found!");
                ShowNotification("Micropropagation service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle optimize protocols action
        /// </summary>
        private void OnOptimizeProtocols()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Optimize protocols clicked");
            }

            // TODO: Wire to MicropropagationManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Optimize protocols requested");
            ShowNotification("Protocol optimization started (Microprop wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to micropropagation services
            // Get the MicropropagationManager service via DI
            var micropropagationManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.MicropropagationManager>();
            if (micropropagationManager != null)
            {
                // Optimize protocols
                micropropagationManager.OptimizeProtocols();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Protocol optimization started");
                }
                
                // Show notification
                ShowNotification("Protocols optimized", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] MicropropagationManager service not found!");
                ShowNotification("Micropropagation service unavailable", UIStatus.Error);
            }
            */
        }

        /// <summary>
        /// Handle quality assurance check action
        /// </summary>
        private void OnQualityAssuranceCheck()
        {
            if (_enableDebugLogging)
            {
                Debug.Log("[ContextualMenuController] Quality assurance check clicked");
            }

            // TODO: Wire to MicropropagationManager once available
            // For now, show debug notification that button was clicked
            Debug.Log("[ContextualMenuController] Quality assurance check requested");
            ShowNotification("QA check initiated (Microprop wiring pending)", UIStatus.Info);
            
            /* Future implementation - wire to micropropagation services
            // Get the MicropropagationManager service via DI
            var micropropagationManager = ServiceLocator.Instance?.GetService<ProjectChimera.Systems.Genetics.MicropropagationManager>();
            if (micropropagationManager != null)
            {
                // Perform quality assurance check
                micropropagationManager.PerformQualityAssuranceCheck();
                
                if (_enableDebugLogging)
                {
                    Debug.Log("[ContextualMenuController] Quality assurance check performed");
                }
                
                // Show notification
                ShowNotification("Quality assurance check completed", UIStatus.Success);
            }
            else
            {
                Debug.LogError("[ContextualMenuController] MicropropagationManager service not found!");
                ShowNotification("Micropropagation service unavailable", UIStatus.Error);
            }
            */
        }

        #endregion

        #endregion

        // Event handlers
        private void OnPauseClicked(ClickEvent evt)
        {
            _onPauseClicked?.Raise();
            _onHUDButtonClicked?.RaiseButtonClick("pause", PanelId, evt.position);
            
            // Toggle pause state
            // _uiManager.SetUIState(UIState.Paused);
        }
        
        private void OnSettingsClicked(ClickEvent evt)
        {
            _onSettingsClicked?.Raise();
            _onHUDButtonClicked?.RaiseButtonClick("settings", PanelId, evt.position);
            
            // _uiManager.ShowPanel("settings-menu");
        }
        
        private void OnMenuClicked(ClickEvent evt)
        {
            _onMenuClicked?.Raise();
            _onHUDButtonClicked?.RaiseButtonClick("menu", PanelId, evt.position);
            
            // _uiManager.SetUIState(UIState.MainMenu);
        }
        
        private void OnFacilitiesClicked(ClickEvent evt)
        {
            _onHUDButtonClicked?.RaiseButtonClick("facilities", PanelId, evt.position);
            // _uiManager.ShowPanel("facility-management-panel");
        }
        
        private void OnPlantsClicked(ClickEvent evt)
        {
            _onHUDButtonClicked?.RaiseButtonClick("plants", PanelId, evt.position);
            // _uiManager.ShowPanel("plant-management-panel");
        }
        
        private void OnResearchClicked(ClickEvent evt)
        {
            _onHUDButtonClicked?.RaiseButtonClick("research", PanelId, evt.position);
            // _uiManager.ShowPanel("research-panel");
        }
        
        private void OnMarketClicked(ClickEvent evt)
        {
            _onHUDButtonClicked?.RaiseButtonClick("market", PanelId, evt.position);
            // _uiManager.ShowPanel("market-panel");
        }
        
        private void OnInventoryClicked(ClickEvent evt)
        {
            _onHUDButtonClicked?.RaiseButtonClick("inventory", PanelId, evt.position);
            // _uiManager.ShowPanel("inventory-panel");
        }
        
        /// <summary>
        /// Update method for performance optimization monitoring
        /// </summary>
        protected virtual void Update()
        {
            // Performance optimization periodic checks
            if (_performanceOptimizer != null && _enableRealTimeUpdates)
            {
                _lastPerformanceCheck += Time.deltaTime;
                
                if (_lastPerformanceCheck >= PERFORMANCE_CHECK_INTERVAL)
                {
                    // Trigger contextual menu cleanup based on performance state
                    var perfState = _performanceOptimizer.CurrentPerformanceState;
                    
                    if (perfState == UIPerformanceState.Poor || perfState == UIPerformanceState.Critical)
                    {
                        CleanupUnusedContextualMenus();
                        
                        if (_enableDebugLogging)
                        {
                            Debug.Log($"[ContextualMenuController] Performance cleanup triggered. State: {perfState}");
                        }
                    }
                    
                    _lastPerformanceCheck = 0f;
                }
            }
            
            // Check if contextual menu needs updating
            if (_isContextDirty && _contextualMenuContainer != null)
            {
                RefreshContextualMenu();
                _isContextDirty = false;
            }
        }
        
        protected virtual void OnDestroy()
        {
            // Clean up contextual menu controller
            
            // Phase 7: Unsubscribe from events
            if (_modeChangedEvent != null)
            {
                _modeChangedEvent.Unsubscribe(OnModeChanged);
            }
            
            if (_cameraLevelChangedEvent != null)
            {
                _cameraLevelChangedEvent.Unsubscribe(OnCameraLevelChanged);
            }
            
            // Unsubscribe from camera controller selection events
            if (_cameraController != null)
            {
                _cameraController.OnFocusTargetChanged -= OnSelectionChanged;
            }
            
            // Clean up cache
            _contextualMenuCache?.Clear();
            
            // Clean up updates
            CancelInvoke(nameof(UpdateHUDData));
        }
    }
}