using UnityEngine;
using UnityEngine.UIElements;
using ProjectChimera.Systems.UI.Advanced;
using ProjectChimera.Systems.Services.Core;
using ProjectChimera.Core.Logging;
using System.Collections.Generic;
using System.Collections;

namespace ProjectChimera.Testing.Phase2_3
{
    /// <summary>
    /// Visual feedback and animation tests - Tests UI animations, hover effects, and visual states
    /// </summary>
    public class VisualFeedbackTests : MonoBehaviour
    {
        [Header("Visual Feedback Test Configuration")]
        [SerializeField] private bool _enableDetailedLogging = true;
        [SerializeField] private bool _runTestsOnStart = false;

        [Header("Test Results")]
        [SerializeField] private int _totalTests = 0;
        [SerializeField] private int _passedTests = 0;
        [SerializeField] private List<string> _testResults = new List<string>();

        // Test components
        private VisualFeedbackIntegration _visualFeedback;

        /// <summary>
        /// Set detailed logging configuration (replaces reflection usage)
        /// </summary>
        public void SetEnableDetailedLogging(bool enable)
        {
            _enableDetailedLogging = enable;
        }

        public void RunTests()
        {
            ChimeraLogger.Log("OTHER", "$1", this);

            _testResults.Clear();
            _totalTests = 0;
            _passedTests = 0;

            SetupTestEnvironment();

            TestVisualFeedbackIntegration();

            LogResults();
        }

        private void SetupTestEnvironment()
        {
            _visualFeedback = GetComponent<VisualFeedbackIntegration>();
            if (_visualFeedback == null)
            {
                _visualFeedback = gameObject.AddComponent<VisualFeedbackIntegration>();
            }

            // Ensure UIDocument is present
            if (GetComponent<UIDocument>() == null)
            {
                gameObject.AddComponent<UIDocument>();
            }
        }

        private void TestVisualFeedbackIntegration()
        {
            LogTestCategory("Visual Feedback Integration Tests");

            TestFeedbackSystemInitialization();
            TestHoverEffects();
            TestAnimationSystem();
            TestVisualStates();
        }

        private void TestFeedbackSystemInitialization()
        {
            _totalTests++;
            string testName = "Visual Feedback System Initialization";

            try
            {
                bool isInitialized = _visualFeedback != null && _visualFeedback.IsSystemReady();

                if (isInitialized)
                {
                    LogTest(testName, true, "Visual feedback system initialized successfully");
                    _passedTests++;
                }
                else
                {
                    LogTest(testName, false, "Visual feedback system failed to initialize");
                }
            }
            catch (System.Exception ex)
            {
                LogTest(testName, false, $"Exception: {ex.Message}");
            }
        }

        private void TestHoverEffects()
        {
            _totalTests++;
            string testName = "Hover Effects";

            try
            {
                // Test hover enter effect
                _visualFeedback.OnHoverEnter("test_element");
                bool hoverEnterTriggered = true; // Assume success if no exception

                // Test hover exit effect
                _visualFeedback.OnHoverExit("test_element");
                bool hoverExitTriggered = true; // Assume success if no exception

                if (hoverEnterTriggered && hoverExitTriggered)
                {
                    LogTest(testName, true, "Hover effects triggered successfully");
                    _passedTests++;
                }
                else
                {
                    LogTest(testName, false, "Hover effects failed to trigger");
                }
            }
            catch (System.Exception ex)
            {
                LogTest(testName, false, $"Exception: {ex.Message}");
            }
        }

        private void TestAnimationSystem()
        {
            _totalTests++;
            string testName = "Animation System";

            try
            {
                // Test fade in animation
                _visualFeedback.PlayFadeInAnimation("test_element", 0.5f);

                // Test scale animation
                _visualFeedback.PlayScaleAnimation("test_element", Vector3.one, Vector3.one * 1.2f, 0.3f);

                // Test slide animation
                _visualFeedback.PlaySlideAnimation("test_element", Vector3.zero, Vector3.up * 10, 0.4f);

                LogTest(testName, true, "Animation system operations completed");
                _passedTests++;
            }
            catch (System.Exception ex)
            {
                LogTest(testName, false, $"Exception: {ex.Message}");
            }
        }

        private void TestVisualStates()
        {
            _totalTests++;
            string testName = "Visual States";

            try
            {
                // Test different visual states
                _visualFeedback.SetVisualState("test_element", VisualState.Normal);
                _visualFeedback.SetVisualState("test_element", VisualState.Highlighted);
                _visualFeedback.SetVisualState("test_element", VisualState.Disabled);
                _visualFeedback.SetVisualState("test_element", VisualState.Selected);

                // Test state transitions
                _visualFeedback.TransitionToState("test_element", VisualState.Normal, 0.2f);

                LogTest(testName, true, "Visual states updated successfully");
                _passedTests++;
            }
            catch (System.Exception ex)
            {
                LogTest(testName, false, $"Exception: {ex.Message}");
            }
        }

        private void LogTestCategory(string categoryName)
        {
            if (_enableDetailedLogging)
            {
                ChimeraLogger.Log("OTHER", "$1", this);
            }
        }

        private void LogTest(string testName, bool passed, string message)
        {
            string result = passed ? "PASS" : "FAIL";
            string logMessage = $"[{result}] {testName}: {message}";

            _testResults.Add(logMessage);

            if (_enableDetailedLogging)
            {
                if (passed)
                {
                    ChimeraLogger.Log("OTHER", "$1", this);
                }
                else
                {
                    ChimeraLogger.Log("OTHER", "$1", this);
                }
            }
        }

        private void LogResults()
        {
            bool allTestsPassed = (_passedTests == _totalTests);

            ChimeraLogger.Log("OTHER", "$1", this);

            if (allTestsPassed)
            {
                ChimeraLogger.Log("OTHER", "$1", this);
            }
            else
            {
                ChimeraLogger.Log("OTHER", "$1", this);
            }
        }
    }
}
