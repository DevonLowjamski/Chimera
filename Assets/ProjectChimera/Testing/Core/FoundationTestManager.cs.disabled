using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using ProjectChimera.Core.Logging;
using ProjectChimera.Core.Updates;
using ProjectChimera.Core;

namespace ProjectChimera.Testing.Core
{
    /// <summary>
    /// REFACTORED: Foundation Test Manager
    /// Focused component for testing foundation systems: ServiceContainer, UpdateOrchestrator, Phase1FoundationCoordinator
    /// </summary>
    public class FoundationTestManager : MonoBehaviour
    {
        [Header("Foundation Test Settings")]
        [SerializeField] private bool _enableLogging = false;

        // System references for testing
        private Phase1FoundationCoordinator _foundationCoordinator;

        // Properties
        public bool IsEnabled { get; private set; } = true;

        // Events
        public System.Action<IntegrationTestResult> OnTestCompleted;

        private void Start()
        {
            Initialize();
        }

        private void Initialize()
        {
            _foundationCoordinator = Phase1FoundationCoordinator.Instance;

            if (_enableLogging)
                ChimeraLogger.Log("TESTING", "âœ… FoundationTestManager initialized", this);
        }

        /// <summary>
        /// Run all foundation tests
        /// </summary>
        public IEnumerator RunFoundationTests(List<IntegrationTestResult> results)
        {
            if (!IsEnabled) yield break;

            var testResult = new IntegrationTestResult
            {
                TestName = "Foundation Systems Validation",
                TestCategory = "Foundation",
                StartTime = Time.time
            };

            if (_enableLogging)
                ChimeraLogger.Log("TESTING", "ðŸ”§ Testing foundation systems...", this);

            try
            {
                yield return StartCoroutine(TestFoundationCoordinator(testResult));
                yield return StartCoroutine(TestUpdateOrchestrator(testResult));
                yield return StartCoroutine(TestServiceContainer(testResult));

                // Evaluate overall foundation test success
                bool allFoundationTestsPassed = testResult.TestSteps.TrueForAll(step => step.Contains("PASS"));
                testResult.Success = allFoundationTestsPassed;
                testResult.CompletionTime = Time.time;

                if (testResult.Success)
                {
                    testResult.ResultMessage = "All foundation systems operational";
                }
                else
                {
                    testResult.ResultMessage = "Foundation system validation failed";
                }
            }
            catch (System.Exception ex)
            {
                testResult.Success = false;
                testResult.CompletionTime = Time.time;
                testResult.ResultMessage = $"Foundation test error: {ex.Message}";
                testResult.TestSteps.Add($"Exception: {ex.Message}");

                if (_enableLogging)
                    ChimeraLogger.LogError("TESTING", $"Foundation test exception: {ex}", this);
            }

            results.Add(testResult);
            OnTestCompleted?.Invoke(testResult);
        }

        private IEnumerator TestFoundationCoordinator(IntegrationTestResult testResult)
        {
            bool foundationInitialized = _foundationCoordinator != null && _foundationCoordinator.IsInitialized;
            testResult.TestSteps.Add($"Foundation Coordinator: {(foundationInitialized ? "PASS" : "FAIL")}");

            if (foundationInitialized)
            {
                // Additional foundation coordinator checks
                bool foundationHealthy = true; // Could add more specific health checks
                testResult.TestSteps.Add($"Foundation Health: {(foundationHealthy ? "PASS" : "FAIL")}");
            }

            yield return new WaitForSeconds(0.1f); // Brief pause for realistic testing
        }

        private IEnumerator TestUpdateOrchestrator(IntegrationTestResult testResult)
        {
            var orchestrator = UpdateOrchestrator.Instance;
            bool orchestratorExists = orchestrator != null;
            testResult.TestSteps.Add($"Update Orchestrator Exists: {(orchestratorExists ? "PASS" : "FAIL")}");

            if (orchestratorExists)
            {
                int tickableCount = orchestrator.GetTickableCount();
                bool hasTickables = tickableCount > 0;
                testResult.TestSteps.Add($"Update Orchestrator Active ({tickableCount} tickables): {(hasTickables ? "PASS" : "FAIL")}");

                // Test orchestrator performance
                yield return new WaitForSeconds(0.5f);
                bool orchestratorRunning = orchestrator.IsRunning;
                testResult.TestSteps.Add($"Update Orchestrator Running: {(orchestratorRunning ? "PASS" : "FAIL")}");
            }
        }

        private IEnumerator TestServiceContainer(IntegrationTestResult testResult)
        {
            // Test ServiceContainer availability and functionality
            var serviceContainer = ServiceContainerFactory.Instance;
            bool containerExists = serviceContainer != null;
            testResult.TestSteps.Add($"Service Container: {(containerExists ? "PASS" : "FAIL")}");

            if (containerExists)
            {
                // Test service resolution
                try
                {
                    // Test resolving a common service (this would depend on what's registered)
                    bool canResolveServices = true; // Placeholder - would test actual service resolution
                    testResult.TestSteps.Add($"Service Resolution: {(canResolveServices ? "PASS" : "FAIL")}");
                }
                catch (System.Exception ex)
                {
                    testResult.TestSteps.Add($"Service Resolution: FAIL - {ex.Message}");
                }
            }

            yield return new WaitForSeconds(0.1f);
        }

        /// <summary>
        /// Run specific foundation test
        /// </summary>
        public IEnumerator RunSpecificTest(string testName)
        {
            if (!IsEnabled) yield break;

            var testResult = new IntegrationTestResult
            {
                TestName = $"Foundation - {testName}",
                TestCategory = "Foundation",
                StartTime = Time.time
            };

            switch (testName.ToLower())
            {
                case "coordinator":
                    yield return StartCoroutine(TestFoundationCoordinator(testResult));
                    break;
                case "orchestrator":
                    yield return StartCoroutine(TestUpdateOrchestrator(testResult));
                    break;
                case "servicecontainer":
                    yield return StartCoroutine(TestServiceContainer(testResult));
                    break;
                default:
                    testResult.Success = false;
                    testResult.ResultMessage = $"Unknown foundation test: {testName}";
                    break;
            }

            testResult.CompletionTime = Time.time;
            OnTestCompleted?.Invoke(testResult);
        }

        /// <summary>
        /// Set manager enabled/disabled
        /// </summary>
        public void SetEnabled(bool enabled)
        {
            IsEnabled = enabled;

            if (_enableLogging)
                ChimeraLogger.Log("TESTING", $"FoundationTestManager: {(enabled ? "enabled" : "disabled")}", this);
        }
    }
}