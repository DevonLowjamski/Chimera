using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using ProjectChimera.Core.Logging;
using ProjectChimera.Core.Performance;
using ProjectChimera.Systems.Cultivation.Advanced;

namespace ProjectChimera.Testing.Core
{
    /// <summary>
    /// REFACTORED: Load Test Manager
    /// Focused component for performing load testing on various systems with performance monitoring
    /// </summary>
    public class LoadTestManager : MonoBehaviour
    {
        [Header("Load Test Settings")]
        [SerializeField] private bool _enableLogging = false;
        [SerializeField] private float _maxAcceptableFrameTime = 20f; // 50 FPS minimum
        [SerializeField] private long _maxAcceptableMemoryUsage = 600 * 1024 * 1024; // 600MB
        [SerializeField] private int _loadTestPlantCount = 100;
        [SerializeField] private float _defaultLoadTestDuration = 10f;

        // System references for testing
        private AdvancedPerformanceMonitor _performanceMonitor;
        private AdvancedCultivationManager _cultivationManager;

        // Properties
        public bool IsEnabled { get; private set; } = true;

        // Events
        public System.Action<IntegrationTestResult> OnTestCompleted;

        private void Start()
        {
            Initialize();
        }

        private void Initialize()
        {
            _performanceMonitor = FindObjectOfType<AdvancedPerformanceMonitor>();
            _cultivationManager = AdvancedCultivationManager.Instance;

            if (_enableLogging)
                ChimeraLogger.Log("TESTING", "âœ… LoadTestManager initialized", this);
        }

        /// <summary>
        /// Run all load tests
        /// </summary>
        public IEnumerator RunLoadTests(List<IntegrationTestResult> results)
        {
            if (!IsEnabled) yield break;

            // Run different types of load tests
            yield return StartCoroutine(RunCultivationLoadTest(results));
            yield return StartCoroutine(RunMemoryLoadTest(results));
            yield return StartCoroutine(RunConcurrentSystemsLoadTest(results));
        }

        /// <summary>
        /// Run cultivation system load test
        /// </summary>
        public IEnumerator RunCultivationLoadTest(List<IntegrationTestResult> results)
        {
            var testResult = new IntegrationTestResult
            {
                TestName = "Cultivation Load Testing",
                TestCategory = "Load",
                StartTime = Time.time
            };

            if (_enableLogging)
                ChimeraLogger.Log("TESTING", $"ðŸŒ¿ Running cultivation load test ({_loadTestPlantCount} plants, {_defaultLoadTestDuration}s)...", this);

            try
            {
                yield return StartCoroutine(PerformCultivationLoad(testResult, _loadTestPlantCount, _defaultLoadTestDuration));
            }
            catch (System.Exception ex)
            {
                testResult.Success = false;
                testResult.CompletionTime = Time.time;
                testResult.ResultMessage = $"Cultivation load test error: {ex.Message}";
                testResult.TestSteps.Add($"Exception: {ex.Message}");
            }

            results.Add(testResult);
            OnTestCompleted?.Invoke(testResult);
        }

        /// <summary>
        /// Run memory-focused load test
        /// </summary>
        public IEnumerator RunMemoryLoadTest(List<IntegrationTestResult> results)
        {
            var testResult = new IntegrationTestResult
            {
                TestName = "Memory Load Testing",
                TestCategory = "Load",
                StartTime = Time.time
            };

            if (_enableLogging)
                ChimeraLogger.Log("TESTING", "ðŸ’¾ Running memory load test...", this);

            try
            {
                float testStartTime = Time.time;
                long initialMemoryUsage = 0;
                long maxMemoryUsage = 0;

                if (_performanceMonitor != null)
                {
                    var initialMetrics = _performanceMonitor.GetCurrentMetrics();
                    initialMemoryUsage = initialMetrics?.GCMemory ?? 0;
                }

                // Create memory load
                var memoryStressObjects = new List<GameObject>();
                var memoryStressData = new List<float[]>();

                for (int i = 0; i < 500; i++)
                {
                    var obj = new GameObject($"MemoryStress_{i}");
                    obj.AddComponent<MeshRenderer>();
                    obj.AddComponent<MeshFilter>();
                    memoryStressObjects.Add(obj);

                    // Create arrays to use memory
                    memoryStressData.Add(new float[1000]);
                }

                testResult.TestSteps.Add($"Created memory load: {memoryStressObjects.Count} objects, {memoryStressData.Count} arrays");

                // Monitor memory during test
                float testDuration = 5f;
                while (Time.time - testStartTime < testDuration)
                {
                    if (_performanceMonitor != null)
                    {
                        var currentMetrics = _performanceMonitor.GetCurrentMetrics();
                        if (currentMetrics != null)
                        {
                            maxMemoryUsage = Mathf.Max(maxMemoryUsage, currentMetrics.GCMemory);
                        }
                    }
                    yield return null;
                }

                // Clean up memory load
                foreach (var obj in memoryStressObjects)
                {
                    DestroyImmediate(obj);
                }
                memoryStressData.Clear();

                // Force garbage collection
                System.GC.Collect();
                yield return new WaitForSeconds(1f);

                // Evaluate memory test results
                long memoryIncrease = maxMemoryUsage - initialMemoryUsage;
                bool memoryHandledWell = maxMemoryUsage < _maxAcceptableMemoryUsage;

                testResult.TestSteps.Add($"Initial Memory: {initialMemoryUsage / (1024 * 1024):F1}MB");
                testResult.TestSteps.Add($"Max Memory: {maxMemoryUsage / (1024 * 1024):F1}MB");
                testResult.TestSteps.Add($"Memory Increase: {memoryIncrease / (1024 * 1024):F1}MB");
                testResult.TestSteps.Add($"Memory Management: {(memoryHandledWell ? "PASS" : "FAIL")}");

                testResult.Success = memoryHandledWell;
                testResult.CompletionTime = Time.time;
                testResult.ResultMessage = testResult.Success ?
                    "Memory load test passed successfully" :
                    "Memory load test failed - excessive memory usage detected";
            }
            catch (System.Exception ex)
            {
                testResult.Success = false;
                testResult.CompletionTime = Time.time;
                testResult.ResultMessage = $"Memory load test error: {ex.Message}";
                testResult.TestSteps.Add($"Exception: {ex.Message}");
            }

            results.Add(testResult);
            OnTestCompleted?.Invoke(testResult);
        }

        /// <summary>
        /// Run concurrent systems load test
        /// </summary>
        public IEnumerator RunConcurrentSystemsLoadTest(List<IntegrationTestResult> results)
        {
            var testResult = new IntegrationTestResult
            {
                TestName = "Concurrent Systems Load Testing",
                TestCategory = "Load",
                StartTime = Time.time
            };

            if (_enableLogging)
                ChimeraLogger.Log("TESTING", "âš¡ Running concurrent systems load test...", this);

            try
            {
                float testStartTime = Time.time;
                float maxFrameTime = 0f;
                long maxMemoryUsage = 0;
                int frameCount = 0;

                // Start multiple concurrent loads
                StartCoroutine(CreateRenderingLoad());
                StartCoroutine(CreateComputationLoad());

                // Create cultivation load simultaneously
                if (_cultivationManager != null)
                {
                    var concurrentPlants = new List<AdvancedPlantInstance>();
                    for (int i = 0; i < 50; i++) // Smaller load for concurrent test
                    {
                        var plant = new AdvancedPlantInstance
                        {
                            PlantId = $"CONCURRENT_LOAD_PLANT_{i:000}",
                            IsActive = true
                        };
                        concurrentPlants.Add(plant);
                        _cultivationManager.RegisterPlant(plant);
                    }
                    testResult.TestSteps.Add($"Created concurrent cultivation load: {concurrentPlants.Count} plants");
                }

                // Monitor performance during concurrent load
                float testDuration = 8f;
                while (Time.time - testStartTime < testDuration)
                {
                    if (_performanceMonitor != null)
                    {
                        var currentMetrics = _performanceMonitor.GetCurrentMetrics();
                        if (currentMetrics != null)
                        {
                            maxFrameTime = Mathf.Max(maxFrameTime, currentMetrics.FrameTime);
                            maxMemoryUsage = Mathf.Max(maxMemoryUsage, currentMetrics.GCMemory);
                        }
                    }
                    frameCount++;
                    yield return null;
                }

                // Clean up cultivation load
                if (_cultivationManager != null)
                {
                    for (int i = 0; i < 50; i++)
                    {
                        _cultivationManager.UnregisterPlant($"CONCURRENT_LOAD_PLANT_{i:000}");
                    }
                }

                // Evaluate concurrent load test results
                bool frameTimeAcceptable = maxFrameTime < _maxAcceptableFrameTime * 2f; // Allow more overhead for concurrent systems
                bool memoryAcceptable = maxMemoryUsage < _maxAcceptableMemoryUsage;

                testResult.TestSteps.Add($"Max Frame Time: {maxFrameTime:F2}ms ({(frameTimeAcceptable ? "PASS" : "FAIL")})");
                testResult.TestSteps.Add($"Max Memory Usage: {maxMemoryUsage / (1024 * 1024):F1}MB ({(memoryAcceptable ? "PASS" : "FAIL")})");
                testResult.TestSteps.Add($"Frames Tested: {frameCount}");

                testResult.Success = frameTimeAcceptable && memoryAcceptable;
                testResult.CompletionTime = Time.time;
                testResult.ResultMessage = testResult.Success ?
                    "Concurrent systems load test passed" :
                    "Concurrent systems load test failed - performance degradation detected";
            }
            catch (System.Exception ex)
            {
                testResult.Success = false;
                testResult.CompletionTime = Time.time;
                testResult.ResultMessage = $"Concurrent load test error: {ex.Message}";
                testResult.TestSteps.Add($"Exception: {ex.Message}");
            }

            results.Add(testResult);
            OnTestCompleted?.Invoke(testResult);
        }

        private IEnumerator PerformCultivationLoad(IntegrationTestResult testResult, int plantCount, float duration)
        {
            if (_cultivationManager == null)
            {
                testResult.Success = false;
                testResult.CompletionTime = Time.time;
                testResult.ResultMessage = "Cultivation load test failed - no cultivation manager";
                return null;
            }

            float testStartTime = Time.time;
            float maxFrameTime = 0f;
            long maxMemoryUsage = 0;
            int frameCount = 0;

            // Create load by registering multiple test plants
            var testPlants = new List<AdvancedPlantInstance>();
            for (int i = 0; i < plantCount; i++)
            {
                var plant = new AdvancedPlantInstance
                {
                    PlantId = $"LOAD_TEST_PLANT_{i:000}",
                    IsActive = true
                };
                testPlants.Add(plant);
                _cultivationManager.RegisterPlant(plant);
            }

            testResult.TestSteps.Add($"Created cultivation load: {testPlants.Count} test plants");

            // Monitor performance during load test
            while (Time.time - testStartTime < duration)
            {
                if (_performanceMonitor != null)
                {
                    var currentMetrics = _performanceMonitor.GetCurrentMetrics();
                    if (currentMetrics != null)
                    {
                        maxFrameTime = Mathf.Max(maxFrameTime, currentMetrics.FrameTime);
                        maxMemoryUsage = Mathf.Max(maxMemoryUsage, currentMetrics.GCMemory);
                    }
                }
                frameCount++;
                yield return null;
            }

            // Clean up test plants
            foreach (var plant in testPlants)
            {
                _cultivationManager.UnregisterPlant(plant.PlantId);
            }

            // Evaluate load test results
            bool frameTimeAcceptable = maxFrameTime < _maxAcceptableFrameTime * 1.5f; // Allow 50% overhead during load
            bool memoryAcceptable = maxMemoryUsage < _maxAcceptableMemoryUsage;

            testResult.TestSteps.Add($"Max Frame Time: {maxFrameTime:F2}ms ({(frameTimeAcceptable ? "PASS" : "FAIL")})");
            testResult.TestSteps.Add($"Max Memory Usage: {maxMemoryUsage / (1024 * 1024):F1}MB ({(memoryAcceptable ? "PASS" : "FAIL")})");
            testResult.TestSteps.Add($"Frames Tested: {frameCount}");

            testResult.Success = frameTimeAcceptable && memoryAcceptable;
            testResult.CompletionTime = Time.time;
            testResult.ResultMessage = testResult.Success ?
                "Cultivation load testing passed successfully" :
                "Cultivation load testing failed - performance degradation detected";
        }

        private IEnumerator CreateRenderingLoad()
        {
            // Create temporary rendering load
            var renderingObjects = new List<GameObject>();
            for (int i = 0; i < 100; i++)
            {
                var obj = new GameObject($"RenderLoad_{i}");
                var renderer = obj.AddComponent<MeshRenderer>();
                var filter = obj.AddComponent<MeshFilter>();

                // Create simple cube mesh for rendering load
                filter.mesh = Resources.GetBuiltinResource<Mesh>("Cube.fbx");
                renderingObjects.Add(obj);
            }

            yield return new WaitForSeconds(8f);

            // Clean up rendering load
            foreach (var obj in renderingObjects)
            {
                DestroyImmediate(obj);
            }
        }

        private IEnumerator CreateComputationLoad()
        {
            // Create computational load
            for (int frame = 0; frame < 240; frame++) // 8 seconds at 30fps
            {
                // Perform some CPU-intensive calculations
                for (int i = 0; i < 1000; i++)
                {
                    float result = Mathf.Sin(i * 0.01f) * Mathf.Cos(i * 0.02f);
                    Vector3 calculation = new Vector3(result, result * 2f, result * 3f);
                    calculation.normalized.magnitude.GetHashCode(); // Force calculation
                }
                yield return null;
            }
        }

        /// <summary>
        /// Set manager enabled/disabled
        /// </summary>
        public void SetEnabled(bool enabled)
        {
            IsEnabled = enabled;

            if (_enableLogging)
                ChimeraLogger.Log("TESTING", $"LoadTestManager: {(enabled ? "enabled" : "disabled")}", this);
        }
    }
}