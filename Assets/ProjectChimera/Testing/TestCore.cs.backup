using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;
using ProjectChimera.Core;
using ProjectChimera.Core.Logging;

namespace ProjectChimera.Testing
{
    /// <summary>
    /// Core testing infrastructure and component coordination for validation tests.
    /// Handles test initialization, component orchestration, and result aggregation.
    /// </summary>
    public class TestCore : MonoBehaviour
    {
        [Header("Test Configuration")]
        [SerializeField] protected bool _runTestsOnStart = false;
        [SerializeField] protected bool _enableTestLogging = true;
        [SerializeField] protected bool _validatePerformance = true;
        [SerializeField] protected int _performanceTestIterations = 100;

        // Core test state
        protected List<ValidationResult> _validationResults = new List<ValidationResult>();
        protected bool _testRunning = false;

        // Component references
        protected ServiceContainerValidator _containerValidator;
        protected ManagerRegistryValidator _registryValidator;
        protected DependencyInjectionValidator _diValidator;
        protected PerformanceValidator _performanceValidator;

        protected virtual void Start()
        {
            if (_runTestsOnStart)
            {
                StartCoroutine(RunCompleteValidation());
            }
        }

        /// <summary>
        /// Initialize test components
        /// </summary>
        protected virtual void InitializeTestComponents()
        {
            // Initialize validation components
            _containerValidator = GetComponent<ServiceContainerValidator>();
            if (_containerValidator == null)
            {
                _containerValidator = gameObject.AddComponent<ServiceContainerValidator>();
            }
            _containerValidator.Initialize(this);

            _registryValidator = GetComponent<ManagerRegistryValidator>();
            if (_registryValidator == null)
            {
                _registryValidator = gameObject.AddComponent<ManagerRegistryValidator>();
            }
            _registryValidator.Initialize(this);

            _diValidator = GetComponent<DependencyInjectionValidator>();
            if (_diValidator == null)
            {
                _diValidator = gameObject.AddComponent<DependencyInjectionValidator>();
            }
            _diValidator.Initialize(this);

            _performanceValidator = GetComponent<PerformanceValidator>();
            if (_performanceValidator == null)
            {
                _performanceValidator = gameObject.AddComponent<PerformanceValidator>();
            }
            _performanceValidator.Initialize(this);
        }

        /// <summary>
        /// Run complete validation suite
        /// </summary>
        public virtual IEnumerator RunCompleteValidation()
        {
            if (_testRunning) yield break;

            _testRunning = true;
            _validationResults.Clear();

            LogTest("=== Starting Complete Validation Suite ===");

            // Initialize test components
            InitializeTestComponents();

            // Wait for initialization
            yield return new WaitForSeconds(0.1f);

            // Run validation components
            yield return StartCoroutine(RunComponentValidations());

            // Generate validation summary
            GenerateValidationSummary();

            _testRunning = false;
            LogTest("=== Complete Validation Suite Finished ===");
        }

        /// <summary>
        /// Run all component validations
        /// </summary>
        protected virtual IEnumerator RunComponentValidations()
        {
            // Service container validation
            if (_containerValidator != null)
            {
                yield return StartCoroutine(_containerValidator.RunValidation());
                _validationResults.AddRange(_containerValidator.GetResults());
            }

            // Manager registry validation
            if (_registryValidator != null)
            {
                yield return StartCoroutine(_registryValidator.RunValidation());
                _validationResults.AddRange(_registryValidator.GetResults());
            }

            // Dependency injection validation
            if (_diValidator != null)
            {
                yield return StartCoroutine(_diValidator.RunValidation());
                _validationResults.AddRange(_diValidator.GetResults());
            }

            // Performance validation
            if (_performanceValidator != null && _validatePerformance)
            {
                yield return StartCoroutine(_performanceValidator.RunValidation(_performanceTestIterations));
                _validationResults.AddRange(_performanceValidator.GetResults());
            }
        }

        /// <summary>
        /// Generate and display validation summary
        /// </summary>
        protected virtual void GenerateValidationSummary()
        {
            int passed = 0;
            int failed = 0;
            int totalErrors = 0;
            int totalWarnings = 0;

            LogTest("\n=== Validation Summary ===");

            foreach (var result in _validationResults)
            {
                if (result.Success)
                {
                    passed++;
                    LogTest($"‚úì {result.ValidationName}: PASSED");
                }
                else
                {
                    failed++;
                    LogTest($"‚úó {result.ValidationName}: FAILED");
                    foreach (var error in result.Errors)
                    {
                        LogTest($"    Error: {error}");
                        totalErrors++;
                    }
                }

                foreach (var warning in result.Warnings)
                {
                    LogTest($"    Warning: {warning}");
                    totalWarnings++;
                }
            }

            LogTest($"\nResults: {passed} passed, {failed} failed");
            LogTest($"Total Errors: {totalErrors}, Total Warnings: {totalWarnings}");

            if (failed == 0)
            {
                LogTest("üéâ All validations PASSED!");
            }
            else
            {
                LogTest($"‚ùå {failed} validation(s) FAILED - Review errors above");
            }
        }

        /// <summary>
        /// Add validation result to collection
        /// </summary>
        public virtual void AddValidationResult(ValidationResult result)
        {
            _validationResults.Add(result);
        }

        /// <summary>
        /// Get all validation results
        /// </summary>
        public virtual List<ValidationResult> GetValidationResults()
        {
            return new List<ValidationResult>(_validationResults);
        }

        /// <summary>
        /// Create a test manager for validation purposes
        /// </summary>
        public virtual TestManager CreateTestManager(string name)
        {
            var testObject = new GameObject(name);
            return testObject.AddComponent<TestManager>();
        }

        /// <summary>
        /// Test logging utility
        /// </summary>
        protected void LogTest(string message)
        {
            if (_enableTestLogging)
                UnityEngine.Debug.Log("Operation completed");
        }

        #region Public Properties

        public bool RunTestsOnStart
        {
            get => _runTestsOnStart;
            set => _runTestsOnStart = value;
        }

        public bool EnableTestLogging
        {
            get => _enableTestLogging;
            set => _enableTestLogging = value;
        }

        public bool ValidatePerformance
        {
            get => _validatePerformance;
            set => _validatePerformance = value;
        }

        public int PerformanceTestIterations
        {
            get => _performanceTestIterations;
            set => _performanceTestIterations = Mathf.Max(1, value);
        }

        public bool IsTestRunning => _testRunning;
        public int ValidationResultCount => _validationResults.Count;

        #endregion
    }

    /// <summary>
    /// Validation result data structure
    /// </summary>
    [System.Serializable]
    public class ValidationResult
    {
        public string ValidationName { get; set; }
        public bool Success { get; set; } = true;
        public List<string> Errors { get; set; } = new List<string>();
        public List<string> Warnings { get; set; } = new List<string>();

        public void AddError(string error)
        {
            Errors.Add(error);
            Success = false;
        }

        public void AddWarning(string warning)
        {
            Warnings.Add(warning);
        }

        public void MarkSuccess()
        {
            Success = Errors.Count == 0;
        }
    }

    /// <summary>
    /// Base class for test validators
    /// </summary>
    public abstract class BaseValidator : MonoBehaviour
    {
        protected TestCore _testCore;
        protected List<ValidationResult> _results = new List<ValidationResult>();

        public virtual void Initialize(TestCore testCore)
        {
            _testCore = testCore;
            _results.Clear();
        }

        public abstract IEnumerator RunValidation();

        public virtual List<ValidationResult> GetResults()
        {
            return new List<ValidationResult>(_results);
        }

        protected void LogValidation(string message)
        {
            if (_testCore != null && _testCore.EnableTestLogging)
                UnityEngine.Debug.Log("Operation completed");
        }
    }

    /// <summary>
    /// Test manager for validation
    /// </summary>
    public class TestManager : ChimeraManager
    {
        public override string ManagerName => "ValidationTestManager";
        public override ManagerPriority Priority => ManagerPriority.Low;

        protected override void OnManagerInitialize()
        {
            // Test implementation
        }

        protected override void OnManagerShutdown()
        {
            // Test implementation
        }
    }

    /// <summary>
    /// Non-existent manager for error testing
    /// </summary>
    public class NonExistentManager : ChimeraManager
    {
        public override string ManagerName => "NonExistent";
        public override ManagerPriority Priority => ManagerPriority.Low;

        protected override void OnManagerInitialize() { }
        protected override void OnManagerShutdown() { }
    }

    /// <summary>
    /// Non-existent service for error testing
    /// </summary>
    public interface NonExistentService { }
}